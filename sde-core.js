/*!
 *  Sueddeutsche.de JavaScript Library
 *  ===================================
 *
 *  Copyright 2012, Sueddeutsche.de GmbH / Sueddeutsche Zeitung GmbH
 *  All rights reserved.
 *
 *  ----------------------------------------------------------------------
 *
 *  Included third-party components which make our lives better
 *  -----------------------------------------------------------
 *
 *  -   jQuery 1.7.2: http://code.jquery.com/jquery-1.7.2.js
 *      -   Copyright 2012, John Resig
 *          Dual licensed under the MIT or GPL Version 2 licenses. (We've chosen MIT)
 *          <http://jquery.org/license>
 *
 *      -   Includes Sizzle.js
 *          <http://sizzlejs.com/>
 *          Copyright (c) 2010, The Dojo Foundation
 *          Released under the MIT, BSD, and GPL Licenses. (We've, again, chosen MIT)
 *
 *  -   jQuery.UI
 *          GNU GENERAL PUBLIC LICENSE Version 2, June 1991
 *          Copyright (c) 1989, 1991 Free Software Foundation, Inc. (GPL)
 *          Copyright (c) 2011 Paul Bakaus, <http://jqueryui.com/> (MIT)
 *          Version 1.8.10
 *
 *  -   SWFObject 2.2: http://code.google.com/p/swfobject/
 *         MIT License <http://www.opensource.org/licenses/mit-license.php> 
 *
 *  -   FontDetect 2.1: http://www.atomicjetpacks.com/blog/8
 *          Copyright (c) 2012 Jennifer Simonds
 *          MIT License <http://opensource.org/licenses/MIT>
 *
 *  -   Valiton Webanalytics Framework
 *      -   Copyright (c) 2009-2010 Valiton GmbH All rights reserved. 
 *          <http://www.valiton.com>    
 */
;/*!
 * jQuery JavaScript Library v1.7.2
 * http://jquery.com/
 *
 * Copyright 2011, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 * Copyright 2011, The Dojo Foundation
 * Released under the MIT, BSD, and GPL Licenses.
 *
 * Date: Wed Mar 21 12:46:34 2012 -0700
 */
(function( window, undefined ) {

// Use the correct document accordingly with window argument (sandbox)
var document = window.document,
	navigator = window.navigator,
	location = window.location;
var jQuery = (function() {

// Define a local copy of jQuery
var jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// A central reference to the root jQuery(document)
	rootjQuery,

	// A simple way to check for HTML strings or ID strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	quickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,

	// Check if a string has a non-whitespace character in it
	rnotwhite = /\S/,

	// Used for trimming whitespace
	trimLeft = /^\s+/,
	trimRight = /\s+$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>)?$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,

	// Useragent RegExp
	rwebkit = /(webkit)[ \/]([\w.]+)/,
	ropera = /(opera)(?:.*version)?[ \/]([\w.]+)/,
	rmsie = /(msie) ([\w.]+)/,
	rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/,

	// Matches dashed string for camelizing
	rdashAlpha = /-([a-z]|[0-9])/ig,
	rmsPrefix = /^-ms-/,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return ( letter + "" ).toUpperCase();
	},

	// Keep a UserAgent string for use with jQuery.browser
	userAgent = navigator.userAgent,

	// For matching the engine and version of the browser
	browserMatch,

	// The deferred used on DOM ready
	readyList,

	// The ready event handler
	DOMContentLoaded,

	// Save a reference to some core methods
	toString = Object.prototype.toString,
	hasOwn = Object.prototype.hasOwnProperty,
	push = Array.prototype.push,
	slice = Array.prototype.slice,
	trim = String.prototype.trim,
	indexOf = Array.prototype.indexOf,

	// [[Class]] -> type pairs
	class2type = {};

jQuery.fn = jQuery.prototype = {
	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem, ret, doc;

		// Handle $(""), $(null), or $(undefined)
		if ( !selector ) {
			return this;
		}

		// Handle $(DOMElement)
		if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;
		}

		// The body element only exists once, optimize finding it
		if ( selector === "body" && !context && document.body ) {
			this.context = document;
			this[0] = document.body;
			this.selector = selector;
			this.length = 1;
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			// Are we dealing with HTML string or an ID?
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = quickExpr.exec( selector );
			}

			// Verify a match, and that no context was specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;
					doc = ( context ? context.ownerDocument || context : document );

					// If a single string is passed in and it's a single tag
					// just do a createElement and skip the rest
					ret = rsingleTag.exec( selector );

					if ( ret ) {
						if ( jQuery.isPlainObject( context ) ) {
							selector = [ document.createElement( ret[1] ) ];
							jQuery.fn.attr.call( selector, context, true );

						} else {
							selector = [ doc.createElement( ret[1] ) ];
						}

					} else {
						ret = jQuery.buildFragment( [ match[1] ], [ doc ] );
						selector = ( ret.cacheable ? jQuery.clone(ret.fragment) : ret.fragment ).childNodes;
					}

					return jQuery.merge( this, selector );

				// HANDLE: $("#id")
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The current version of jQuery being used
	jquery: "1.7.2",

	// The default length of a jQuery object is 0
	length: 0,

	// The number of elements contained in the matched element set
	size: function() {
		return this.length;
	},

	toArray: function() {
		return slice.call( this, 0 );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems, name, selector ) {
		// Build a new jQuery matched element set
		var ret = this.constructor();

		if ( jQuery.isArray( elems ) ) {
			push.apply( ret, elems );

		} else {
			jQuery.merge( ret, elems );
		}

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		ret.context = this.context;

		if ( name === "find" ) {
			ret.selector = this.selector + ( this.selector ? " " : "" ) + selector;
		} else if ( name ) {
			ret.selector = this.selector + "." + name + "(" + selector + ")";
		}

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Attach the listeners
		jQuery.bindReady();

		// Add the callback
		readyList.add( fn );

		return this;
	},

	eq: function( i ) {
		i = +i;
		return i === -1 ?
			this.slice( i ) :
			this.slice( i, i + 1 );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ),
			"slice", slice.call(arguments).join(",") );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {
		// Either a released hold or an DOMready/load event and not yet ready
		if ( (wait === true && !--jQuery.readyWait) || (wait !== true && !jQuery.isReady) ) {
			// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
			if ( !document.body ) {
				return setTimeout( jQuery.ready, 1 );
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.fireWith( document, [ jQuery ] );

			// Trigger any bound ready events
			if ( jQuery.fn.trigger ) {
				jQuery( document ).trigger( "ready" ).off( "ready" );
			}
		}
	},

	bindReady: function() {
		if ( readyList ) {
			return;
		}

		readyList = jQuery.Callbacks( "once memory" );

		// Catch cases where $(document).ready() is called after the
		// browser event has already occurred.
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			return setTimeout( jQuery.ready, 1 );
		}

		// Mozilla, Opera and webkit nightlies currently support this event
		if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", DOMContentLoaded, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", jQuery.ready, false );

		// If IE event model is used
		} else if ( document.attachEvent ) {
			// ensure firing before onload,
			// maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", DOMContentLoaded );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", jQuery.ready );

			// If IE and not a frame
			// continually check to see if the document is ready
			var toplevel = false;

			try {
				toplevel = window.frameElement == null;
			} catch(e) {}

			if ( document.documentElement.doScroll && toplevel ) {
				doScrollCheck();
			}
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		return obj == null ?
			String( obj ) :
			class2type[ toString.call(obj) ] || "object";
	},

	isPlainObject: function( obj ) {
		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!hasOwn.call(obj, "constructor") &&
				!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.

		var key;
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		for ( var name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	parseJSON: function( data ) {
		if ( typeof data !== "string" || !data ) {
			return null;
		}

		// Make sure leading/trailing whitespace is removed (IE can't handle it)
		data = jQuery.trim( data );

		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		// Make sure the incoming data is actual JSON
		// Logic borrowed from http://json.org/json2.js
		if ( rvalidchars.test( data.replace( rvalidescape, "@" )
			.replace( rvalidtokens, "]" )
			.replace( rvalidbraces, "")) ) {

			return ( new Function( "return " + data ) )();

		}
		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		if ( typeof data !== "string" || !data ) {
			return null;
		}
		var xml, tmp;
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && rnotwhite.test( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toUpperCase() === name.toUpperCase();
	},

	// args is for internal usage only
	each: function( object, callback, args ) {
		var name, i = 0,
			length = object.length,
			isObj = length === undefined || jQuery.isFunction( object );

		if ( args ) {
			if ( isObj ) {
				for ( name in object ) {
					if ( callback.apply( object[ name ], args ) === false ) {
						break;
					}
				}
			} else {
				for ( ; i < length; ) {
					if ( callback.apply( object[ i++ ], args ) === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isObj ) {
				for ( name in object ) {
					if ( callback.call( object[ name ], name, object[ name ] ) === false ) {
						break;
					}
				}
			} else {
				for ( ; i < length; ) {
					if ( callback.call( object[ i ], i, object[ i++ ] ) === false ) {
						break;
					}
				}
			}
		}

		return object;
	},

	// Use native String.trim function wherever possible
	trim: trim ?
		function( text ) {
			return text == null ?
				"" :
				trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				text.toString().replace( trimLeft, "" ).replace( trimRight, "" );
		},

	// results is for internal usage only
	makeArray: function( array, results ) {
		var ret = results || [];

		if ( array != null ) {
			// The window, strings (and functions) also have 'length'
			// Tweaked logic slightly to handle Blackberry 4.7 RegExp issues #6930
			var type = jQuery.type( array );

			if ( array.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow( array ) ) {
				push.call( ret, array );
			} else {
				jQuery.merge( ret, array );
			}
		}

		return ret;
	},

	inArray: function( elem, array, i ) {
		var len;

		if ( array ) {
			if ( indexOf ) {
				return indexOf.call( array, elem, i );
			}

			len = array.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in array && array[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var i = first.length,
			j = 0;

		if ( typeof second.length === "number" ) {
			for ( var l = second.length; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}

		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var ret = [], retVal;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( var i = 0, length = elems.length; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value, key, ret = [],
			i = 0,
			length = elems.length,
			// jquery objects are treated as arrays
			isArray = elems instanceof jQuery || length !== undefined && typeof length === "number" && ( ( length > 0 && elems[ 0 ] && elems[ length -1 ] ) || length === 0 || jQuery.isArray( elems ) ) ;

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( key in elems ) {
				value = callback( elems[ key ], key, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return ret.concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		if ( typeof context === "string" ) {
			var tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		var args = slice.call( arguments, 2 ),
			proxy = function() {
				return fn.apply( context, args.concat( slice.call( arguments ) ) );
			};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || proxy.guid || jQuery.guid++;

		return proxy;
	},

	// Mutifunctional method to get and set values to a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, pass ) {
		var exec,
			bulk = key == null,
			i = 0,
			length = elems.length;

		// Sets many values
		if ( key && typeof key === "object" ) {
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], 1, emptyGet, value );
			}
			chainable = 1;

		// Sets one value
		} else if ( value !== undefined ) {
			// Optionally, function values get executed if exec is true
			exec = pass === undefined && jQuery.isFunction( value );

			if ( bulk ) {
				// Bulk operations only iterate when executing function values
				if ( exec ) {
					exec = fn;
					fn = function( elem, key, value ) {
						return exec.call( jQuery( elem ), value );
					};

				// Otherwise they run against the entire set
				} else {
					fn.call( elems, value );
					fn = null;
				}
			}

			if ( fn ) {
				for (; i < length; i++ ) {
					fn( elems[i], key, exec ? value.call( elems[i], i, fn( elems[i], key ) ) : value, pass );
				}
			}

			chainable = 1;
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: function() {
		return ( new Date() ).getTime();
	},

	// Use of jQuery.browser is frowned upon.
	// More details: http://docs.jquery.com/Utilities/jQuery.browser
	uaMatch: function( ua ) {
		ua = ua.toLowerCase();

		var match = rwebkit.exec( ua ) ||
			ropera.exec( ua ) ||
			rmsie.exec( ua ) ||
			ua.indexOf("compatible") < 0 && rmozilla.exec( ua ) ||
			[];

		return { browser: match[1] || "", version: match[2] || "0" };
	},

	sub: function() {
		function jQuerySub( selector, context ) {
			return new jQuerySub.fn.init( selector, context );
		}
		jQuery.extend( true, jQuerySub, this );
		jQuerySub.superclass = this;
		jQuerySub.fn = jQuerySub.prototype = this();
		jQuerySub.fn.constructor = jQuerySub;
		jQuerySub.sub = this.sub;
		jQuerySub.fn.init = function init( selector, context ) {
			if ( context && context instanceof jQuery && !(context instanceof jQuerySub) ) {
				context = jQuerySub( context );
			}

			return jQuery.fn.init.call( this, selector, context, rootjQuerySub );
		};
		jQuerySub.fn.init.prototype = jQuerySub.fn;
		var rootjQuerySub = jQuerySub(document);
		return jQuerySub;
	},

	browser: {}
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

browserMatch = jQuery.uaMatch( userAgent );
if ( browserMatch.browser ) {
	jQuery.browser[ browserMatch.browser ] = true;
	jQuery.browser.version = browserMatch.version;
}

// Deprecated, use jQuery.browser.webkit instead
if ( jQuery.browser.webkit ) {
	jQuery.browser.safari = true;
}

// IE doesn't match non-breaking spaces with \s
if ( rnotwhite.test( "\xA0" ) ) {
	trimLeft = /^[\s\xA0]+/;
	trimRight = /[\s\xA0]+$/;
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);

// Cleanup functions for the document ready method
if ( document.addEventListener ) {
	DOMContentLoaded = function() {
		document.removeEventListener( "DOMContentLoaded", DOMContentLoaded, false );
		jQuery.ready();
	};

} else if ( document.attachEvent ) {
	DOMContentLoaded = function() {
		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( document.readyState === "complete" ) {
			document.detachEvent( "onreadystatechange", DOMContentLoaded );
			jQuery.ready();
		}
	};
}

// The DOM ready check for Internet Explorer
function doScrollCheck() {
	if ( jQuery.isReady ) {
		return;
	}

	try {
		// If IE is used, use the trick by Diego Perini
		// http://javascript.nwbox.com/IEContentLoaded/
		document.documentElement.doScroll("left");
	} catch(e) {
		setTimeout( doScrollCheck, 1 );
		return;
	}

	// and execute any waiting functions
	jQuery.ready();
}

return jQuery;

})();


// String to Object flags format cache
var flagsCache = {};

// Convert String-formatted flags into Object-formatted ones and store in cache
function createFlags( flags ) {
	var object = flagsCache[ flags ] = {},
		i, length;
	flags = flags.split( /\s+/ );
	for ( i = 0, length = flags.length; i < length; i++ ) {
		object[ flags[i] ] = true;
	}
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	flags:	an optional list of space-separated flags that will change how
 *			the callback list behaves
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible flags:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( flags ) {

	// Convert flags from String-formatted to Object-formatted
	// (we check in cache first)
	flags = flags ? ( flagsCache[ flags ] || createFlags( flags ) ) : {};

	var // Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = [],
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Add one or several callbacks to the list
		add = function( args ) {
			var i,
				length,
				elem,
				type,
				actual;
			for ( i = 0, length = args.length; i < length; i++ ) {
				elem = args[ i ];
				type = jQuery.type( elem );
				if ( type === "array" ) {
					// Inspect recursively
					add( elem );
				} else if ( type === "function" ) {
					// Add if not in unique mode and callback is not in
					if ( !flags.unique || !self.has( elem ) ) {
						list.push( elem );
					}
				}
			}
		},
		// Fire callbacks
		fire = function( context, args ) {
			args = args || [];
			memory = !flags.memory || [ context, args ];
			fired = true;
			firing = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( context, args ) === false && flags.stopOnFalse ) {
					memory = true; // Mark as halted
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( !flags.once ) {
					if ( stack && stack.length ) {
						memory = stack.shift();
						self.fireWith( memory[ 0 ], memory[ 1 ] );
					}
				} else if ( memory === true ) {
					self.disable();
				} else {
					list = [];
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					var length = list.length;
					add( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away, unless previous
					// firing was halted (stopOnFalse)
					} else if ( memory && memory !== true ) {
						firingStart = length;
						fire( memory[ 0 ], memory[ 1 ] );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					var args = arguments,
						argIndex = 0,
						argLength = args.length;
					for ( ; argIndex < argLength ; argIndex++ ) {
						for ( var i = 0; i < list.length; i++ ) {
							if ( args[ argIndex ] === list[ i ] ) {
								// Handle firingIndex and firingLength
								if ( firing ) {
									if ( i <= firingLength ) {
										firingLength--;
										if ( i <= firingIndex ) {
											firingIndex--;
										}
									}
								}
								// Remove the element
								list.splice( i--, 1 );
								// If we have some unicity property then
								// we only need to do this once
								if ( flags.unique ) {
									break;
								}
							}
						}
					}
				}
				return this;
			},
			// Control if a given callback is in the list
			has: function( fn ) {
				if ( list ) {
					var i = 0,
						length = list.length;
					for ( ; i < length; i++ ) {
						if ( fn === list[ i ] ) {
							return true;
						}
					}
				}
				return false;
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory || memory === true ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( stack ) {
					if ( firing ) {
						if ( !flags.once ) {
							stack.push( [ context, args ] );
						}
					} else if ( !( flags.once && memory ) ) {
						fire( context, args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};




var // Static reference to slice
	sliceDeferred = [].slice;

jQuery.extend({

	Deferred: function( func ) {
		var doneList = jQuery.Callbacks( "once memory" ),
			failList = jQuery.Callbacks( "once memory" ),
			progressList = jQuery.Callbacks( "memory" ),
			state = "pending",
			lists = {
				resolve: doneList,
				reject: failList,
				notify: progressList
			},
			promise = {
				done: doneList.add,
				fail: failList.add,
				progress: progressList.add,

				state: function() {
					return state;
				},

				// Deprecated
				isResolved: doneList.fired,
				isRejected: failList.fired,

				then: function( doneCallbacks, failCallbacks, progressCallbacks ) {
					deferred.done( doneCallbacks ).fail( failCallbacks ).progress( progressCallbacks );
					return this;
				},
				always: function() {
					deferred.done.apply( deferred, arguments ).fail.apply( deferred, arguments );
					return this;
				},
				pipe: function( fnDone, fnFail, fnProgress ) {
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( {
							done: [ fnDone, "resolve" ],
							fail: [ fnFail, "reject" ],
							progress: [ fnProgress, "notify" ]
						}, function( handler, data ) {
							var fn = data[ 0 ],
								action = data[ 1 ],
								returned;
							if ( jQuery.isFunction( fn ) ) {
								deferred[ handler ](function() {
									returned = fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise().then( newDefer.resolve, newDefer.reject, newDefer.notify );
									} else {
										newDefer[ action + "With" ]( this === deferred ? newDefer : this, [ returned ] );
									}
								});
							} else {
								deferred[ handler ]( newDefer[ action ] );
							}
						});
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					if ( obj == null ) {
						obj = promise;
					} else {
						for ( var key in promise ) {
							obj[ key ] = promise[ key ];
						}
					}
					return obj;
				}
			},
			deferred = promise.promise({}),
			key;

		for ( key in lists ) {
			deferred[ key ] = lists[ key ].fire;
			deferred[ key + "With" ] = lists[ key ].fireWith;
		}

		// Handle state
		deferred.done( function() {
			state = "resolved";
		}, failList.disable, progressList.lock ).fail( function() {
			state = "rejected";
		}, doneList.disable, progressList.lock );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( firstParam ) {
		var args = sliceDeferred.call( arguments, 0 ),
			i = 0,
			length = args.length,
			pValues = new Array( length ),
			count = length,
			pCount = length,
			deferred = length <= 1 && firstParam && jQuery.isFunction( firstParam.promise ) ?
				firstParam :
				jQuery.Deferred(),
			promise = deferred.promise();
		function resolveFunc( i ) {
			return function( value ) {
				args[ i ] = arguments.length > 1 ? sliceDeferred.call( arguments, 0 ) : value;
				if ( !( --count ) ) {
					deferred.resolveWith( deferred, args );
				}
			};
		}
		function progressFunc( i ) {
			return function( value ) {
				pValues[ i ] = arguments.length > 1 ? sliceDeferred.call( arguments, 0 ) : value;
				deferred.notifyWith( promise, pValues );
			};
		}
		if ( length > 1 ) {
			for ( ; i < length; i++ ) {
				if ( args[ i ] && args[ i ].promise && jQuery.isFunction( args[ i ].promise ) ) {
					args[ i ].promise().then( resolveFunc(i), deferred.reject, progressFunc(i) );
				} else {
					--count;
				}
			}
			if ( !count ) {
				deferred.resolveWith( deferred, args );
			}
		} else if ( deferred !== firstParam ) {
			deferred.resolveWith( deferred, length ? [ firstParam ] : [] );
		}
		return promise;
	}
});




jQuery.support = (function() {

	var support,
		all,
		a,
		select,
		opt,
		input,
		fragment,
		tds,
		events,
		eventName,
		i,
		isSupported,
		div = document.createElement( "div" ),
		documentElement = document.documentElement;

	// Preliminary tests
	div.setAttribute("className", "t");
	div.innerHTML = "   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>";

	all = div.getElementsByTagName( "*" );
	a = div.getElementsByTagName( "a" )[ 0 ];

	// Can't get basic test support
	if ( !all || !all.length || !a ) {
		return {};
	}

	// First batch of supports tests
	select = document.createElement( "select" );
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName( "input" )[ 0 ];

	support = {
		// IE strips leading whitespace when .innerHTML is used
		leadingWhitespace: ( div.firstChild.nodeType === 3 ),

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		tbody: !div.getElementsByTagName("tbody").length,

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		htmlSerialize: !!div.getElementsByTagName("link").length,

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		style: /top/.test( a.getAttribute("style") ),

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		hrefNormalized: ( a.getAttribute("href") === "/a" ),

		// Make sure that element opacity exists
		// (IE uses filter instead)
		// Use a regex to work around a WebKit issue. See #5145
		opacity: /^0.55/.test( a.style.opacity ),

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		cssFloat: !!a.style.cssFloat,

		// Make sure that if no value is specified for a checkbox
		// that it defaults to "on".
		// (WebKit defaults to "" instead)
		checkOn: ( input.value === "on" ),

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		optSelected: opt.selected,

		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		getSetAttribute: div.className !== "t",

		// Tests for enctype support on a form(#6743)
		enctype: !!document.createElement("form").enctype,

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",

		// Will be defined later
		submitBubbles: true,
		changeBubbles: true,
		focusinBubbles: false,
		deleteExpando: true,
		noCloneEvent: true,
		inlineBlockNeedsLayout: false,
		shrinkWrapBlocks: false,
		reliableMarginRight: true,
		pixelMargin: true
	};

	// jQuery.boxModel DEPRECATED in 1.3, use jQuery.support.boxModel instead
	jQuery.boxModel = support.boxModel = (document.compatMode === "CSS1Compat");

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Test to see if it's possible to delete an expando from an element
	// Fails in Internet Explorer
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	if ( !div.addEventListener && div.attachEvent && div.fireEvent ) {
		div.attachEvent( "onclick", function() {
			// Cloning a node shouldn't copy over any
			// bound event handlers (IE does this)
			support.noCloneEvent = false;
		});
		div.cloneNode( true ).fireEvent( "onclick" );
	}

	// Check if a radio maintains its value
	// after being appended to the DOM
	input = document.createElement("input");
	input.value = "t";
	input.setAttribute("type", "radio");
	support.radioValue = input.value === "t";

	input.setAttribute("checked", "checked");

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "name", "t" );

	div.appendChild( input );
	fragment = document.createDocumentFragment();
	fragment.appendChild( div.lastChild );

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	fragment.removeChild( input );
	fragment.appendChild( div );

	// Technique from Juriy Zaytsev
	// http://perfectionkills.com/detecting-event-support-without-browser-sniffing/
	// We only care about the case where non-standard event systems
	// are used, namely in IE. Short-circuiting here helps us to
	// avoid an eval call (in setAttribute) which can cause CSP
	// to go haywire. See: https://developer.mozilla.org/en/Security/CSP
	if ( div.attachEvent ) {
		for ( i in {
			submit: 1,
			change: 1,
			focusin: 1
		}) {
			eventName = "on" + i;
			isSupported = ( eventName in div );
			if ( !isSupported ) {
				div.setAttribute( eventName, "return;" );
				isSupported = ( typeof div[ eventName ] === "function" );
			}
			support[ i + "Bubbles" ] = isSupported;
		}
	}

	fragment.removeChild( div );

	// Null elements to avoid leaks in IE
	fragment = select = opt = div = input = null;

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, outer, inner, table, td, offsetSupport,
			marginDiv, conMarginTop, style, html, positionTopLeftWidthHeight,
			paddingMarginBorderVisibility, paddingMarginBorder,
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		conMarginTop = 1;
		paddingMarginBorder = "padding:0;margin:0;border:";
		positionTopLeftWidthHeight = "position:absolute;top:0;left:0;width:1px;height:1px;";
		paddingMarginBorderVisibility = paddingMarginBorder + "0;visibility:hidden;";
		style = "style='" + positionTopLeftWidthHeight + paddingMarginBorder + "5px solid #000;";
		html = "<div " + style + "display:block;'><div style='" + paddingMarginBorder + "0;display:block;overflow:hidden;'></div></div>" +
			"<table " + style + "' cellpadding='0' cellspacing='0'>" +
			"<tr><td></td></tr></table>";

		container = document.createElement("div");
		container.style.cssText = paddingMarginBorderVisibility + "width:0;height:0;position:static;top:0;margin-top:" + conMarginTop + "px";
		body.insertBefore( container, body.firstChild );

		// Construct the test element
		div = document.createElement("div");
		container.appendChild( div );

		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		// (only IE 8 fails this test)
		div.innerHTML = "<table><tr><td style='" + paddingMarginBorder + "0;display:none'></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName( "td" );
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Check if empty table cells still have offsetWidth/Height
		// (IE <= 8 fail this test)
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Check if div with explicit width and no margin-right incorrectly
		// gets computed margin-right based on width of container. For more
		// info see bug #3333
		// Fails in WebKit before Feb 2011 nightlies
		// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
		if ( window.getComputedStyle ) {
			div.innerHTML = "";
			marginDiv = document.createElement( "div" );
			marginDiv.style.width = "0";
			marginDiv.style.marginRight = "0";
			div.style.width = "2px";
			div.appendChild( marginDiv );
			support.reliableMarginRight =
				( parseInt( ( window.getComputedStyle( marginDiv, null ) || { marginRight: 0 } ).marginRight, 10 ) || 0 ) === 0;
		}

		if ( typeof div.style.zoom !== "undefined" ) {
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			// (IE < 8 does this)
			div.innerHTML = "";
			div.style.width = div.style.padding = "1px";
			div.style.border = 0;
			div.style.overflow = "hidden";
			div.style.display = "inline";
			div.style.zoom = 1;
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

			// Check if elements with layout shrink-wrap their children
			// (IE 6 does this)
			div.style.display = "block";
			div.style.overflow = "visible";
			div.innerHTML = "<div style='width:5px;'></div>";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );
		}

		div.style.cssText = positionTopLeftWidthHeight + paddingMarginBorderVisibility;
		div.innerHTML = html;

		outer = div.firstChild;
		inner = outer.firstChild;
		td = outer.nextSibling.firstChild.firstChild;

		offsetSupport = {
			doesNotAddBorder: ( inner.offsetTop !== 5 ),
			doesAddBorderForTableAndCells: ( td.offsetTop === 5 )
		};

		inner.style.position = "fixed";
		inner.style.top = "20px";

		// safari subtracts parent border width here which is 5px
		offsetSupport.fixedPosition = ( inner.offsetTop === 20 || inner.offsetTop === 15 );
		inner.style.position = inner.style.top = "";

		outer.style.overflow = "hidden";
		outer.style.position = "relative";

		offsetSupport.subtractsBorderForOverflowNotVisible = ( inner.offsetTop === -5 );
		offsetSupport.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== conMarginTop );

		if ( window.getComputedStyle ) {
			div.style.marginTop = "1%";
			support.pixelMargin = ( window.getComputedStyle( div, null ) || { marginTop: 0 } ).marginTop !== "1%";
		}

		if ( typeof container.style.zoom !== "undefined" ) {
			container.style.zoom = 1;
		}

		body.removeChild( container );
		marginDiv = div = container = null;

		jQuery.extend( support, offsetSupport );
	});

	return support;
})();




var rbrace = /^(?:\{.*\}|\[.*\])$/,
	rmultiDash = /([A-Z])/g;

jQuery.extend({
	cache: {},

	// Please use with caution
	uuid: 0,

	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( jQuery.fn.jquery + Math.random() ).replace( /\D/g, "" ),

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
		"applet": true
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data, pvt /* Internal Use Only */ ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		var privateCache, thisCache, ret,
			internalKey = jQuery.expando,
			getByName = typeof name === "string",

			// We have to handle DOM nodes and JS objects differently because IE6-7
			// can't GC object references properly across the DOM-JS boundary
			isNode = elem.nodeType,

			// Only DOM nodes need the global jQuery cache; JS object data is
			// attached directly to the object so GC can occur automatically
			cache = isNode ? jQuery.cache : elem,

			// Only defining an ID for JS objects if its cache already exists allows
			// the code to shortcut on the same path as a DOM node with no cache
			id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey,
			isEvents = name === "events";

		// Avoid doing any more work than we need to when trying to get data on an
		// object that has no data at all
		if ( (!id || !cache[id] || (!isEvents && !pvt && !cache[id].data)) && getByName && data === undefined ) {
			return;
		}

		if ( !id ) {
			// Only DOM nodes need a new unique ID for each element since their data
			// ends up in the global cache
			if ( isNode ) {
				elem[ internalKey ] = id = ++jQuery.uuid;
			} else {
				id = internalKey;
			}
		}

		if ( !cache[ id ] ) {
			cache[ id ] = {};

			// Avoids exposing jQuery metadata on plain JS objects when the object
			// is serialized using JSON.stringify
			if ( !isNode ) {
				cache[ id ].toJSON = jQuery.noop;
			}
		}

		// An object can be passed to jQuery.data instead of a key/value pair; this gets
		// shallow copied over onto the existing cache
		if ( typeof name === "object" || typeof name === "function" ) {
			if ( pvt ) {
				cache[ id ] = jQuery.extend( cache[ id ], name );
			} else {
				cache[ id ].data = jQuery.extend( cache[ id ].data, name );
			}
		}

		privateCache = thisCache = cache[ id ];

		// jQuery data() is stored in a separate object inside the object's internal data
		// cache in order to avoid key collisions between internal data and user-defined
		// data.
		if ( !pvt ) {
			if ( !thisCache.data ) {
				thisCache.data = {};
			}

			thisCache = thisCache.data;
		}

		if ( data !== undefined ) {
			thisCache[ jQuery.camelCase( name ) ] = data;
		}

		// Users should not attempt to inspect the internal events object using jQuery.data,
		// it is undocumented and subject to change. But does anyone listen? No.
		if ( isEvents && !thisCache[ name ] ) {
			return privateCache.events;
		}

		// Check for both converted-to-camel and non-converted data property names
		// If a data property was specified
		if ( getByName ) {

			// First Try to find as-is property data
			ret = thisCache[ name ];

			// Test for null|undefined property data
			if ( ret == null ) {

				// Try to find the camelCased property
				ret = thisCache[ jQuery.camelCase( name ) ];
			}
		} else {
			ret = thisCache;
		}

		return ret;
	},

	removeData: function( elem, name, pvt /* Internal Use Only */ ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		var thisCache, i, l,

			// Reference to internal data cache key
			internalKey = jQuery.expando,

			isNode = elem.nodeType,

			// See jQuery.data for more information
			cache = isNode ? jQuery.cache : elem,

			// See jQuery.data for more information
			id = isNode ? elem[ internalKey ] : internalKey;

		// If there is already no cache entry for this object, there is no
		// purpose in continuing
		if ( !cache[ id ] ) {
			return;
		}

		if ( name ) {

			thisCache = pvt ? cache[ id ] : cache[ id ].data;

			if ( thisCache ) {

				// Support array or space separated string names for data keys
				if ( !jQuery.isArray( name ) ) {

					// try the string as a key before any manipulation
					if ( name in thisCache ) {
						name = [ name ];
					} else {

						// split the camel cased version by spaces unless a key with the spaces exists
						name = jQuery.camelCase( name );
						if ( name in thisCache ) {
							name = [ name ];
						} else {
							name = name.split( " " );
						}
					}
				}

				for ( i = 0, l = name.length; i < l; i++ ) {
					delete thisCache[ name[i] ];
				}

				// If there is no data left in the cache, we want to continue
				// and let the cache object itself get destroyed
				if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
					return;
				}
			}
		}

		// See jQuery.data for more information
		if ( !pvt ) {
			delete cache[ id ].data;

			// Don't destroy the parent cache unless the internal data object
			// had been the only thing left in it
			if ( !isEmptyDataObject(cache[ id ]) ) {
				return;
			}
		}

		// Browsers that fail expando deletion also refuse to delete expandos on
		// the window, but it will allow it on all other JS objects; other browsers
		// don't care
		// Ensure that `cache` is not a window object #10080
		if ( jQuery.support.deleteExpando || !cache.setInterval ) {
			delete cache[ id ];
		} else {
			cache[ id ] = null;
		}

		// We destroyed the cache and need to eliminate the expando on the node to avoid
		// false lookups in the cache for entries that no longer exist
		if ( isNode ) {
			// IE does not allow us to delete expando properties from nodes,
			// nor does it have a removeAttribute function on Document nodes;
			// we must handle all of these cases
			if ( jQuery.support.deleteExpando ) {
				delete elem[ internalKey ];
			} else if ( elem.removeAttribute ) {
				elem.removeAttribute( internalKey );
			} else {
				elem[ internalKey ] = null;
			}
		}
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return jQuery.data( elem, name, data, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		if ( elem.nodeName ) {
			var match = jQuery.noData[ elem.nodeName.toLowerCase() ];

			if ( match ) {
				return !(match === true || elem.getAttribute("classid") !== match);
			}
		}

		return true;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var parts, part, attr, name, l,
			elem = this[0],
			i = 0,
			data = null;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					attr = elem.attributes;
					for ( l = attr.length; i < l; i++ ) {
						name = attr[i].name;

						if ( name.indexOf( "data-" ) === 0 ) {
							name = jQuery.camelCase( name.substring(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		parts = key.split( ".", 2 );
		parts[1] = parts[1] ? "." + parts[1] : "";
		part = parts[1] + "!";

		return jQuery.access( this, function( value ) {

			if ( value === undefined ) {
				data = this.triggerHandler( "getData" + part, [ parts[0] ] );

				// Try to fetch any internally stored data first
				if ( data === undefined && elem ) {
					data = jQuery.data( elem, key );
					data = dataAttr( elem, key, data );
				}

				return data === undefined && parts[1] ?
					this.data( parts[0] ) :
					data;
			}

			parts[1] = value;
			this.each(function() {
				var self = jQuery( this );

				self.triggerHandler( "setData" + part, parts );
				jQuery.data( this, key, value );
				self.triggerHandler( "changeData" + part, parts );
			});
		}, null, value, arguments.length > 1, null, false );
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
				data === "false" ? false :
				data === "null" ? null :
				jQuery.isNumeric( data ) ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	for ( var name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}




function handleQueueMarkDefer( elem, type, src ) {
	var deferDataKey = type + "defer",
		queueDataKey = type + "queue",
		markDataKey = type + "mark",
		defer = jQuery._data( elem, deferDataKey );
	if ( defer &&
		( src === "queue" || !jQuery._data(elem, queueDataKey) ) &&
		( src === "mark" || !jQuery._data(elem, markDataKey) ) ) {
		// Give room for hard-coded callbacks to fire first
		// and eventually mark/queue something else on the element
		setTimeout( function() {
			if ( !jQuery._data( elem, queueDataKey ) &&
				!jQuery._data( elem, markDataKey ) ) {
				jQuery.removeData( elem, deferDataKey, true );
				defer.fire();
			}
		}, 0 );
	}
}

jQuery.extend({

	_mark: function( elem, type ) {
		if ( elem ) {
			type = ( type || "fx" ) + "mark";
			jQuery._data( elem, type, (jQuery._data( elem, type ) || 0) + 1 );
		}
	},

	_unmark: function( force, elem, type ) {
		if ( force !== true ) {
			type = elem;
			elem = force;
			force = false;
		}
		if ( elem ) {
			type = type || "fx";
			var key = type + "mark",
				count = force ? 0 : ( (jQuery._data( elem, key ) || 1) - 1 );
			if ( count ) {
				jQuery._data( elem, key, count );
			} else {
				jQuery.removeData( elem, key, true );
				handleQueueMarkDefer( elem, type, "mark" );
			}
		}
	},

	queue: function( elem, type, data ) {
		var q;
		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			q = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !q || jQuery.isArray(data) ) {
					q = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					q.push( data );
				}
			}
			return q || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			fn = queue.shift(),
			hooks = {};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
		}

		if ( fn ) {
			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			jQuery._data( elem, type + ".run", hooks );
			fn.call( elem, function() {
				jQuery.dequeue( elem, type );
			}, hooks );
		}

		if ( !queue.length ) {
			jQuery.removeData( elem, type + "queue " + type + ".run", true );
			handleQueueMarkDefer( elem, type, "queue" );
		}
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, object ) {
		if ( typeof type !== "string" ) {
			object = type;
			type = undefined;
		}
		type = type || "fx";
		var defer = jQuery.Deferred(),
			elements = this,
			i = elements.length,
			count = 1,
			deferDataKey = type + "defer",
			queueDataKey = type + "queue",
			markDataKey = type + "mark",
			tmp;
		function resolve() {
			if ( !( --count ) ) {
				defer.resolveWith( elements, [ elements ] );
			}
		}
		while( i-- ) {
			if (( tmp = jQuery.data( elements[ i ], deferDataKey, undefined, true ) ||
					( jQuery.data( elements[ i ], queueDataKey, undefined, true ) ||
						jQuery.data( elements[ i ], markDataKey, undefined, true ) ) &&
					jQuery.data( elements[ i ], deferDataKey, jQuery.Callbacks( "once memory" ), true ) )) {
				count++;
				tmp.add( resolve );
			}
		}
		resolve();
		return defer.promise( object );
	}
});




var rclass = /[\n\t\r]/g,
	rspace = /\s+/,
	rreturn = /\r/g,
	rtype = /^(?:button|input)$/i,
	rfocusable = /^(?:button|input|object|select|textarea)$/i,
	rclickable = /^a(?:rea)?$/i,
	rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute,
	nodeHook, boolHook, fixSpecified;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classNames, i, l, elem,
			setClass, c, cl;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call(this, j, this.className) );
			});
		}

		if ( value && typeof value === "string" ) {
			classNames = value.split( rspace );

			for ( i = 0, l = this.length; i < l; i++ ) {
				elem = this[ i ];

				if ( elem.nodeType === 1 ) {
					if ( !elem.className && classNames.length === 1 ) {
						elem.className = value;

					} else {
						setClass = " " + elem.className + " ";

						for ( c = 0, cl = classNames.length; c < cl; c++ ) {
							if ( !~setClass.indexOf( " " + classNames[ c ] + " " ) ) {
								setClass += classNames[ c ] + " ";
							}
						}
						elem.className = jQuery.trim( setClass );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classNames, i, l, elem, className, c, cl;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call(this, j, this.className) );
			});
		}

		if ( (value && typeof value === "string") || value === undefined ) {
			classNames = ( value || "" ).split( rspace );

			for ( i = 0, l = this.length; i < l; i++ ) {
				elem = this[ i ];

				if ( elem.nodeType === 1 && elem.className ) {
					if ( value ) {
						className = (" " + elem.className + " ").replace( rclass, " " );
						for ( c = 0, cl = classNames.length; c < cl; c++ ) {
							className = className.replace(" " + classNames[ c ] + " ", " ");
						}
						elem.className = jQuery.trim( className );

					} else {
						elem.className = "";
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isBool = typeof stateVal === "boolean";

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					state = stateVal,
					classNames = value.split( rspace );

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space seperated list
					state = isBool ? state : !self.hasClass( className );
					self[ state ? "addClass" : "removeClass" ]( className );
				}

			} else if ( type === "undefined" || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// toggle whole className
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var self = jQuery(this), val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, self.val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// attributes.value is undefined in Blackberry 4.7 but
				// uses .value. See #6932
				var val = elem.attributes.value;
				return !val || val.specified ? elem.value : elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, i, max, option,
					index = elem.selectedIndex,
					values = [],
					options = elem.options,
					one = elem.type === "select-one";

				// Nothing was selected
				if ( index < 0 ) {
					return null;
				}

				// Loop through all the selected options
				i = one ? index : 0;
				max = one ? index + 1 : options.length;
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Don't return options that are disabled or in a disabled optgroup
					if ( option.selected && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) &&
							(!option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" )) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				// Fixes Bug #2551 -- select.val() broken in IE after form.reset()
				if ( one && !values.length && options.length ) {
					return jQuery( options[ index ] ).val();
				}

				return values;
			},

			set: function( elem, value ) {
				var values = jQuery.makeArray( value );

				jQuery(elem).find("option").each(function() {
					this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
				});

				if ( !values.length ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attrFn: {
		val: true,
		css: true,
		html: true,
		text: true,
		data: true,
		width: true,
		height: true,
		offset: true
	},

	attr: function( elem, name, value, pass ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( pass && name in jQuery.attrFn ) {
			return jQuery( elem )[ name ]( value );
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( notxml ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;

			} else if ( hooks && "set" in hooks && notxml && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, "" + value );
				return value;
			}

		} else if ( hooks && "get" in hooks && notxml && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {

			ret = elem.getAttribute( name );

			// Non-existent attributes return null, we normalize to undefined
			return ret === null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var propName, attrNames, name, l, isBool,
			i = 0;

		if ( value && elem.nodeType === 1 ) {
			attrNames = value.toLowerCase().split( rspace );
			l = attrNames.length;

			for ( ; i < l; i++ ) {
				name = attrNames[ i ];

				if ( name ) {
					propName = jQuery.propFix[ name ] || name;
					isBool = rboolean.test( name );

					// See #9699 for explanation of this approach (setting first, then removal)
					// Do not do this for boolean attributes (see #10870)
					if ( !isBool ) {
						jQuery.attr( elem, name, "" );
					}
					elem.removeAttribute( getSetAttribute ? name : propName );

					// Set corresponding property to false for boolean attributes
					if ( isBool && propName in elem ) {
						elem[ propName ] = false;
					}
				}
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				// We can't allow the type property to be changed (since it causes problems in IE)
				if ( rtype.test( elem.nodeName ) && elem.parentNode ) {
					jQuery.error( "type property can't be changed" );
				} else if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to it's default in case type is set after value
					// This is for element creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		},
		// Use the value property for back compat
		// Use the nodeHook for button elements in IE6/7 (#1954)
		value: {
			get: function( elem, name ) {
				if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
					return nodeHook.get( elem, name );
				}
				return name in elem ?
					elem.value :
					null;
			},
			set: function( elem, value, name ) {
				if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
					return nodeHook.set( elem, value, name );
				}
				// Does not return so that setAttribute is also used
				elem.value = value;
			}
		}
	},

	propFix: {
		tabindex: "tabIndex",
		readonly: "readOnly",
		"for": "htmlFor",
		"class": "className",
		maxlength: "maxLength",
		cellspacing: "cellSpacing",
		cellpadding: "cellPadding",
		rowspan: "rowSpan",
		colspan: "colSpan",
		usemap: "useMap",
		frameborder: "frameBorder",
		contenteditable: "contentEditable"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				return ( elem[ name ] = value );
			}

		} else {
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				return elem[ name ];
			}
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				var attributeNode = elem.getAttributeNode("tabindex");

				return attributeNode && attributeNode.specified ?
					parseInt( attributeNode.value, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						undefined;
			}
		}
	}
});

// Add the tabIndex propHook to attrHooks for back-compat (different case is intentional)
jQuery.attrHooks.tabindex = jQuery.propHooks.tabIndex;

// Hook for boolean attributes
boolHook = {
	get: function( elem, name ) {
		// Align boolean attributes with corresponding properties
		// Fall back to attribute presence where some booleans are not supported
		var attrNode,
			property = jQuery.prop( elem, name );
		return property === true || typeof property !== "boolean" && ( attrNode = elem.getAttributeNode(name) ) && attrNode.nodeValue !== false ?
			name.toLowerCase() :
			undefined;
	},
	set: function( elem, value, name ) {
		var propName;
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			// value is true since we know at this point it's type boolean and not false
			// Set boolean attributes to the same name and set the DOM property
			propName = jQuery.propFix[ name ] || name;
			if ( propName in elem ) {
				// Only set the IDL specifically if it already exists on the element
				elem[ propName ] = true;
			}

			elem.setAttribute( name, name.toLowerCase() );
		}
		return name;
	}
};

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	fixSpecified = {
		name: true,
		id: true,
		coords: true
	};

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret;
			ret = elem.getAttributeNode( name );
			return ret && ( fixSpecified[ name ] ? ret.nodeValue !== "" : ret.specified ) ?
				ret.nodeValue :
				undefined;
		},
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				ret = document.createAttribute( name );
				elem.setAttributeNode( ret );
			}
			return ( ret.nodeValue = value + "" );
		}
	};

	// Apply the nodeHook to tabindex
	jQuery.attrHooks.tabindex.set = nodeHook.set;

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		});
	});

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		get: nodeHook.get,
		set: function( elem, value, name ) {
			if ( value === "" ) {
				value = "false";
			}
			nodeHook.set( elem, value, name );
		}
	};
}


// Some attributes require a special call on IE
if ( !jQuery.support.hrefNormalized ) {
	jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			get: function( elem ) {
				var ret = elem.getAttribute( name, 2 );
				return ret === null ? undefined : ret;
			}
		});
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Normalize to lowercase since IE uppercases css property names
			return elem.style.cssText.toLowerCase() || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = "" + value );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	});
}

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
if ( !jQuery.support.checkOn ) {
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			get: function( elem ) {
				// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			}
		};
	});
}
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	});
});




var rformElems = /^(?:textarea|input|select)$/i,
	rtypenamespace = /^([^\.]*)?(?:\.(.+))?$/,
	rhoverHack = /(?:^|\s)hover(\.\S+)?\b/,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rquickIs = /^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/,
	quickParse = function( selector ) {
		var quick = rquickIs.exec( selector );
		if ( quick ) {
			//   0  1    2   3
			// [ _, tag, id, class ]
			quick[1] = ( quick[1] || "" ).toLowerCase();
			quick[3] = quick[3] && new RegExp( "(?:^|\\s)" + quick[3] + "(?:\\s|$)" );
		}
		return quick;
	},
	quickIs = function( elem, m ) {
		var attrs = elem.attributes || {};
		return (
			(!m[1] || elem.nodeName.toLowerCase() === m[1]) &&
			(!m[2] || (attrs.id || {}).value === m[2]) &&
			(!m[3] || m[3].test( (attrs[ "class" ] || {}).value ))
		);
	},
	hoverHack = function( events ) {
		return jQuery.event.special.hover ? events : events.replace( rhoverHack, "mouseenter$1 mouseleave$1" );
	};

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	add: function( elem, types, handler, data, selector ) {

		var elemData, eventHandle, events,
			t, tns, type, namespaces, handleObj,
			handleObjIn, quick, handlers, special;

		// Don't attach events to noData or text/comment nodes (allow plain objects tho)
		if ( elem.nodeType === 3 || elem.nodeType === 8 || !types || !handler || !(elemData = jQuery._data( elem )) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		events = elemData.events;
		if ( !events ) {
			elemData.events = events = {};
		}
		eventHandle = elemData.handle;
		if ( !eventHandle ) {
			elemData.handle = eventHandle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		// jQuery(...).bind("mouseover mouseout", fn);
		types = jQuery.trim( hoverHack(types) ).split( " " );
		for ( t = 0; t < types.length; t++ ) {

			tns = rtypenamespace.exec( types[t] ) || [];
			type = tns[1];
			namespaces = ( tns[2] || "" ).split( "." ).sort();

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: tns[1],
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				quick: selector && quickParse( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			handlers = events[ type ];
			if ( !handlers ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	global: {},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var elemData = jQuery.hasData( elem ) && jQuery._data( elem ),
			t, tns, type, origType, namespaces, origCount,
			j, events, special, handle, eventType, handleObj;

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = jQuery.trim( hoverHack( types || "" ) ).split(" ");
		for ( t = 0; t < types.length; t++ ) {
			tns = rtypenamespace.exec( types[t] ) || [];
			type = origType = tns[1];
			namespaces = tns[2];

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector? special.delegateType : special.bindType ) || type;
			eventType = events[ type ] || [];
			origCount = eventType.length;
			namespaces = namespaces ? new RegExp("(^|\\.)" + namespaces.split(".").sort().join("\\.(?:.*\\.)?") + "(\\.|$)") : null;

			// Remove matching events
			for ( j = 0; j < eventType.length; j++ ) {
				handleObj = eventType[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					 ( !handler || handler.guid === handleObj.guid ) &&
					 ( !namespaces || namespaces.test( handleObj.namespace ) ) &&
					 ( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					eventType.splice( j--, 1 );

					if ( handleObj.selector ) {
						eventType.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( eventType.length === 0 && origCount !== eventType.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			handle = elemData.handle;
			if ( handle ) {
				handle.elem = null;
			}

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery.removeData( elem, [ "events", "handle" ], true );
		}
	},

	// Events that are safe to short-circuit if no handlers are attached.
	// Native DOM events should not be added, they may have inline handlers.
	customEvent: {
		"getData": true,
		"setData": true,
		"changeData": true
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		// Don't do events on text and comment nodes
		if ( elem && (elem.nodeType === 3 || elem.nodeType === 8) ) {
			return;
		}

		// Event object or event type
		var type = event.type || event,
			namespaces = [],
			cache, exclusive, i, cur, old, ontype, special, handle, eventPath, bubbleType;

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "!" ) >= 0 ) {
			// Exclusive events trigger only for the exact event (no namespaces)
			type = type.slice(0, -1);
			exclusive = true;
		}

		if ( type.indexOf( "." ) >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}

		if ( (!elem || jQuery.event.customEvent[ type ]) && !jQuery.event.global[ type ] ) {
			// No jQuery handlers for this event type, and it can't have inline handlers
			return;
		}

		// Caller can pass in an Event, Object, or just an event type string
		event = typeof event === "object" ?
			// jQuery.Event object
			event[ jQuery.expando ] ? event :
			// Object literal
			new jQuery.Event( type, event ) :
			// Just the event type (string)
			new jQuery.Event( type );

		event.type = type;
		event.isTrigger = true;
		event.exclusive = exclusive;
		event.namespace = namespaces.join( "." );
		event.namespace_re = event.namespace? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.)?") + "(\\.|$)") : null;
		ontype = type.indexOf( ":" ) < 0 ? "on" + type : "";

		// Handle a global trigger
		if ( !elem ) {

			// TODO: Stop taunting the data cache; remove global events and always attach to document
			cache = jQuery.cache;
			for ( i in cache ) {
				if ( cache[ i ].events && cache[ i ].events[ type ] ) {
					jQuery.event.trigger( event, data, cache[ i ].handle.elem, true );
				}
			}
			return;
		}

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data != null ? jQuery.makeArray( data ) : [];
		data.unshift( event );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		eventPath = [[ elem, special.bindType || type ]];
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			cur = rfocusMorph.test( bubbleType + type ) ? elem : elem.parentNode;
			old = null;
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push([ cur, bubbleType ]);
				old = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( old && old === elem.ownerDocument ) {
				eventPath.push([ old.defaultView || old.parentWindow || window, bubbleType ]);
			}
		}

		// Fire handlers on the event path
		for ( i = 0; i < eventPath.length && !event.isPropagationStopped(); i++ ) {

			cur = eventPath[i][0];
			event.type = eventPath[i][1];

			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}
			// Note that this is a bare JS function and not a jQuery handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
				!(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				// IE<9 dies on focus/blur to hidden element (#1486)
				if ( ontype && elem[ type ] && ((type !== "focus" && type !== "blur") || event.target.offsetWidth !== 0) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					old = elem[ ontype ];

					if ( old ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( old ) {
						elem[ ontype ] = old;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event || window.event );

		var handlers = ( (jQuery._data( this, "events" ) || {} )[ event.type ] || []),
			delegateCount = handlers.delegateCount,
			args = [].slice.call( arguments, 0 ),
			run_all = !event.exclusive && !event.namespace,
			special = jQuery.event.special[ event.type ] || {},
			handlerQueue = [],
			i, j, cur, jqcur, ret, selMatch, matched, matches, handleObj, sel, related;

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers that should run if there are delegated events
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && !(event.button && event.type === "click") ) {

			// Pregenerate a single jQuery object for reuse with .is()
			jqcur = jQuery(this);
			jqcur.context = this.ownerDocument || this;

			for ( cur = event.target; cur != this; cur = cur.parentNode || this ) {

				// Don't process events on disabled elements (#6911, #8165)
				if ( cur.disabled !== true ) {
					selMatch = {};
					matches = [];
					jqcur[0] = cur;
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];
						sel = handleObj.selector;

						if ( selMatch[ sel ] === undefined ) {
							selMatch[ sel ] = (
								handleObj.quick ? quickIs( cur, handleObj.quick ) : jqcur.is( sel )
							);
						}
						if ( selMatch[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, matches: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( handlers.length > delegateCount ) {
			handlerQueue.push({ elem: this, matches: handlers.slice( delegateCount ) });
		}

		// Run delegates first; they may want to stop propagation beneath us
		for ( i = 0; i < handlerQueue.length && !event.isPropagationStopped(); i++ ) {
			matched = handlerQueue[ i ];
			event.currentTarget = matched.elem;

			for ( j = 0; j < matched.matches.length && !event.isImmediatePropagationStopped(); j++ ) {
				handleObj = matched.matches[ j ];

				// Triggered event must either 1) be non-exclusive and have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( run_all || (!event.namespace && !handleObj.namespace) || event.namespace_re && event.namespace_re.test( handleObj.namespace ) ) {

					event.data = handleObj.data;
					event.handleObj = handleObj;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						event.result = ret;
						if ( ret === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	// *** attrChange attrName relatedNode srcElement  are not normalized, non-W3C, deprecated, will be removed in 1.8 ***
	props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop,
			originalEvent = event,
			fixHook = jQuery.event.fixHooks[ event.type ] || {},
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = jQuery.Event( originalEvent );

		for ( i = copy.length; i; ) {
			prop = copy[ --i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Fix target property, if necessary (#1925, IE 6/7/8 & Safari2)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Target should not be a text node (#504, Safari)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// For mouse/key events; add metaKey if it's not there (#3368, IE6/7/8)
		if ( event.metaKey === undefined ) {
			event.metaKey = event.ctrlKey;
		}

		return fixHook.filter? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		ready: {
			// Make sure the ready event is setup
			setup: jQuery.bindReady
		},

		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},

		focus: {
			delegateType: "focusin"
		},
		blur: {
			delegateType: "focusout"
		},

		beforeunload: {
			setup: function( data, namespaces, eventHandle ) {
				// We only want to do this special case on windows
				if ( jQuery.isWindow( this ) ) {
					this.onbeforeunload = eventHandle;
				}
			},

			teardown: function( namespaces, eventHandle ) {
				if ( this.onbeforeunload === eventHandle ) {
					this.onbeforeunload = null;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{ type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

// Some plugins are using, but it's undocumented/deprecated and will be removed.
// The 1.7 special event interface should provide all the hooks needed now.
jQuery.event.handle = jQuery.event.dispatch;

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		if ( elem.detachEvent ) {
			elem.detachEvent( "on" + type, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

function returnFalse() {
	return false;
}
function returnTrue() {
	return true;
}

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	preventDefault: function() {
		this.isDefaultPrevented = returnTrue;

		var e = this.originalEvent;
		if ( !e ) {
			return;
		}

		// if preventDefault exists run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// otherwise set the returnValue property of the original event to false (IE)
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		this.isPropagationStopped = returnTrue;

		var e = this.originalEvent;
		if ( !e ) {
			return;
		}
		// if stopPropagation exists run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}
		// otherwise set the cancelBubble property of the original event to true (IE)
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	},
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj,
				selector = handleObj.selector,
				ret;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !form._submit_attached ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					form._submit_attached = true;
				}
			});
			// return undefined since we don't need an event listener
		},
		
		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
							jQuery.event.simulate( "change", this, event, true );
						}
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !elem._change_attached ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					elem._change_attached = true;
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) { // && selector != null
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			var handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( var type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	live: function( types, data, fn ) {
		jQuery( this.context ).on( types, this.selector, data, fn );
		return this;
	},
	die: function( types, fn ) {
		jQuery( this.context ).off( types, this.selector || "**", fn );
		return this;
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length == 1? this.off( selector, "**" ) : this.off( types, selector, fn );
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		if ( this[0] ) {
			return jQuery.event.trigger( type, data, this[0], true );
		}
	},

	toggle: function( fn ) {
		// Save reference to arguments for access in closure
		var args = arguments,
			guid = fn.guid || jQuery.guid++,
			i = 0,
			toggler = function( event ) {
				// Figure out which function to execute
				var lastToggle = ( jQuery._data( this, "lastToggle" + fn.guid ) || 0 ) % i;
				jQuery._data( this, "lastToggle" + fn.guid, lastToggle + 1 );

				// Make sure that clicks stop
				event.preventDefault();

				// and execute the function
				return args[ lastToggle ].apply( this, arguments ) || false;
			};

		// link all the functions, so any of them can unbind this click handler
		toggler.guid = guid;
		while ( i < args.length ) {
			args[ i++ ].guid = guid;
		}

		return this.click( toggler );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
});

jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		if ( fn == null ) {
			fn = data;
			data = null;
		}

		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};

	if ( jQuery.attrFn ) {
		jQuery.attrFn[ name ] = true;
	}

	if ( rkeyEvent.test( name ) ) {
		jQuery.event.fixHooks[ name ] = jQuery.event.keyHooks;
	}

	if ( rmouseEvent.test( name ) ) {
		jQuery.event.fixHooks[ name ] = jQuery.event.mouseHooks;
	}
});



/*!
 * Sizzle CSS Selector Engine
 *  Copyright 2011, The Dojo Foundation
 *  Released under the MIT, BSD, and GPL Licenses.
 *  More information: http://sizzlejs.com/
 */
(function(){

var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
	expando = "sizcache" + (Math.random() + '').replace('.', ''),
	done = 0,
	toString = Object.prototype.toString,
	hasDuplicate = false,
	baseHasDuplicate = true,
	rBackslash = /\\/g,
	rReturn = /\r\n/g,
	rNonWord = /\W/;

// Here we check if the JavaScript engine is using some sort of
// optimization where it does not always call our comparision
// function. If that is the case, discard the hasDuplicate value.
//   Thus far that includes Google Chrome.
[0, 0].sort(function() {
	baseHasDuplicate = false;
	return 0;
});

var Sizzle = function( selector, context, results, seed ) {
	results = results || [];
	context = context || document;

	var origContext = context;

	if ( context.nodeType !== 1 && context.nodeType !== 9 ) {
		return [];
	}

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	var m, set, checkSet, extra, ret, cur, pop, i,
		prune = true,
		contextXML = Sizzle.isXML( context ),
		parts = [],
		soFar = selector;

	// Reset the position of the chunker regexp (start from head)
	do {
		chunker.exec( "" );
		m = chunker.exec( soFar );

		if ( m ) {
			soFar = m[3];

			parts.push( m[1] );

			if ( m[2] ) {
				extra = m[3];
				break;
			}
		}
	} while ( m );

	if ( parts.length > 1 && origPOS.exec( selector ) ) {

		if ( parts.length === 2 && Expr.relative[ parts[0] ] ) {
			set = posProcess( parts[0] + parts[1], context, seed );

		} else {
			set = Expr.relative[ parts[0] ] ?
				[ context ] :
				Sizzle( parts.shift(), context );

			while ( parts.length ) {
				selector = parts.shift();

				if ( Expr.relative[ selector ] ) {
					selector += parts.shift();
				}

				set = posProcess( selector, set, seed );
			}
		}

	} else {
		// Take a shortcut and set the context if the root selector is an ID
		// (but not if it'll be faster if the inner selector is an ID)
		if ( !seed && parts.length > 1 && context.nodeType === 9 && !contextXML &&
				Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1]) ) {

			ret = Sizzle.find( parts.shift(), context, contextXML );
			context = ret.expr ?
				Sizzle.filter( ret.expr, ret.set )[0] :
				ret.set[0];
		}

		if ( context ) {
			ret = seed ?
				{ expr: parts.pop(), set: makeArray(seed) } :
				Sizzle.find( parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML );

			set = ret.expr ?
				Sizzle.filter( ret.expr, ret.set ) :
				ret.set;

			if ( parts.length > 0 ) {
				checkSet = makeArray( set );

			} else {
				prune = false;
			}

			while ( parts.length ) {
				cur = parts.pop();
				pop = cur;

				if ( !Expr.relative[ cur ] ) {
					cur = "";
				} else {
					pop = parts.pop();
				}

				if ( pop == null ) {
					pop = context;
				}

				Expr.relative[ cur ]( checkSet, pop, contextXML );
			}

		} else {
			checkSet = parts = [];
		}
	}

	if ( !checkSet ) {
		checkSet = set;
	}

	if ( !checkSet ) {
		Sizzle.error( cur || selector );
	}

	if ( toString.call(checkSet) === "[object Array]" ) {
		if ( !prune ) {
			results.push.apply( results, checkSet );

		} else if ( context && context.nodeType === 1 ) {
			for ( i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && Sizzle.contains(context, checkSet[i])) ) {
					results.push( set[i] );
				}
			}

		} else {
			for ( i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && checkSet[i].nodeType === 1 ) {
					results.push( set[i] );
				}
			}
		}

	} else {
		makeArray( checkSet, results );
	}

	if ( extra ) {
		Sizzle( extra, origContext, results, seed );
		Sizzle.uniqueSort( results );
	}

	return results;
};

Sizzle.uniqueSort = function( results ) {
	if ( sortOrder ) {
		hasDuplicate = baseHasDuplicate;
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			for ( var i = 1; i < results.length; i++ ) {
				if ( results[i] === results[ i - 1 ] ) {
					results.splice( i--, 1 );
				}
			}
		}
	}

	return results;
};

Sizzle.matches = function( expr, set ) {
	return Sizzle( expr, null, null, set );
};

Sizzle.matchesSelector = function( node, expr ) {
	return Sizzle( expr, null, null, [node] ).length > 0;
};

Sizzle.find = function( expr, context, isXML ) {
	var set, i, len, match, type, left;

	if ( !expr ) {
		return [];
	}

	for ( i = 0, len = Expr.order.length; i < len; i++ ) {
		type = Expr.order[i];

		if ( (match = Expr.leftMatch[ type ].exec( expr )) ) {
			left = match[1];
			match.splice( 1, 1 );

			if ( left.substr( left.length - 1 ) !== "\\" ) {
				match[1] = (match[1] || "").replace( rBackslash, "" );
				set = Expr.find[ type ]( match, context, isXML );

				if ( set != null ) {
					expr = expr.replace( Expr.match[ type ], "" );
					break;
				}
			}
		}
	}

	if ( !set ) {
		set = typeof context.getElementsByTagName !== "undefined" ?
			context.getElementsByTagName( "*" ) :
			[];
	}

	return { set: set, expr: expr };
};

Sizzle.filter = function( expr, set, inplace, not ) {
	var match, anyFound,
		type, found, item, filter, left,
		i, pass,
		old = expr,
		result = [],
		curLoop = set,
		isXMLFilter = set && set[0] && Sizzle.isXML( set[0] );

	while ( expr && set.length ) {
		for ( type in Expr.filter ) {
			if ( (match = Expr.leftMatch[ type ].exec( expr )) != null && match[2] ) {
				filter = Expr.filter[ type ];
				left = match[1];

				anyFound = false;

				match.splice(1,1);

				if ( left.substr( left.length - 1 ) === "\\" ) {
					continue;
				}

				if ( curLoop === result ) {
					result = [];
				}

				if ( Expr.preFilter[ type ] ) {
					match = Expr.preFilter[ type ]( match, curLoop, inplace, result, not, isXMLFilter );

					if ( !match ) {
						anyFound = found = true;

					} else if ( match === true ) {
						continue;
					}
				}

				if ( match ) {
					for ( i = 0; (item = curLoop[i]) != null; i++ ) {
						if ( item ) {
							found = filter( item, match, i, curLoop );
							pass = not ^ found;

							if ( inplace && found != null ) {
								if ( pass ) {
									anyFound = true;

								} else {
									curLoop[i] = false;
								}

							} else if ( pass ) {
								result.push( item );
								anyFound = true;
							}
						}
					}
				}

				if ( found !== undefined ) {
					if ( !inplace ) {
						curLoop = result;
					}

					expr = expr.replace( Expr.match[ type ], "" );

					if ( !anyFound ) {
						return [];
					}

					break;
				}
			}
		}

		// Improper expression
		if ( expr === old ) {
			if ( anyFound == null ) {
				Sizzle.error( expr );

			} else {
				break;
			}
		}

		old = expr;
	}

	return curLoop;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Utility function for retreiving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
var getText = Sizzle.getText = function( elem ) {
    var i, node,
		nodeType = elem.nodeType,
		ret = "";

	if ( nodeType ) {
		if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent || innerText for elements
			if ( typeof elem.textContent === 'string' ) {
				return elem.textContent;
			} else if ( typeof elem.innerText === 'string' ) {
				// Replace IE's carriage returns
				return elem.innerText.replace( rReturn, '' );
			} else {
				// Traverse it's children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
	} else {

		// If no nodeType, this is expected to be an array
		for ( i = 0; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			if ( node.nodeType !== 8 ) {
				ret += getText( node );
			}
		}
	}
	return ret;
};

var Expr = Sizzle.selectors = {
	order: [ "ID", "NAME", "TAG" ],

	match: {
		ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
		CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
		NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,
		ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,
		TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,
		CHILD: /:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,
		POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,
		PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
	},

	leftMatch: {},

	attrMap: {
		"class": "className",
		"for": "htmlFor"
	},

	attrHandle: {
		href: function( elem ) {
			return elem.getAttribute( "href" );
		},
		type: function( elem ) {
			return elem.getAttribute( "type" );
		}
	},

	relative: {
		"+": function(checkSet, part){
			var isPartStr = typeof part === "string",
				isTag = isPartStr && !rNonWord.test( part ),
				isPartStrNotTag = isPartStr && !isTag;

			if ( isTag ) {
				part = part.toLowerCase();
			}

			for ( var i = 0, l = checkSet.length, elem; i < l; i++ ) {
				if ( (elem = checkSet[i]) ) {
					while ( (elem = elem.previousSibling) && elem.nodeType !== 1 ) {}

					checkSet[i] = isPartStrNotTag || elem && elem.nodeName.toLowerCase() === part ?
						elem || false :
						elem === part;
				}
			}

			if ( isPartStrNotTag ) {
				Sizzle.filter( part, checkSet, true );
			}
		},

		">": function( checkSet, part ) {
			var elem,
				isPartStr = typeof part === "string",
				i = 0,
				l = checkSet.length;

			if ( isPartStr && !rNonWord.test( part ) ) {
				part = part.toLowerCase();

				for ( ; i < l; i++ ) {
					elem = checkSet[i];

					if ( elem ) {
						var parent = elem.parentNode;
						checkSet[i] = parent.nodeName.toLowerCase() === part ? parent : false;
					}
				}

			} else {
				for ( ; i < l; i++ ) {
					elem = checkSet[i];

					if ( elem ) {
						checkSet[i] = isPartStr ?
							elem.parentNode :
							elem.parentNode === part;
					}
				}

				if ( isPartStr ) {
					Sizzle.filter( part, checkSet, true );
				}
			}
		},

		"": function(checkSet, part, isXML){
			var nodeCheck,
				doneName = done++,
				checkFn = dirCheck;

			if ( typeof part === "string" && !rNonWord.test( part ) ) {
				part = part.toLowerCase();
				nodeCheck = part;
				checkFn = dirNodeCheck;
			}

			checkFn( "parentNode", part, doneName, checkSet, nodeCheck, isXML );
		},

		"~": function( checkSet, part, isXML ) {
			var nodeCheck,
				doneName = done++,
				checkFn = dirCheck;

			if ( typeof part === "string" && !rNonWord.test( part ) ) {
				part = part.toLowerCase();
				nodeCheck = part;
				checkFn = dirNodeCheck;
			}

			checkFn( "previousSibling", part, doneName, checkSet, nodeCheck, isXML );
		}
	},

	find: {
		ID: function( match, context, isXML ) {
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
				var m = context.getElementById(match[1]);
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		},

		NAME: function( match, context ) {
			if ( typeof context.getElementsByName !== "undefined" ) {
				var ret = [],
					results = context.getElementsByName( match[1] );

				for ( var i = 0, l = results.length; i < l; i++ ) {
					if ( results[i].getAttribute("name") === match[1] ) {
						ret.push( results[i] );
					}
				}

				return ret.length === 0 ? null : ret;
			}
		},

		TAG: function( match, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( match[1] );
			}
		}
	},
	preFilter: {
		CLASS: function( match, curLoop, inplace, result, not, isXML ) {
			match = " " + match[1].replace( rBackslash, "" ) + " ";

			if ( isXML ) {
				return match;
			}

			for ( var i = 0, elem; (elem = curLoop[i]) != null; i++ ) {
				if ( elem ) {
					if ( not ^ (elem.className && (" " + elem.className + " ").replace(/[\t\n\r]/g, " ").indexOf(match) >= 0) ) {
						if ( !inplace ) {
							result.push( elem );
						}

					} else if ( inplace ) {
						curLoop[i] = false;
					}
				}
			}

			return false;
		},

		ID: function( match ) {
			return match[1].replace( rBackslash, "" );
		},

		TAG: function( match, curLoop ) {
			return match[1].replace( rBackslash, "" ).toLowerCase();
		},

		CHILD: function( match ) {
			if ( match[1] === "nth" ) {
				if ( !match[2] ) {
					Sizzle.error( match[0] );
				}

				match[2] = match[2].replace(/^\+|\s*/g, '');

				// parse equations like 'even', 'odd', '5', '2n', '3n+2', '4n-1', '-n+6'
				var test = /(-?)(\d*)(?:n([+\-]?\d*))?/.exec(
					match[2] === "even" && "2n" || match[2] === "odd" && "2n+1" ||
					!/\D/.test( match[2] ) && "0n+" + match[2] || match[2]);

				// calculate the numbers (first)n+(last) including if they are negative
				match[2] = (test[1] + (test[2] || 1)) - 0;
				match[3] = test[3] - 0;
			}
			else if ( match[2] ) {
				Sizzle.error( match[0] );
			}

			// TODO: Move to normal caching system
			match[0] = done++;

			return match;
		},

		ATTR: function( match, curLoop, inplace, result, not, isXML ) {
			var name = match[1] = match[1].replace( rBackslash, "" );

			if ( !isXML && Expr.attrMap[name] ) {
				match[1] = Expr.attrMap[name];
			}

			// Handle if an un-quoted value was used
			match[4] = ( match[4] || match[5] || "" ).replace( rBackslash, "" );

			if ( match[2] === "~=" ) {
				match[4] = " " + match[4] + " ";
			}

			return match;
		},

		PSEUDO: function( match, curLoop, inplace, result, not ) {
			if ( match[1] === "not" ) {
				// If we're dealing with a complex expression, or a simple one
				if ( ( chunker.exec(match[3]) || "" ).length > 1 || /^\w/.test(match[3]) ) {
					match[3] = Sizzle(match[3], null, null, curLoop);

				} else {
					var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);

					if ( !inplace ) {
						result.push.apply( result, ret );
					}

					return false;
				}

			} else if ( Expr.match.POS.test( match[0] ) || Expr.match.CHILD.test( match[0] ) ) {
				return true;
			}

			return match;
		},

		POS: function( match ) {
			match.unshift( true );

			return match;
		}
	},

	filters: {
		enabled: function( elem ) {
			return elem.disabled === false && elem.type !== "hidden";
		},

		disabled: function( elem ) {
			return elem.disabled === true;
		},

		checked: function( elem ) {
			return elem.checked === true;
		},

		selected: function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		parent: function( elem ) {
			return !!elem.firstChild;
		},

		empty: function( elem ) {
			return !elem.firstChild;
		},

		has: function( elem, i, match ) {
			return !!Sizzle( match[3], elem ).length;
		},

		header: function( elem ) {
			return (/h\d/i).test( elem.nodeName );
		},

		text: function( elem ) {
			var attr = elem.getAttribute( "type" ), type = elem.type;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" && "text" === type && ( attr === type || attr === null );
		},

		radio: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "radio" === elem.type;
		},

		checkbox: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "checkbox" === elem.type;
		},

		file: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "file" === elem.type;
		},

		password: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "password" === elem.type;
		},

		submit: function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && "submit" === elem.type;
		},

		image: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "image" === elem.type;
		},

		reset: function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && "reset" === elem.type;
		},

		button: function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && "button" === elem.type || name === "button";
		},

		input: function( elem ) {
			return (/input|select|textarea|button/i).test( elem.nodeName );
		},

		focus: function( elem ) {
			return elem === elem.ownerDocument.activeElement;
		}
	},
	setFilters: {
		first: function( elem, i ) {
			return i === 0;
		},

		last: function( elem, i, match, array ) {
			return i === array.length - 1;
		},

		even: function( elem, i ) {
			return i % 2 === 0;
		},

		odd: function( elem, i ) {
			return i % 2 === 1;
		},

		lt: function( elem, i, match ) {
			return i < match[3] - 0;
		},

		gt: function( elem, i, match ) {
			return i > match[3] - 0;
		},

		nth: function( elem, i, match ) {
			return match[3] - 0 === i;
		},

		eq: function( elem, i, match ) {
			return match[3] - 0 === i;
		}
	},
	filter: {
		PSEUDO: function( elem, match, i, array ) {
			var name = match[1],
				filter = Expr.filters[ name ];

			if ( filter ) {
				return filter( elem, i, match, array );

			} else if ( name === "contains" ) {
				return (elem.textContent || elem.innerText || getText([ elem ]) || "").indexOf(match[3]) >= 0;

			} else if ( name === "not" ) {
				var not = match[3];

				for ( var j = 0, l = not.length; j < l; j++ ) {
					if ( not[j] === elem ) {
						return false;
					}
				}

				return true;

			} else {
				Sizzle.error( name );
			}
		},

		CHILD: function( elem, match ) {
			var first, last,
				doneName, parent, cache,
				count, diff,
				type = match[1],
				node = elem;

			switch ( type ) {
				case "only":
				case "first":
					while ( (node = node.previousSibling) ) {
						if ( node.nodeType === 1 ) {
							return false;
						}
					}

					if ( type === "first" ) {
						return true;
					}

					node = elem;

					/* falls through */
				case "last":
					while ( (node = node.nextSibling) ) {
						if ( node.nodeType === 1 ) {
							return false;
						}
					}

					return true;

				case "nth":
					first = match[2];
					last = match[3];

					if ( first === 1 && last === 0 ) {
						return true;
					}

					doneName = match[0];
					parent = elem.parentNode;

					if ( parent && (parent[ expando ] !== doneName || !elem.nodeIndex) ) {
						count = 0;

						for ( node = parent.firstChild; node; node = node.nextSibling ) {
							if ( node.nodeType === 1 ) {
								node.nodeIndex = ++count;
							}
						}

						parent[ expando ] = doneName;
					}

					diff = elem.nodeIndex - last;

					if ( first === 0 ) {
						return diff === 0;

					} else {
						return ( diff % first === 0 && diff / first >= 0 );
					}
			}
		},

		ID: function( elem, match ) {
			return elem.nodeType === 1 && elem.getAttribute("id") === match;
		},

		TAG: function( elem, match ) {
			return (match === "*" && elem.nodeType === 1) || !!elem.nodeName && elem.nodeName.toLowerCase() === match;
		},

		CLASS: function( elem, match ) {
			return (" " + (elem.className || elem.getAttribute("class")) + " ")
				.indexOf( match ) > -1;
		},

		ATTR: function( elem, match ) {
			var name = match[1],
				result = Sizzle.attr ?
					Sizzle.attr( elem, name ) :
					Expr.attrHandle[ name ] ?
					Expr.attrHandle[ name ]( elem ) :
					elem[ name ] != null ?
						elem[ name ] :
						elem.getAttribute( name ),
				value = result + "",
				type = match[2],
				check = match[4];

			return result == null ?
				type === "!=" :
				!type && Sizzle.attr ?
				result != null :
				type === "=" ?
				value === check :
				type === "*=" ?
				value.indexOf(check) >= 0 :
				type === "~=" ?
				(" " + value + " ").indexOf(check) >= 0 :
				!check ?
				value && result !== false :
				type === "!=" ?
				value !== check :
				type === "^=" ?
				value.indexOf(check) === 0 :
				type === "$=" ?
				value.substr(value.length - check.length) === check :
				type === "|=" ?
				value === check || value.substr(0, check.length + 1) === check + "-" :
				false;
		},

		POS: function( elem, match, i, array ) {
			var name = match[2],
				filter = Expr.setFilters[ name ];

			if ( filter ) {
				return filter( elem, i, match, array );
			}
		}
	}
};

var origPOS = Expr.match.POS,
	fescape = function(all, num){
		return "\\" + (num - 0 + 1);
	};

for ( var type in Expr.match ) {
	Expr.match[ type ] = new RegExp( Expr.match[ type ].source + (/(?![^\[]*\])(?![^\(]*\))/.source) );
	Expr.leftMatch[ type ] = new RegExp( /(^(?:.|\r|\n)*?)/.source + Expr.match[ type ].source.replace(/\\(\d+)/g, fescape) );
}
// Expose origPOS
// "global" as in regardless of relation to brackets/parens
Expr.match.globalPOS = origPOS;

var makeArray = function( array, results ) {
	array = Array.prototype.slice.call( array, 0 );

	if ( results ) {
		results.push.apply( results, array );
		return results;
	}

	return array;
};

// Perform a simple check to determine if the browser is capable of
// converting a NodeList to an array using builtin methods.
// Also verifies that the returned array holds DOM nodes
// (which is not the case in the Blackberry browser)
try {
	Array.prototype.slice.call( document.documentElement.childNodes, 0 )[0].nodeType;

// Provide a fallback method if it does not work
} catch( e ) {
	makeArray = function( array, results ) {
		var i = 0,
			ret = results || [];

		if ( toString.call(array) === "[object Array]" ) {
			Array.prototype.push.apply( ret, array );

		} else {
			if ( typeof array.length === "number" ) {
				for ( var l = array.length; i < l; i++ ) {
					ret.push( array[i] );
				}

			} else {
				for ( ; array[i]; i++ ) {
					ret.push( array[i] );
				}
			}
		}

		return ret;
	};
}

var sortOrder, siblingCheck;

if ( document.documentElement.compareDocumentPosition ) {
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		if ( !a.compareDocumentPosition || !b.compareDocumentPosition ) {
			return a.compareDocumentPosition ? -1 : 1;
		}

		return a.compareDocumentPosition(b) & 4 ? -1 : 1;
	};

} else {
	sortOrder = function( a, b ) {
		// The nodes are identical, we can exit early
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Fallback to using sourceIndex (in IE) if it's available on both nodes
		} else if ( a.sourceIndex && b.sourceIndex ) {
			return a.sourceIndex - b.sourceIndex;
		}

		var al, bl,
			ap = [],
			bp = [],
			aup = a.parentNode,
			bup = b.parentNode,
			cur = aup;

		// If the nodes are siblings (or identical) we can do a quick check
		if ( aup === bup ) {
			return siblingCheck( a, b );

		// If no parents were found then the nodes are disconnected
		} else if ( !aup ) {
			return -1;

		} else if ( !bup ) {
			return 1;
		}

		// Otherwise they're somewhere else in the tree so we need
		// to build up a full list of the parentNodes for comparison
		while ( cur ) {
			ap.unshift( cur );
			cur = cur.parentNode;
		}

		cur = bup;

		while ( cur ) {
			bp.unshift( cur );
			cur = cur.parentNode;
		}

		al = ap.length;
		bl = bp.length;

		// Start walking down the tree looking for a discrepancy
		for ( var i = 0; i < al && i < bl; i++ ) {
			if ( ap[i] !== bp[i] ) {
				return siblingCheck( ap[i], bp[i] );
			}
		}

		// We ended someplace up the tree so do a sibling check
		return i === al ?
			siblingCheck( a, bp[i], -1 ) :
			siblingCheck( ap[i], b, 1 );
	};

	siblingCheck = function( a, b, ret ) {
		if ( a === b ) {
			return ret;
		}

		var cur = a.nextSibling;

		while ( cur ) {
			if ( cur === b ) {
				return -1;
			}

			cur = cur.nextSibling;
		}

		return 1;
	};
}

// Check to see if the browser returns elements by name when
// querying by getElementById (and provide a workaround)
(function(){
	// We're going to inject a fake input element with a specified name
	var form = document.createElement("div"),
		id = "script" + (new Date()).getTime(),
		root = document.documentElement;

	form.innerHTML = "<a name='" + id + "'/>";

	// Inject it into the root element, check its status, and remove it quickly
	root.insertBefore( form, root.firstChild );

	// The workaround has to do additional checks after a getElementById
	// Which slows things down for other browsers (hence the branching)
	if ( document.getElementById( id ) ) {
		Expr.find.ID = function( match, context, isXML ) {
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
				var m = context.getElementById(match[1]);

				return m ?
					m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ?
						[m] :
						undefined :
					[];
			}
		};

		Expr.filter.ID = function( elem, match ) {
			var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");

			return elem.nodeType === 1 && node && node.nodeValue === match;
		};
	}

	root.removeChild( form );

	// release memory in IE
	root = form = null;
})();

(function(){
	// Check to see if the browser returns only elements
	// when doing getElementsByTagName("*")

	// Create a fake element
	var div = document.createElement("div");
	div.appendChild( document.createComment("") );

	// Make sure no comments are found
	if ( div.getElementsByTagName("*").length > 0 ) {
		Expr.find.TAG = function( match, context ) {
			var results = context.getElementsByTagName( match[1] );

			// Filter out possible comments
			if ( match[1] === "*" ) {
				var tmp = [];

				for ( var i = 0; results[i]; i++ ) {
					if ( results[i].nodeType === 1 ) {
						tmp.push( results[i] );
					}
				}

				results = tmp;
			}

			return results;
		};
	}

	// Check to see if an attribute returns normalized href attributes
	div.innerHTML = "<a href='#'></a>";

	if ( div.firstChild && typeof div.firstChild.getAttribute !== "undefined" &&
			div.firstChild.getAttribute("href") !== "#" ) {

		Expr.attrHandle.href = function( elem ) {
			return elem.getAttribute( "href", 2 );
		};
	}

	// release memory in IE
	div = null;
})();

if ( document.querySelectorAll ) {
	(function(){
		var oldSizzle = Sizzle,
			div = document.createElement("div"),
			id = "__sizzle__";

		div.innerHTML = "<p class='TEST'></p>";

		// Safari can't handle uppercase or unicode characters when
		// in quirks mode.
		if ( div.querySelectorAll && div.querySelectorAll(".TEST").length === 0 ) {
			return;
		}

		Sizzle = function( query, context, extra, seed ) {
			context = context || document;

			// Only use querySelectorAll on non-XML documents
			// (ID selectors don't work in non-HTML documents)
			if ( !seed && !Sizzle.isXML(context) ) {
				// See if we find a selector to speed up
				var match = /^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec( query );

				if ( match && (context.nodeType === 1 || context.nodeType === 9) ) {
					// Speed-up: Sizzle("TAG")
					if ( match[1] ) {
						return makeArray( context.getElementsByTagName( query ), extra );

					// Speed-up: Sizzle(".CLASS")
					} else if ( match[2] && Expr.find.CLASS && context.getElementsByClassName ) {
						return makeArray( context.getElementsByClassName( match[2] ), extra );
					}
				}

				if ( context.nodeType === 9 ) {
					// Speed-up: Sizzle("body")
					// The body element only exists once, optimize finding it
					if ( query === "body" && context.body ) {
						return makeArray( [ context.body ], extra );

					// Speed-up: Sizzle("#ID")
					} else if ( match && match[3] ) {
						var elem = context.getElementById( match[3] );

						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document #6963
						if ( elem && elem.parentNode ) {
							// Handle the case where IE and Opera return items
							// by name instead of ID
							if ( elem.id === match[3] ) {
								return makeArray( [ elem ], extra );
							}

						} else {
							return makeArray( [], extra );
						}
					}

					try {
						return makeArray( context.querySelectorAll(query), extra );
					} catch(qsaError) {}

				// qSA works strangely on Element-rooted queries
				// We can work around this by specifying an extra ID on the root
				// and working up from there (Thanks to Andrew Dupont for the technique)
				// IE 8 doesn't work on object elements
				} else if ( context.nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
					var oldContext = context,
						old = context.getAttribute( "id" ),
						nid = old || id,
						hasParent = context.parentNode,
						relativeHierarchySelector = /^\s*[+~]/.test( query );

					if ( !old ) {
						context.setAttribute( "id", nid );
					} else {
						nid = nid.replace( /'/g, "\\$&" );
					}
					if ( relativeHierarchySelector && hasParent ) {
						context = context.parentNode;
					}

					try {
						if ( !relativeHierarchySelector || hasParent ) {
							return makeArray( context.querySelectorAll( "[id='" + nid + "'] " + query ), extra );
						}

					} catch(pseudoError) {
					} finally {
						if ( !old ) {
							oldContext.removeAttribute( "id" );
						}
					}
				}
			}

			return oldSizzle(query, context, extra, seed);
		};

		for ( var prop in oldSizzle ) {
			Sizzle[ prop ] = oldSizzle[ prop ];
		}

		// release memory in IE
		div = null;
	})();
}

(function(){
	var html = document.documentElement,
		matches = html.matchesSelector || html.mozMatchesSelector || html.webkitMatchesSelector || html.msMatchesSelector;

	if ( matches ) {
		// Check to see if it's possible to do matchesSelector
		// on a disconnected node (IE 9 fails this)
		var disconnectedMatch = !matches.call( document.createElement( "div" ), "div" ),
			pseudoWorks = false;

		try {
			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( document.documentElement, "[test!='']:sizzle" );

		} catch( pseudoError ) {
			pseudoWorks = true;
		}

		Sizzle.matchesSelector = function( node, expr ) {
			// Make sure that attribute selectors are quoted
			expr = expr.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");

			if ( !Sizzle.isXML( node ) ) {
				try {
					if ( pseudoWorks || !Expr.match.PSEUDO.test( expr ) && !/!=/.test( expr ) ) {
						var ret = matches.call( node, expr );

						// IE 9's matchesSelector returns false on disconnected nodes
						if ( ret || !disconnectedMatch ||
								// As well, disconnected nodes are said to be in a document
								// fragment in IE 9, so check for that
								node.document && node.document.nodeType !== 11 ) {
							return ret;
						}
					}
				} catch(e) {}
			}

			return Sizzle(expr, null, null, [node]).length > 0;
		};
	}
})();

(function(){
	var div = document.createElement("div");

	div.innerHTML = "<div class='test e'></div><div class='test'></div>";

	// Opera can't find a second classname (in 9.6)
	// Also, make sure that getElementsByClassName actually exists
	if ( !div.getElementsByClassName || div.getElementsByClassName("e").length === 0 ) {
		return;
	}

	// Safari caches class attributes, doesn't catch changes (in 3.2)
	div.lastChild.className = "e";

	if ( div.getElementsByClassName("e").length === 1 ) {
		return;
	}

	Expr.order.splice(1, 0, "CLASS");
	Expr.find.CLASS = function( match, context, isXML ) {
		if ( typeof context.getElementsByClassName !== "undefined" && !isXML ) {
			return context.getElementsByClassName(match[1]);
		}
	};

	// release memory in IE
	div = null;
})();

function dirNodeCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
		var elem = checkSet[i];

		if ( elem ) {
			var match = false;

			elem = elem[dir];

			while ( elem ) {
				if ( elem[ expando ] === doneName ) {
					match = checkSet[elem.sizset];
					break;
				}

				if ( elem.nodeType === 1 && !isXML ){
					elem[ expando ] = doneName;
					elem.sizset = i;
				}

				if ( elem.nodeName.toLowerCase() === cur ) {
					match = elem;
					break;
				}

				elem = elem[dir];
			}

			checkSet[i] = match;
		}
	}
}

function dirCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
		var elem = checkSet[i];

		if ( elem ) {
			var match = false;

			elem = elem[dir];

			while ( elem ) {
				if ( elem[ expando ] === doneName ) {
					match = checkSet[elem.sizset];
					break;
				}

				if ( elem.nodeType === 1 ) {
					if ( !isXML ) {
						elem[ expando ] = doneName;
						elem.sizset = i;
					}

					if ( typeof cur !== "string" ) {
						if ( elem === cur ) {
							match = true;
							break;
						}

					} else if ( Sizzle.filter( cur, [elem] ).length > 0 ) {
						match = elem;
						break;
					}
				}

				elem = elem[dir];
			}

			checkSet[i] = match;
		}
	}
}

if ( document.documentElement.contains ) {
	Sizzle.contains = function( a, b ) {
		return a !== b && (a.contains ? a.contains(b) : true);
	};

} else if ( document.documentElement.compareDocumentPosition ) {
	Sizzle.contains = function( a, b ) {
		return !!(a.compareDocumentPosition(b) & 16);
	};

} else {
	Sizzle.contains = function() {
		return false;
	};
}

Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = (elem ? elem.ownerDocument || elem : 0).documentElement;

	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

var posProcess = function( selector, context, seed ) {
	var match,
		tmpSet = [],
		later = "",
		root = context.nodeType ? [context] : context;

	// Position selectors must be done after the filter
	// And so must :not(positional) so we move all PSEUDOs to the end
	while ( (match = Expr.match.PSEUDO.exec( selector )) ) {
		later += match[0];
		selector = selector.replace( Expr.match.PSEUDO, "" );
	}

	selector = Expr.relative[selector] ? selector + "*" : selector;

	for ( var i = 0, l = root.length; i < l; i++ ) {
		Sizzle( selector, root[i], tmpSet, seed );
	}

	return Sizzle.filter( later, tmpSet );
};

// EXPOSE
// Override sizzle attribute retrieval
Sizzle.attr = jQuery.attr;
Sizzle.selectors.attrMap = {};
jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.filters;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})();


var runtil = /Until$/,
	rparentsprev = /^(?:parents|prevUntil|prevAll)/,
	// Note: This RegExp should be improved, or likely pulled from Sizzle
	rmultiselector = /,/,
	isSimple = /^.[^:#\[\.,]*$/,
	slice = Array.prototype.slice,
	POS = jQuery.expr.match.globalPOS,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var self = this,
			i, l;

		if ( typeof selector !== "string" ) {
			return jQuery( selector ).filter(function() {
				for ( i = 0, l = self.length; i < l; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			});
		}

		var ret = this.pushStack( "", "find", selector ),
			length, n, r;

		for ( i = 0, l = this.length; i < l; i++ ) {
			length = ret.length;
			jQuery.find( selector, this[i], ret );

			if ( i > 0 ) {
				// Make sure that the results are unique
				for ( n = length; n < ret.length; n++ ) {
					for ( r = 0; r < length; r++ ) {
						if ( ret[r] === ret[n] ) {
							ret.splice(n--, 1);
							break;
						}
					}
				}
			}
		}

		return ret;
	},

	has: function( target ) {
		var targets = jQuery( target );
		return this.filter(function() {
			for ( var i = 0, l = targets.length; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector, false), "not", selector);
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector, true), "filter", selector );
	},

	is: function( selector ) {
		return !!selector && (
			typeof selector === "string" ?
				// If this is a positional selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				POS.test( selector ) ?
					jQuery( selector, this.context ).index( this[0] ) >= 0 :
					jQuery.filter( selector, this ).length > 0 :
				this.filter( selector ).length > 0 );
	},

	closest: function( selectors, context ) {
		var ret = [], i, l, cur = this[0];

		// Array (deprecated as of jQuery 1.7)
		if ( jQuery.isArray( selectors ) ) {
			var level = 1;

			while ( cur && cur.ownerDocument && cur !== context ) {
				for ( i = 0; i < selectors.length; i++ ) {

					if ( jQuery( cur ).is( selectors[ i ] ) ) {
						ret.push({ selector: selectors[ i ], elem: cur, level: level });
					}
				}

				cur = cur.parentNode;
				level++;
			}

			return ret;
		}

		// String
		var pos = POS.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( i = 0, l = this.length; i < l; i++ ) {
			cur = this[i];

			while ( cur ) {
				if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
					ret.push( cur );
					break;

				} else {
					cur = cur.parentNode;
					if ( !cur || !cur.ownerDocument || cur === context || cur.nodeType === 11 ) {
						break;
					}
				}
			}
		}

		ret = ret.length > 1 ? jQuery.unique( ret ) : ret;

		return this.pushStack( ret, "closest", selectors );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( isDisconnected( set[0] ) || isDisconnected( all[0] ) ?
			all :
			jQuery.unique( all ) );
	},

	andSelf: function() {
		return this.add( this.prevObject );
	}
});

// A painfully simple check to see if an element is disconnected
// from a document (should be improved, where feasible).
function isDisconnected( node ) {
	return !node || !node.parentNode || node.parentNode.nodeType === 11;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return jQuery.nth( elem, 2, "nextSibling" );
	},
	prev: function( elem ) {
		return jQuery.nth( elem, 2, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.makeArray( elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( !runtil.test( name ) ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;

		if ( (this.length > 1 || rmultiselector.test( selector )) && rparentsprev.test( name ) ) {
			ret = ret.reverse();
		}

		return this.pushStack( ret, name, slice.call( arguments ).join(",") );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 ?
			jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
			jQuery.find.matches(expr, elems);
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	nth: function( cur, result, dir, elem ) {
		result = result || 1;
		var num = 0;

		for ( ; cur; cur = cur[dir] ) {
			if ( cur.nodeType === 1 && ++num === result ) {
				break;
			}
		}

		return cur;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, keep ) {

	// Can't pass null or undefined to indexOf in Firefox 4
	// Set to 0 to skip string check
	qualifier = qualifier || 0;

	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep(elements, function( elem, i ) {
			var retVal = !!qualifier.call( elem, i, elem );
			return retVal === keep;
		});

	} else if ( qualifier.nodeType ) {
		return jQuery.grep(elements, function( elem, i ) {
			return ( elem === qualifier ) === keep;
		});

	} else if ( typeof qualifier === "string" ) {
		var filtered = jQuery.grep(elements, function( elem ) {
			return elem.nodeType === 1;
		});

		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter(qualifier, filtered, !keep);
		} else {
			qualifier = jQuery.filter( qualifier, filtered );
		}
	}

	return jQuery.grep(elements, function( elem, i ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
	});
}




function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
	safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:\d+|null)"/g,
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style)/i,
	rnocache = /<(?:script|object|embed|option|style)/i,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /\/(java|ecma)script/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)/,
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		area: [ 1, "<map>", "</map>" ],
		_default: [ 0, "", "" ]
	},
	safeFragment = createSafeFragment( document );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// IE can't serialize <link> and <script> tags normally
if ( !jQuery.support.htmlSerialize ) {
	wrapMap._default = [ 1, "div<div>", "</div>" ];
}

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	},

	append: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 ) {
				this.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 ) {
				this.insertBefore( elem, this.firstChild );
			}
		});
	},

	before: function() {
		if ( this[0] && this[0].parentNode ) {
			return this.domManip(arguments, false, function( elem ) {
				this.parentNode.insertBefore( elem, this );
			});
		} else if ( arguments.length ) {
			var set = jQuery.clean( arguments );
			set.push.apply( set, this.toArray() );
			return this.pushStack( set, "before", arguments );
		}
	},

	after: function() {
		if ( this[0] && this[0].parentNode ) {
			return this.domManip(arguments, false, function( elem ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			});
		} else if ( arguments.length ) {
			var set = this.pushStack( this, "after", arguments );
			set.push.apply( set, jQuery.clean(arguments) );
			return set;
		}
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		for ( var i = 0, elem; (elem = this[i]) != null; i++ ) {
			if ( !selector || jQuery.filter( selector, [ elem ] ).length ) {
				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( elem.getElementsByTagName("*") );
					jQuery.cleanData( [ elem ] );
				}

				if ( elem.parentNode ) {
					elem.parentNode.removeChild( elem );
				}
			}
		}

		return this;
	},

	empty: function() {
		for ( var i = 0, elem; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( elem.getElementsByTagName("*") );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[0] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					null;
			}


			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( elem.getElementsByTagName( "*" ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function( value ) {
		if ( this[0] && this[0].parentNode ) {
			// Make sure that the elements are removed from the DOM before they are inserted
			// this can help fix replacing a parent with child elements
			if ( jQuery.isFunction( value ) ) {
				return this.each(function(i) {
					var self = jQuery(this), old = self.html();
					self.replaceWith( value.call( this, i, old ) );
				});
			}

			if ( typeof value !== "string" ) {
				value = jQuery( value ).detach();
			}

			return this.each(function() {
				var next = this.nextSibling,
					parent = this.parentNode;

				jQuery( this ).remove();

				if ( next ) {
					jQuery(next).before( value );
				} else {
					jQuery(parent).append( value );
				}
			});
		} else {
			return this.length ?
				this.pushStack( jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value ) :
				this;
		}
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, table, callback ) {
		var results, first, fragment, parent,
			value = args[0],
			scripts = [];

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( !jQuery.support.checkClone && arguments.length === 3 && typeof value === "string" && rchecked.test( value ) ) {
			return this.each(function() {
				jQuery(this).domManip( args, table, callback, true );
			});
		}

		if ( jQuery.isFunction(value) ) {
			return this.each(function(i) {
				var self = jQuery(this);
				args[0] = value.call(this, i, table ? self.html() : undefined);
				self.domManip( args, table, callback );
			});
		}

		if ( this[0] ) {
			parent = value && value.parentNode;

			// If we're in a fragment, just use that instead of building a new one
			if ( jQuery.support.parentNode && parent && parent.nodeType === 11 && parent.childNodes.length === this.length ) {
				results = { fragment: parent };

			} else {
				results = jQuery.buildFragment( args, this, scripts );
			}

			fragment = results.fragment;

			if ( fragment.childNodes.length === 1 ) {
				first = fragment = fragment.firstChild;
			} else {
				first = fragment.firstChild;
			}

			if ( first ) {
				table = table && jQuery.nodeName( first, "tr" );

				for ( var i = 0, l = this.length, lastIndex = l - 1; i < l; i++ ) {
					callback.call(
						table ?
							root(this[i], first) :
							this[i],
						// Make sure that we do not leak memory by inadvertently discarding
						// the original fragment (which might have attached data) instead of
						// using it; in addition, use the original fragment object for the last
						// item instead of first because it can end up being emptied incorrectly
						// in certain situations (Bug #8070).
						// Fragments from the fragment cache must always be cloned and never used
						// in place.
						results.cacheable || ( l > 1 && i < lastIndex ) ?
							jQuery.clone( fragment, true, true ) :
							fragment
					);
				}
			}

			if ( scripts.length ) {
				jQuery.each( scripts, function( i, elem ) {
					if ( elem.src ) {
						jQuery.ajax({
							type: "GET",
							global: false,
							url: elem.src,
							async: false,
							dataType: "script"
						});
					} else {
						jQuery.globalEval( ( elem.text || elem.textContent || elem.innerHTML || "" ).replace( rcleanScript, "/*$0*/" ) );
					}

					if ( elem.parentNode ) {
						elem.parentNode.removeChild( elem );
					}
				});
			}
		}

		return this;
	}
});

function root( elem, cur ) {
	return jQuery.nodeName(elem, "table") ?
		(elem.getElementsByTagName("tbody")[0] ||
		elem.appendChild(elem.ownerDocument.createElement("tbody"))) :
		elem;
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function cloneFixAttributes( src, dest ) {
	var nodeName;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	// clearAttributes removes the attributes, which we don't want,
	// but also removes the attachEvent events, which we *do* want
	if ( dest.clearAttributes ) {
		dest.clearAttributes();
	}

	// mergeAttributes, in contrast, only merges back on the
	// original attributes, not the events
	if ( dest.mergeAttributes ) {
		dest.mergeAttributes( src );
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 fail to clone children inside object elements that use
	// the proprietary classid attribute value (rather than the type
	// attribute) to identify the type of content to display
	if ( nodeName === "object" ) {
		dest.outerHTML = src.outerHTML;

	} else if ( nodeName === "input" && (src.type === "checkbox" || src.type === "radio") ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set
		if ( src.checked ) {
			dest.defaultChecked = dest.checked = src.checked;
		}

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;

	// IE blanks contents when cloning scripts
	} else if ( nodeName === "script" && dest.text !== src.text ) {
		dest.text = src.text;
	}

	// Event data gets referenced instead of copied if the expando
	// gets copied too
	dest.removeAttribute( jQuery.expando );

	// Clear flags for bubbling special change/submit events, they must
	// be reattached when the newly cloned events are first activated
	dest.removeAttribute( "_submit_attached" );
	dest.removeAttribute( "_change_attached" );
}

jQuery.buildFragment = function( args, nodes, scripts ) {
	var fragment, cacheable, cacheresults, doc,
	first = args[ 0 ];

	// nodes may contain either an explicit document object,
	// a jQuery collection or context object.
	// If nodes[0] contains a valid object to assign to doc
	if ( nodes && nodes[0] ) {
		doc = nodes[0].ownerDocument || nodes[0];
	}

	// Ensure that an attr object doesn't incorrectly stand in as a document object
	// Chrome and Firefox seem to allow this to occur and will throw exception
	// Fixes #8950
	if ( !doc.createDocumentFragment ) {
		doc = document;
	}

	// Only cache "small" (1/2 KB) HTML strings that are associated with the main document
	// Cloning options loses the selected state, so don't cache them
	// IE 6 doesn't like it when you put <object> or <embed> elements in a fragment
	// Also, WebKit does not clone 'checked' attributes on cloneNode, so don't cache
	// Lastly, IE6,7,8 will not correctly reuse cached fragments that were created from unknown elems #10501
	if ( args.length === 1 && typeof first === "string" && first.length < 512 && doc === document &&
		first.charAt(0) === "<" && !rnocache.test( first ) &&
		(jQuery.support.checkClone || !rchecked.test( first )) &&
		(jQuery.support.html5Clone || !rnoshimcache.test( first )) ) {

		cacheable = true;

		cacheresults = jQuery.fragments[ first ];
		if ( cacheresults && cacheresults !== 1 ) {
			fragment = cacheresults;
		}
	}

	if ( !fragment ) {
		fragment = doc.createDocumentFragment();
		jQuery.clean( args, doc, fragment, scripts );
	}

	if ( cacheable ) {
		jQuery.fragments[ first ] = cacheresults ? fragment : 1;
	}

	return { fragment: fragment, cacheable: cacheable };
};

jQuery.fragments = {};

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var ret = [],
			insert = jQuery( selector ),
			parent = this.length === 1 && this[0].parentNode;

		if ( parent && parent.nodeType === 11 && parent.childNodes.length === 1 && insert.length === 1 ) {
			insert[ original ]( this[0] );
			return this;

		} else {
			for ( var i = 0, l = insert.length; i < l; i++ ) {
				var elems = ( i > 0 ? this.clone(true) : this ).get();
				jQuery( insert[i] )[ original ]( elems );
				ret = ret.concat( elems );
			}

			return this.pushStack( ret, name, insert.selector );
		}
	};
});

function getAll( elem ) {
	if ( typeof elem.getElementsByTagName !== "undefined" ) {
		return elem.getElementsByTagName( "*" );

	} else if ( typeof elem.querySelectorAll !== "undefined" ) {
		return elem.querySelectorAll( "*" );

	} else {
		return [];
	}
}

// Used in clean, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( elem.type === "checkbox" || elem.type === "radio" ) {
		elem.defaultChecked = elem.checked;
	}
}
// Finds all inputs and passes them to fixDefaultChecked
function findInputs( elem ) {
	var nodeName = ( elem.nodeName || "" ).toLowerCase();
	if ( nodeName === "input" ) {
		fixDefaultChecked( elem );
	// Skip scripts, get other children
	} else if ( nodeName !== "script" && typeof elem.getElementsByTagName !== "undefined" ) {
		jQuery.grep( elem.getElementsByTagName("input"), fixDefaultChecked );
	}
}

// Derived From: http://www.iecss.com/shimprove/javascript/shimprove.1-0-1.js
function shimCloneNode( elem ) {
	var div = document.createElement( "div" );
	safeFragment.appendChild( div );

	div.innerHTML = elem.outerHTML;
	return div.firstChild;
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var srcElements,
			destElements,
			i,
			// IE<=8 does not properly clone detached, unknown element nodes
			clone = jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ?
				elem.cloneNode( true ) :
				shimCloneNode( elem );

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {
			// IE copies events bound via attachEvent when using cloneNode.
			// Calling detachEvent on the clone will also remove the events
			// from the original. In order to get around this, we use some
			// proprietary methods to clear the events. Thanks to MooTools
			// guys for this hotness.

			cloneFixAttributes( elem, clone );

			// Using Sizzle here is crazy slow, so we use getElementsByTagName instead
			srcElements = getAll( elem );
			destElements = getAll( clone );

			// Weird iteration because IE will replace the length property
			// with an element if you are cloning the body and one of the
			// elements on the page has a name or id of "length"
			for ( i = 0; srcElements[i]; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					cloneFixAttributes( srcElements[i], destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			cloneCopyEvent( elem, clone );

			if ( deepDataAndEvents ) {
				srcElements = getAll( elem );
				destElements = getAll( clone );

				for ( i = 0; srcElements[i]; ++i ) {
					cloneCopyEvent( srcElements[i], destElements[i] );
				}
			}
		}

		srcElements = destElements = null;

		// Return the cloned set
		return clone;
	},

	clean: function( elems, context, fragment, scripts ) {
		var checkScriptType, script, j,
				ret = [];

		context = context || document;

		// !context.createElement fails in IE with an error but returns typeof 'object'
		if ( typeof context.createElement === "undefined" ) {
			context = context.ownerDocument || context[0] && context[0].ownerDocument || document;
		}

		for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
			if ( typeof elem === "number" ) {
				elem += "";
			}

			if ( !elem ) {
				continue;
			}

			// Convert html string into DOM nodes
			if ( typeof elem === "string" ) {
				if ( !rhtml.test( elem ) ) {
					elem = context.createTextNode( elem );
				} else {
					// Fix "XHTML"-style tags in all browsers
					elem = elem.replace(rxhtmlTag, "<$1></$2>");

					// Trim whitespace, otherwise indexOf won't work as expected
					var tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase(),
						wrap = wrapMap[ tag ] || wrapMap._default,
						depth = wrap[0],
						div = context.createElement("div"),
						safeChildNodes = safeFragment.childNodes,
						remove;

					// Append wrapper element to unknown element safe doc fragment
					if ( context === document ) {
						// Use the fragment we've already created for this document
						safeFragment.appendChild( div );
					} else {
						// Use a fragment created with the owner document
						createSafeFragment( context ).appendChild( div );
					}

					// Go to html and back, then peel off extra wrappers
					div.innerHTML = wrap[1] + elem + wrap[2];

					// Move to the right depth
					while ( depth-- ) {
						div = div.lastChild;
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						var hasBody = rtbody.test(elem),
							tbody = tag === "table" && !hasBody ?
								div.firstChild && div.firstChild.childNodes :

								// String was a bare <thead> or <tfoot>
								wrap[1] === "<table>" && !hasBody ?
									div.childNodes :
									[];

						for ( j = tbody.length - 1; j >= 0 ; --j ) {
							if ( jQuery.nodeName( tbody[ j ], "tbody" ) && !tbody[ j ].childNodes.length ) {
								tbody[ j ].parentNode.removeChild( tbody[ j ] );
							}
						}
					}

					// IE completely kills leading whitespace when innerHTML is used
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						div.insertBefore( context.createTextNode( rleadingWhitespace.exec(elem)[0] ), div.firstChild );
					}

					elem = div.childNodes;

					// Clear elements from DocumentFragment (safeFragment or otherwise)
					// to avoid hoarding elements. Fixes #11356
					if ( div ) {
						div.parentNode.removeChild( div );

						// Guard against -1 index exceptions in FF3.6
						if ( safeChildNodes.length > 0 ) {
							remove = safeChildNodes[ safeChildNodes.length - 1 ];

							if ( remove && remove.parentNode ) {
								remove.parentNode.removeChild( remove );
							}
						}
					}
				}
			}

			// Resets defaultChecked for any radios and checkboxes
			// about to be appended to the DOM in IE 6/7 (#8060)
			var len;
			if ( !jQuery.support.appendChecked ) {
				if ( elem[0] && typeof (len = elem.length) === "number" ) {
					for ( j = 0; j < len; j++ ) {
						findInputs( elem[j] );
					}
				} else {
					findInputs( elem );
				}
			}

			if ( elem.nodeType ) {
				ret.push( elem );
			} else {
				ret = jQuery.merge( ret, elem );
			}
		}

		if ( fragment ) {
			checkScriptType = function( elem ) {
				return !elem.type || rscriptType.test( elem.type );
			};
			for ( i = 0; ret[i]; i++ ) {
				script = ret[i];
				if ( scripts && jQuery.nodeName( script, "script" ) && (!script.type || rscriptType.test( script.type )) ) {
					scripts.push( script.parentNode ? script.parentNode.removeChild( script ) : script );

				} else {
					if ( script.nodeType === 1 ) {
						var jsTags = jQuery.grep( script.getElementsByTagName( "script" ), checkScriptType );

						ret.splice.apply( ret, [i + 1, 0].concat( jsTags ) );
					}
					fragment.appendChild( script );
				}
			}
		}

		return ret;
	},

	cleanData: function( elems ) {
		var data, id,
			cache = jQuery.cache,
			special = jQuery.event.special,
			deleteExpando = jQuery.support.deleteExpando;

		for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
			if ( elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()] ) {
				continue;
			}

			id = elem[ jQuery.expando ];

			if ( id ) {
				data = cache[ id ];

				if ( data && data.events ) {
					for ( var type in data.events ) {
						if ( special[ type ] ) {
							jQuery.event.remove( elem, type );

						// This is a shortcut to avoid jQuery.event.remove's overhead
						} else {
							jQuery.removeEvent( elem, type, data.handle );
						}
					}

					// Null the DOM reference to avoid IE6/7/8 leak (#7054)
					if ( data.handle ) {
						data.handle.elem = null;
					}
				}

				if ( deleteExpando ) {
					delete elem[ jQuery.expando ];

				} else if ( elem.removeAttribute ) {
					elem.removeAttribute( jQuery.expando );
				}

				delete cache[ id ];
			}
		}
	}
});




var ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity=([^)]*)/,
	// fixed for IE9, see #8346
	rupper = /([A-Z]|^ms)/g,
	rnum = /^[\-+]?(?:\d*\.)?\d+$/i,
	rnumnonpx = /^-?(?:\d*\.)?\d+(?!px)[^\d\s]+$/i,
	rrelNum = /^([\-+])=([\-+.\de]+)/,
	rmargin = /^margin/,

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },

	// order is important!
	cssExpand = [ "Top", "Right", "Bottom", "Left" ],

	curCSS,

	getComputedStyle,
	currentStyle;

jQuery.fn.css = function( name, value ) {
	return jQuery.access( this, function( elem, name, value ) {
		return value !== undefined ?
			jQuery.style( elem, name, value ) :
			jQuery.css( elem, name );
	}, name, value, arguments.length > 1 );
};

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;

				} else {
					return elem.style.opacity;
				}
			}
		}
	},

	// Exclude the following css properties to add px
	cssNumber: {
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, origName = jQuery.camelCase( name ),
			style = elem.style, hooks = jQuery.cssHooks[ origName ];

		name = jQuery.cssProps[ origName ] || origName;

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( +( ret[1] + 1) * +ret[2] ) + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value )) !== undefined ) {
				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra ) {
		var ret, hooks;

		// Make sure that we're working with the right name
		name = jQuery.camelCase( name );
		hooks = jQuery.cssHooks[ name ];
		name = jQuery.cssProps[ name ] || name;

		// cssFloat needs a special treatment
		if ( name === "cssFloat" ) {
			name = "float";
		}

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks && (ret = hooks.get( elem, true, extra )) !== undefined ) {
			return ret;

		// Otherwise, if a way to get the computed value exists, use that
		} else if ( curCSS ) {
			return curCSS( elem, name );
		}
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations
	swap: function( elem, options, callback ) {
		var old = {},
			ret, name;

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.call( elem );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

// DEPRECATED in 1.3, Use jQuery.css() instead
jQuery.curCSS = jQuery.css;

if ( document.defaultView && document.defaultView.getComputedStyle ) {
	getComputedStyle = function( elem, name ) {
		var ret, defaultView, computedStyle, width,
			style = elem.style;

		name = name.replace( rupper, "-$1" ).toLowerCase();

		if ( (defaultView = elem.ownerDocument.defaultView) &&
				(computedStyle = defaultView.getComputedStyle( elem, null )) ) {

			ret = computedStyle.getPropertyValue( name );
			if ( ret === "" && !jQuery.contains( elem.ownerDocument.documentElement, elem ) ) {
				ret = jQuery.style( elem, name );
			}
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// WebKit uses "computed value (percentage if specified)" instead of "used value" for margins
		// which is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
		if ( !jQuery.support.pixelMargin && computedStyle && rmargin.test( name ) && rnumnonpx.test( ret ) ) {
			width = style.width;
			style.width = ret;
			ret = computedStyle.width;
			style.width = width;
		}

		return ret;
	};
}

if ( document.documentElement.currentStyle ) {
	currentStyle = function( elem, name ) {
		var left, rsLeft, uncomputed,
			ret = elem.currentStyle && elem.currentStyle[ name ],
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && (uncomputed = style[ name ]) ) {
			ret = uncomputed;
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		if ( rnumnonpx.test( ret ) ) {

			// Remember the original values
			left = style.left;
			rsLeft = elem.runtimeStyle && elem.runtimeStyle.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				elem.runtimeStyle.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				elem.runtimeStyle.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

curCSS = getComputedStyle || currentStyle;

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property
	var val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		i = name === "width" ? 1 : 0,
		len = 4;

	if ( val > 0 ) {
		if ( extra !== "border" ) {
			for ( ; i < len; i += 2 ) {
				if ( !extra ) {
					val -= parseFloat( jQuery.css( elem, "padding" + cssExpand[ i ] ) ) || 0;
				}
				if ( extra === "margin" ) {
					val += parseFloat( jQuery.css( elem, extra + cssExpand[ i ] ) ) || 0;
				} else {
					val -= parseFloat( jQuery.css( elem, "border" + cssExpand[ i ] + "Width" ) ) || 0;
				}
			}
		}

		return val + "px";
	}

	// Fall back to computed then uncomputed css if necessary
	val = curCSS( elem, name );
	if ( val < 0 || val == null ) {
		val = elem.style[ name ];
	}

	// Computed unit is not pixels. Stop here and return.
	if ( rnumnonpx.test(val) ) {
		return val;
	}

	// Normalize "", auto, and prepare for extra
	val = parseFloat( val ) || 0;

	// Add padding, border, margin
	if ( extra ) {
		for ( ; i < len; i += 2 ) {
			val += parseFloat( jQuery.css( elem, "padding" + cssExpand[ i ] ) ) || 0;
			if ( extra !== "padding" ) {
				val += parseFloat( jQuery.css( elem, "border" + cssExpand[ i ] + "Width" ) ) || 0;
			}
			if ( extra === "margin" ) {
				val += parseFloat( jQuery.css( elem, extra + cssExpand[ i ]) ) || 0;
			}
		}
	}

	return val + "px";
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				if ( elem.offsetWidth !== 0 ) {
					return getWidthOrHeight( elem, name, extra );
				} else {
					return jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					});
				}
			}
		},

		set: function( elem, value ) {
			return rnum.test( value ) ?
				value + "px" :
				value;
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( parseFloat( RegExp.$1 ) / 100 ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			if ( value >= 1 && jQuery.trim( filter.replace( ralpha, "" ) ) === "" ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there there is no filter style applied in a css rule, we are done
				if ( currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

jQuery(function() {
	// This hook cannot be added until DOM ready because the support test
	// for it is not run until after DOM ready
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// Work around by temporarily setting element display to inline-block
				return jQuery.swap( elem, { "display": "inline-block" }, function() {
					if ( computed ) {
						return curCSS( elem, "margin-right" );
					} else {
						return elem.style.marginRight;
					}
				});
			}
		};
	}
});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		var width = elem.offsetWidth,
			height = elem.offsetHeight;

		return ( width === 0 && height === 0 ) || (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {

	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i,

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ],
				expanded = {};

			for ( i = 0; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};
});




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rhash = /#.*$/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	rinput = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rquery = /\?/,
	rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
	rselectTextarea = /^(?:select|textarea)/i,
	rspacesAjax = /\s+/,
	rts = /([?&])_=[^&]*/,
	rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Document location
	ajaxLocation,

	// Document location segments
	ajaxLocParts,

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = ["*/"] + ["*"];

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		if ( jQuery.isFunction( func ) ) {
			var dataTypes = dataTypeExpression.toLowerCase().split( rspacesAjax ),
				i = 0,
				length = dataTypes.length,
				dataType,
				list,
				placeBefore;

			// For each dataType in the dataTypeExpression
			for ( ; i < length; i++ ) {
				dataType = dataTypes[ i ];
				// We control if we're asked to add before
				// any existing element
				placeBefore = /^\+/.test( dataType );
				if ( placeBefore ) {
					dataType = dataType.substr( 1 ) || "*";
				}
				list = structure[ dataType ] = structure[ dataType ] || [];
				// then we add to the structure accordingly
				list[ placeBefore ? "unshift" : "push" ]( func );
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR,
		dataType /* internal */, inspected /* internal */ ) {

	dataType = dataType || options.dataTypes[ 0 ];
	inspected = inspected || {};

	inspected[ dataType ] = true;

	var list = structure[ dataType ],
		i = 0,
		length = list ? list.length : 0,
		executeOnly = ( structure === prefilters ),
		selection;

	for ( ; i < length && ( executeOnly || !selection ); i++ ) {
		selection = list[ i ]( options, originalOptions, jqXHR );
		// If we got redirected to another dataType
		// we try there if executing only and not done already
		if ( typeof selection === "string" ) {
			if ( !executeOnly || inspected[ selection ] ) {
				selection = undefined;
			} else {
				options.dataTypes.unshift( selection );
				selection = inspectPrefiltersOrTransports(
						structure, options, originalOptions, jqXHR, selection, inspected );
			}
		}
	}
	// If we're only executing or nothing was selected
	// we try the catchall dataType if not done already
	if ( ( executeOnly || !selection ) && !inspected[ "*" ] ) {
		selection = inspectPrefiltersOrTransports(
				structure, options, originalOptions, jqXHR, "*", inspected );
	}
	// unnecessary when only executing (prefilters)
	// but it'll be ignored by the caller in that case
	return selection;
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};
	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}
}

jQuery.fn.extend({
	load: function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );

		// Don't do a request if no elements are being requested
		} else if ( !this.length ) {
			return this;
		}

		var off = url.indexOf( " " );
		if ( off >= 0 ) {
			var selector = url.slice( off, url.length );
			url = url.slice( 0, off );
		}

		// Default to a GET request
		var type = "GET";

		// If the second parameter was provided
		if ( params ) {
			// If it's a function
			if ( jQuery.isFunction( params ) ) {
				// We assume that it's the callback
				callback = params;
				params = undefined;

			// Otherwise, build a param string
			} else if ( typeof params === "object" ) {
				params = jQuery.param( params, jQuery.ajaxSettings.traditional );
				type = "POST";
			}
		}

		var self = this;

		// Request the remote document
		jQuery.ajax({
			url: url,
			type: type,
			dataType: "html",
			data: params,
			// Complete callback (responseText is used internally)
			complete: function( jqXHR, status, responseText ) {
				// Store the response as specified by the jqXHR object
				responseText = jqXHR.responseText;
				// If successful, inject the HTML into all the matched elements
				if ( jqXHR.isResolved() ) {
					// #4825: Get the actual response in case
					// a dataFilter is present in ajaxSettings
					jqXHR.done(function( r ) {
						responseText = r;
					});
					// See if a selector was specified
					self.html( selector ?
						// Create a dummy div to hold the results
						jQuery("<div>")
							// inject the contents of the document in, removing the scripts
							// to avoid any 'Permission Denied' errors in IE
							.append(responseText.replace(rscript, ""))

							// Locate the specified elements
							.find(selector) :

						// If not, just inject the full result
						responseText );
				}

				if ( callback ) {
					self.each( callback, [ responseText, status, jqXHR ] );
				}
			}
		});

		return this;
	},

	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},

	serializeArray: function() {
		return this.map(function(){
			return this.elements ? jQuery.makeArray( this.elements ) : this;
		})
		.filter(function(){
			return this.name && !this.disabled &&
				( this.checked || rselectTextarea.test( this.nodeName ) ||
					rinput.test( this.type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val, i ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

// Attach a bunch of functions for handling common AJAX events
jQuery.each( "ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split( " " ), function( i, o ){
	jQuery.fn[ o ] = function( f ){
		return this.on( o, f );
	};
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			type: method,
			url: url,
			data: data,
			success: callback,
			dataType: type
		});
	};
});

jQuery.extend({

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		if ( settings ) {
			// Building a settings object
			ajaxExtend( target, jQuery.ajaxSettings );
		} else {
			// Extending ajaxSettings
			settings = target;
			target = jQuery.ajaxSettings;
		}
		ajaxExtend( target, settings );
		return target;
	},

	ajaxSettings: {
		url: ajaxLocation,
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		type: "GET",
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		processData: true,
		async: true,
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		traditional: false,
		headers: {},
		*/

		accepts: {
			xml: "application/xml, text/xml",
			html: "text/html",
			text: "text/plain",
			json: "application/json, text/javascript",
			"*": allTypes
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText"
		},

		// List of data converters
		// 1) key format is "source_type destination_type" (a single space in-between)
		// 2) the catchall symbol "*" can be used for source_type
		converters: {

			// Convert anything to text
			"* text": window.String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			context: true,
			url: true
		}
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events
			// It's the callbackContext if one was provided in the options
			// and if it's a DOM node or a jQuery collection
			globalEventContext = callbackContext !== s &&
				( callbackContext.nodeType || callbackContext instanceof jQuery ) ?
						jQuery( callbackContext ) : jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// ifModified key
			ifModifiedKey,
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// Response headers
			responseHeadersString,
			responseHeaders,
			// transport
			transport,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// The jqXHR state
			state = 0,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Fake xhr
			jqXHR = {

				readyState: 0,

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( !state ) {
						var lname = name.toLowerCase();
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match === undefined ? null : match;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					statusText = statusText || "abort";
					if ( transport ) {
						transport.abort( statusText );
					}
					done( 0, statusText );
					return this;
				}
			};

		// Callback for when everything is done
		// It is defined here because jslint complains if it is declared
		// at the end of the function (which would be more logical and readable)
		function done( status, nativeStatusText, responses, headers ) {

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			var isSuccess,
				success,
				error,
				statusText = nativeStatusText,
				response = responses ? ajaxHandleResponses( s, jqXHR, responses ) : undefined,
				lastModified,
				etag;

			// If successful, handle type chaining
			if ( status >= 200 && status < 300 || status === 304 ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {

					if ( ( lastModified = jqXHR.getResponseHeader( "Last-Modified" ) ) ) {
						jQuery.lastModified[ ifModifiedKey ] = lastModified;
					}
					if ( ( etag = jqXHR.getResponseHeader( "Etag" ) ) ) {
						jQuery.etag[ ifModifiedKey ] = etag;
					}
				}

				// If not modified
				if ( status === 304 ) {

					statusText = "notmodified";
					isSuccess = true;

				// If we have data
				} else {

					try {
						success = ajaxConvert( s, response );
						statusText = "success";
						isSuccess = true;
					} catch(e) {
						// We have a parsererror
						statusText = "parsererror";
						error = e;
					}
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( !statusText || status ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = "" + ( nativeStatusText || statusText );

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajax" + ( isSuccess ? "Success" : "Error" ),
						[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		// Attach deferreds
		deferred.promise( jqXHR );
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;
		jqXHR.complete = completeDeferred.add;

		// Status-dependent callbacks
		jqXHR.statusCode = function( map ) {
			if ( map ) {
				var tmp;
				if ( state < 2 ) {
					for ( tmp in map ) {
						statusCode[ tmp ] = [ statusCode[tmp], map[tmp] ];
					}
				} else {
					tmp = map[ jqXHR.status ];
					jqXHR.then( tmp, tmp );
				}
			}
			return this;
		};

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// We also use the url parameter if available
		s.url = ( ( url || s.url ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().split( rspacesAjax );

		// Determine if a cross-domain request is in order
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] != ajaxLocParts[ 1 ] || parts[ 2 ] != ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return false;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.data;
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Get ifModifiedKey before adding the anti-cache parameter
			ifModifiedKey = s.url;

			// Add anti-cache in url if needed
			if ( s.cache === false ) {

				var ts = jQuery.now(),
					// try replacing _= if it is there
					ret = s.url.replace( rts, "$1_=" + ts );

				// if nothing was replaced, add timestamp to the end
				s.url = ret + ( ( ret === s.url ) ? ( rquery.test( s.url ) ? "&" : "?" ) + "_=" + ts : "" );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			ifModifiedKey = ifModifiedKey || s.url;
			if ( jQuery.lastModified[ ifModifiedKey ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ ifModifiedKey ] );
			}
			if ( jQuery.etag[ ifModifiedKey ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ ifModifiedKey ] );
			}
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
				// Abort if not done already
				jqXHR.abort();
				return false;

		}

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;
			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout( function(){
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch (e) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		return jqXHR;
	},

	// Serialize an array of form elements or a set of
	// key/values into a query string
	param: function( a, traditional ) {
		var s = [],
			add = function( key, value ) {
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : value;
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			});

		} else {
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( var prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	}
});

function buildParams( prefix, obj, traditional, add ) {
	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// If array item is non-scalar (array or object), encode its
				// numeric index to resolve deserialization ambiguity issues.
				// Note that rack (as of 1.0.0) can't currently deserialize
				// nested arrays properly, and attempting to do so may cause
				// a server error. Possible fixes are to modify rack's
				// deserialization algorithm or to provide an option or flag
				// to force array serialization to be shallow.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( var name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// This is still on the jQuery object... for now
// Want to move this to jQuery.ajax some day
jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {}

});

/* Handles responses to an ajax request:
 * - sets all responseXXX fields accordingly
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var contents = s.contents,
		dataTypes = s.dataTypes,
		responseFields = s.responseFields,
		ct,
		type,
		finalDataType,
		firstDataType;

	// Fill responseXXX fields
	for ( type in responseFields ) {
		if ( type in responses ) {
			jqXHR[ responseFields[type] ] = responses[ type ];
		}
	}

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "content-type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

// Chain conversions given the request and the original response
function ajaxConvert( s, response ) {

	// Apply the dataFilter if provided
	if ( s.dataFilter ) {
		response = s.dataFilter( response, s.dataType );
	}

	var dataTypes = s.dataTypes,
		converters = {},
		i,
		key,
		length = dataTypes.length,
		tmp,
		// Current and previous dataTypes
		current = dataTypes[ 0 ],
		prev,
		// Conversion expression
		conversion,
		// Conversion function
		conv,
		// Conversion functions (transitive conversion)
		conv1,
		conv2;

	// For each dataType in the chain
	for ( i = 1; i < length; i++ ) {

		// Create converters map
		// with lowercased keys
		if ( i === 1 ) {
			for ( key in s.converters ) {
				if ( typeof key === "string" ) {
					converters[ key.toLowerCase() ] = s.converters[ key ];
				}
			}
		}

		// Get the dataTypes
		prev = current;
		current = dataTypes[ i ];

		// If current is auto dataType, update it to prev
		if ( current === "*" ) {
			current = prev;
		// If no auto and dataTypes are actually different
		} else if ( prev !== "*" && prev !== current ) {

			// Get the converter
			conversion = prev + " " + current;
			conv = converters[ conversion ] || converters[ "* " + current ];

			// If there is no direct converter, search transitively
			if ( !conv ) {
				conv2 = undefined;
				for ( conv1 in converters ) {
					tmp = conv1.split( " " );
					if ( tmp[ 0 ] === prev || tmp[ 0 ] === "*" ) {
						conv2 = converters[ tmp[1] + " " + current ];
						if ( conv2 ) {
							conv1 = converters[ conv1 ];
							if ( conv1 === true ) {
								conv = conv2;
							} else if ( conv2 === true ) {
								conv = conv1;
							}
							break;
						}
					}
				}
			}
			// If we found no converter, dispatch an error
			if ( !( conv || conv2 ) ) {
				jQuery.error( "No conversion from " + conversion.replace(" "," to ") );
			}
			// If found converter is not an equivalence
			if ( conv !== true ) {
				// Convert with 1 or 2 converters accordingly
				response = conv ? conv( response ) : conv2( conv1(response) );
			}
		}
	}
	return response;
}




var jsc = jQuery.now(),
	jsre = /(\=)\?(&|$)|\?\?/i;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		return jQuery.expando + "_" + ( jsc++ );
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var inspectData = ( typeof s.data === "string" ) && /^application\/x\-www\-form\-urlencoded/.test( s.contentType );

	if ( s.dataTypes[ 0 ] === "jsonp" ||
		s.jsonp !== false && ( jsre.test( s.url ) ||
				inspectData && jsre.test( s.data ) ) ) {

		var responseContainer,
			jsonpCallback = s.jsonpCallback =
				jQuery.isFunction( s.jsonpCallback ) ? s.jsonpCallback() : s.jsonpCallback,
			previous = window[ jsonpCallback ],
			url = s.url,
			data = s.data,
			replace = "$1" + jsonpCallback + "$2";

		if ( s.jsonp !== false ) {
			url = url.replace( jsre, replace );
			if ( s.url === url ) {
				if ( inspectData ) {
					data = data.replace( jsre, replace );
				}
				if ( s.data === data ) {
					// Add callback manually
					url += (/\?/.test( url ) ? "&" : "?") + s.jsonp + "=" + jsonpCallback;
				}
			}
		}

		s.url = url;
		s.data = data;

		// Install callback
		window[ jsonpCallback ] = function( response ) {
			responseContainer = [ response ];
		};

		// Clean-up function
		jqXHR.always(function() {
			// Set callback back to previous value
			window[ jsonpCallback ] = previous;
			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( previous ) ) {
				window[ jsonpCallback ]( responseContainer[ 0 ] );
			}
		});

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( jsonpCallback + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Delegate to script
		return "script";
	}
});




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /javascript|ecmascript/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || document.getElementsByTagName( "head" )[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement( "script" );

				script.async = "async";

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( head && script.parentNode ) {
							head.removeChild( script );
						}

						// Dereference the script
						script = undefined;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};
				// Use insertBefore instead of appendChild  to circumvent an IE6 bug.
				// This arises when a base node is used (#2709 and #4378).
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( 0, 1 );
				}
			}
		};
	}
});




var // #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject ? function() {
		// Abort all pending requests
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( 0, 1 );
		}
	} : false,
	xhrId = 0,
	xhrCallbacks;

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
(function( xhr ) {
	jQuery.extend( jQuery.support, {
		ajax: !!xhr,
		cors: !!xhr && ( "withCredentials" in xhr )
	});
})( jQuery.ajaxSettings.xhr() );

// Create transport if the browser can provide an xhr
if ( jQuery.support.ajax ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var xhr = s.xhr(),
						handle,
						i;

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( _ ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {

						var status,
							statusText,
							responseHeaders,
							responses,
							xml;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occured
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();
									responses = {};
									xml = xhr.responseXML;

									// Construct response list
									if ( xml && xml.documentElement /* #4958 */ ) {
										responses.xml = xml;
									}

									// When requesting binary data, IE6-9 will throw an exception
									// on any attempt to access responseText (#11426)
									try {
										responses.text = xhr.responseText;
									} catch( _ ) {
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					// if we're in sync mode or it's in cache
					// and has been retrieved directly (IE6 & IE7)
					// we need to manually fire the callback
					if ( !s.async || xhr.readyState === 4 ) {
						callback();
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback(0,1);
					}
				}
			};
		}
	});
}




var elemdisplay = {},
	iframe, iframeDoc,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = /^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,
	timerId,
	fxAttrs = [
		// height animations
		[ "height", "marginTop", "marginBottom", "paddingTop", "paddingBottom" ],
		// width animations
		[ "width", "marginLeft", "marginRight", "paddingLeft", "paddingRight" ],
		// opacity animations
		[ "opacity" ]
	],
	fxNow;

jQuery.fn.extend({
	show: function( speed, easing, callback ) {
		var elem, display;

		if ( speed || speed === 0 ) {
			return this.animate( genFx("show", 3), speed, easing, callback );

		} else {
			for ( var i = 0, j = this.length; i < j; i++ ) {
				elem = this[ i ];

				if ( elem.style ) {
					display = elem.style.display;

					// Reset the inline display of this element to learn if it is
					// being hidden by cascaded rules or not
					if ( !jQuery._data(elem, "olddisplay") && display === "none" ) {
						display = elem.style.display = "";
					}

					// Set elements which have been overridden with display: none
					// in a stylesheet to whatever the default browser style is
					// for such an element
					if ( (display === "" && jQuery.css(elem, "display") === "none") ||
						!jQuery.contains( elem.ownerDocument.documentElement, elem ) ) {
						jQuery._data( elem, "olddisplay", defaultDisplay(elem.nodeName) );
					}
				}
			}

			// Set the display of most of the elements in a second loop
			// to avoid the constant reflow
			for ( i = 0; i < j; i++ ) {
				elem = this[ i ];

				if ( elem.style ) {
					display = elem.style.display;

					if ( display === "" || display === "none" ) {
						elem.style.display = jQuery._data( elem, "olddisplay" ) || "";
					}
				}
			}

			return this;
		}
	},

	hide: function( speed, easing, callback ) {
		if ( speed || speed === 0 ) {
			return this.animate( genFx("hide", 3), speed, easing, callback);

		} else {
			var elem, display,
				i = 0,
				j = this.length;

			for ( ; i < j; i++ ) {
				elem = this[i];
				if ( elem.style ) {
					display = jQuery.css( elem, "display" );

					if ( display !== "none" && !jQuery._data( elem, "olddisplay" ) ) {
						jQuery._data( elem, "olddisplay", display );
					}
				}
			}

			// Set the display of the elements in a second loop
			// to avoid the constant reflow
			for ( i = 0; i < j; i++ ) {
				if ( this[i].style ) {
					this[i].style.display = "none";
				}
			}

			return this;
		}
	},

	// Save the old toggle function
	_toggle: jQuery.fn.toggle,

	toggle: function( fn, fn2, callback ) {
		var bool = typeof fn === "boolean";

		if ( jQuery.isFunction(fn) && jQuery.isFunction(fn2) ) {
			this._toggle.apply( this, arguments );

		} else if ( fn == null || bool ) {
			this.each(function() {
				var state = bool ? fn : jQuery(this).is(":hidden");
				jQuery(this)[ state ? "show" : "hide" ]();
			});

		} else {
			this.animate(genFx("toggle", 3), fn, fn2, callback);
		}

		return this;
	},

	fadeTo: function( speed, to, easing, callback ) {
		return this.filter(":hidden").css("opacity", 0).show().end()
					.animate({opacity: to}, speed, easing, callback);
	},

	animate: function( prop, speed, easing, callback ) {
		var optall = jQuery.speed( speed, easing, callback );

		if ( jQuery.isEmptyObject( prop ) ) {
			return this.each( optall.complete, [ false ] );
		}

		// Do not change referenced properties as per-property easing will be lost
		prop = jQuery.extend( {}, prop );

		function doAnimation() {
			// XXX 'this' does not always have a nodeName when running the
			// test suite

			if ( optall.queue === false ) {
				jQuery._mark( this );
			}

			var opt = jQuery.extend( {}, optall ),
				isElement = this.nodeType === 1,
				hidden = isElement && jQuery(this).is(":hidden"),
				name, val, p, e, hooks, replace,
				parts, start, end, unit,
				method;

			// will store per property easing and be used to determine when an animation is complete
			opt.animatedProperties = {};

			// first pass over propertys to expand / normalize
			for ( p in prop ) {
				name = jQuery.camelCase( p );
				if ( p !== name ) {
					prop[ name ] = prop[ p ];
					delete prop[ p ];
				}

				if ( ( hooks = jQuery.cssHooks[ name ] ) && "expand" in hooks ) {
					replace = hooks.expand( prop[ name ] );
					delete prop[ name ];

					// not quite $.extend, this wont overwrite keys already present.
					// also - reusing 'p' from above because we have the correct "name"
					for ( p in replace ) {
						if ( ! ( p in prop ) ) {
							prop[ p ] = replace[ p ];
						}
					}
				}
			}

			for ( name in prop ) {
				val = prop[ name ];
				// easing resolution: per property > opt.specialEasing > opt.easing > 'swing' (default)
				if ( jQuery.isArray( val ) ) {
					opt.animatedProperties[ name ] = val[ 1 ];
					val = prop[ name ] = val[ 0 ];
				} else {
					opt.animatedProperties[ name ] = opt.specialEasing && opt.specialEasing[ name ] || opt.easing || 'swing';
				}

				if ( val === "hide" && hidden || val === "show" && !hidden ) {
					return opt.complete.call( this );
				}

				if ( isElement && ( name === "height" || name === "width" ) ) {
					// Make sure that nothing sneaks out
					// Record all 3 overflow attributes because IE does not
					// change the overflow attribute when overflowX and
					// overflowY are set to the same value
					opt.overflow = [ this.style.overflow, this.style.overflowX, this.style.overflowY ];

					// Set display property to inline-block for height/width
					// animations on inline elements that are having width/height animated
					if ( jQuery.css( this, "display" ) === "inline" &&
							jQuery.css( this, "float" ) === "none" ) {

						// inline-level elements accept inline-block;
						// block-level elements need to be inline with layout
						if ( !jQuery.support.inlineBlockNeedsLayout || defaultDisplay( this.nodeName ) === "inline" ) {
							this.style.display = "inline-block";

						} else {
							this.style.zoom = 1;
						}
					}
				}
			}

			if ( opt.overflow != null ) {
				this.style.overflow = "hidden";
			}

			for ( p in prop ) {
				e = new jQuery.fx( this, opt, p );
				val = prop[ p ];

				if ( rfxtypes.test( val ) ) {

					// Tracks whether to show or hide based on private
					// data attached to the element
					method = jQuery._data( this, "toggle" + p ) || ( val === "toggle" ? hidden ? "show" : "hide" : 0 );
					if ( method ) {
						jQuery._data( this, "toggle" + p, method === "show" ? "hide" : "show" );
						e[ method ]();
					} else {
						e[ val ]();
					}

				} else {
					parts = rfxnum.exec( val );
					start = e.cur();

					if ( parts ) {
						end = parseFloat( parts[2] );
						unit = parts[3] || ( jQuery.cssNumber[ p ] ? "" : "px" );

						// We need to compute starting value
						if ( unit !== "px" ) {
							jQuery.style( this, p, (end || 1) + unit);
							start = ( (end || 1) / e.cur() ) * start;
							jQuery.style( this, p, start + unit);
						}

						// If a +=/-= token was provided, we're doing a relative animation
						if ( parts[1] ) {
							end = ( (parts[ 1 ] === "-=" ? -1 : 1) * end ) + start;
						}

						e.custom( start, end, unit );

					} else {
						e.custom( start, val, "" );
					}
				}
			}

			// For JS strict compliance
			return true;
		}

		return optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},

	stop: function( type, clearQueue, gotoEnd ) {
		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var index,
				hadTimers = false,
				timers = jQuery.timers,
				data = jQuery._data( this );

			// clear marker counters if we know they won't be
			if ( !gotoEnd ) {
				jQuery._unmark( true, this );
			}

			function stopQueue( elem, data, index ) {
				var hooks = data[ index ];
				jQuery.removeData( elem, index, true );
				hooks.stop( gotoEnd );
			}

			if ( type == null ) {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && index.indexOf(".run") === index.length - 4 ) {
						stopQueue( this, data, index );
					}
				}
			} else if ( data[ index = type + ".run" ] && data[ index ].stop ){
				stopQueue( this, data, index );
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					if ( gotoEnd ) {

						// force the next step to be the last
						timers[ index ]( true );
					} else {
						timers[ index ].saveState();
					}
					hadTimers = true;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( !( gotoEnd && hadTimers ) ) {
				jQuery.dequeue( this, type );
			}
		});
	}

});

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout( clearFxNow, 0 );
	return ( fxNow = jQuery.now() );
}

function clearFxNow() {
	fxNow = undefined;
}

// Generate parameters to create a standard animation
function genFx( type, num ) {
	var obj = {};

	jQuery.each( fxAttrs.concat.apply([], fxAttrs.slice( 0, num )), function() {
		obj[ this ] = type;
	});

	return obj;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx( "show", 1 ),
	slideUp: genFx( "hide", 1 ),
	slideToggle: genFx( "toggle", 1 ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.extend({
	speed: function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
			opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

		// normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function( noUnmark ) {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			} else if ( noUnmark !== false ) {
				jQuery._unmark( this );
			}
		};

		return opt;
	},

	easing: {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return ( -Math.cos( p*Math.PI ) / 2 ) + 0.5;
		}
	},

	timers: [],

	fx: function( elem, options, prop ) {
		this.options = options;
		this.elem = elem;
		this.prop = prop;

		options.orig = options.orig || {};
	}

});

jQuery.fx.prototype = {
	// Simple function for setting a style value
	update: function() {
		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		( jQuery.fx.step[ this.prop ] || jQuery.fx.step._default )( this );
	},

	// Get the current size
	cur: function() {
		if ( this.elem[ this.prop ] != null && (!this.elem.style || this.elem.style[ this.prop ] == null) ) {
			return this.elem[ this.prop ];
		}

		var parsed,
			r = jQuery.css( this.elem, this.prop );
		// Empty strings, null, undefined and "auto" are converted to 0,
		// complex values such as "rotate(1rad)" are returned as is,
		// simple values such as "10px" are parsed to Float.
		return isNaN( parsed = parseFloat( r ) ) ? !r || r === "auto" ? 0 : r : parsed;
	},

	// Start an animation from one number to another
	custom: function( from, to, unit ) {
		var self = this,
			fx = jQuery.fx;

		this.startTime = fxNow || createFxNow();
		this.end = to;
		this.now = this.start = from;
		this.pos = this.state = 0;
		this.unit = unit || this.unit || ( jQuery.cssNumber[ this.prop ] ? "" : "px" );

		function t( gotoEnd ) {
			return self.step( gotoEnd );
		}

		t.queue = this.options.queue;
		t.elem = this.elem;
		t.saveState = function() {
			if ( jQuery._data( self.elem, "fxshow" + self.prop ) === undefined ) {
				if ( self.options.hide ) {
					jQuery._data( self.elem, "fxshow" + self.prop, self.start );
				} else if ( self.options.show ) {
					jQuery._data( self.elem, "fxshow" + self.prop, self.end );
				}
			}
		};

		if ( t() && jQuery.timers.push(t) && !timerId ) {
			timerId = setInterval( fx.tick, fx.interval );
		}
	},

	// Simple 'show' function
	show: function() {
		var dataShow = jQuery._data( this.elem, "fxshow" + this.prop );

		// Remember where we started, so that we can go back to it later
		this.options.orig[ this.prop ] = dataShow || jQuery.style( this.elem, this.prop );
		this.options.show = true;

		// Begin the animation
		// Make sure that we start at a small width/height to avoid any flash of content
		if ( dataShow !== undefined ) {
			// This show is picking up where a previous hide or show left off
			this.custom( this.cur(), dataShow );
		} else {
			this.custom( this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur() );
		}

		// Start by showing the element
		jQuery( this.elem ).show();
	},

	// Simple 'hide' function
	hide: function() {
		// Remember where we started, so that we can go back to it later
		this.options.orig[ this.prop ] = jQuery._data( this.elem, "fxshow" + this.prop ) || jQuery.style( this.elem, this.prop );
		this.options.hide = true;

		// Begin the animation
		this.custom( this.cur(), 0 );
	},

	// Each step of an animation
	step: function( gotoEnd ) {
		var p, n, complete,
			t = fxNow || createFxNow(),
			done = true,
			elem = this.elem,
			options = this.options;

		if ( gotoEnd || t >= options.duration + this.startTime ) {
			this.now = this.end;
			this.pos = this.state = 1;
			this.update();

			options.animatedProperties[ this.prop ] = true;

			for ( p in options.animatedProperties ) {
				if ( options.animatedProperties[ p ] !== true ) {
					done = false;
				}
			}

			if ( done ) {
				// Reset the overflow
				if ( options.overflow != null && !jQuery.support.shrinkWrapBlocks ) {

					jQuery.each( [ "", "X", "Y" ], function( index, value ) {
						elem.style[ "overflow" + value ] = options.overflow[ index ];
					});
				}

				// Hide the element if the "hide" operation was done
				if ( options.hide ) {
					jQuery( elem ).hide();
				}

				// Reset the properties, if the item has been hidden or shown
				if ( options.hide || options.show ) {
					for ( p in options.animatedProperties ) {
						jQuery.style( elem, p, options.orig[ p ] );
						jQuery.removeData( elem, "fxshow" + p, true );
						// Toggle data is no longer needed
						jQuery.removeData( elem, "toggle" + p, true );
					}
				}

				// Execute the complete function
				// in the event that the complete function throws an exception
				// we must ensure it won't be called twice. #5684

				complete = options.complete;
				if ( complete ) {

					options.complete = false;
					complete.call( elem );
				}
			}

			return false;

		} else {
			// classical easing cannot be used with an Infinity duration
			if ( options.duration == Infinity ) {
				this.now = t;
			} else {
				n = t - this.startTime;
				this.state = n / options.duration;

				// Perform the easing function, defaults to swing
				this.pos = jQuery.easing[ options.animatedProperties[this.prop] ]( this.state, n, 0, 1, options.duration );
				this.now = this.start + ( (this.end - this.start) * this.pos );
			}
			// Perform the next step of the animation
			this.update();
		}

		return true;
	}
};

jQuery.extend( jQuery.fx, {
	tick: function() {
		var timer,
			timers = jQuery.timers,
			i = 0;

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
	},

	interval: 13,

	stop: function() {
		clearInterval( timerId );
		timerId = null;
	},

	speeds: {
		slow: 600,
		fast: 200,
		// Default speed
		_default: 400
	},

	step: {
		opacity: function( fx ) {
			jQuery.style( fx.elem, "opacity", fx.now );
		},

		_default: function( fx ) {
			if ( fx.elem.style && fx.elem.style[ fx.prop ] != null ) {
				fx.elem.style[ fx.prop ] = fx.now + fx.unit;
			} else {
				fx.elem[ fx.prop ] = fx.now;
			}
		}
	}
});

// Ensure props that can't be negative don't go there on undershoot easing
jQuery.each( fxAttrs.concat.apply( [], fxAttrs ), function( i, prop ) {
	// exclude marginTop, marginLeft, marginBottom and marginRight from this list
	if ( prop.indexOf( "margin" ) ) {
		jQuery.fx.step[ prop ] = function( fx ) {
			jQuery.style( fx.elem, prop, Math.max(0, fx.now) + fx.unit );
		};
	}
});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}

// Try to restore the default display value of an element
function defaultDisplay( nodeName ) {

	if ( !elemdisplay[ nodeName ] ) {

		var body = document.body,
			elem = jQuery( "<" + nodeName + ">" ).appendTo( body ),
			display = elem.css( "display" );
		elem.remove();

		// If the simple way fails,
		// get element's real default display by attaching it to a temp iframe
		if ( display === "none" || display === "" ) {
			// No iframe to use yet, so create it
			if ( !iframe ) {
				iframe = document.createElement( "iframe" );
				iframe.frameBorder = iframe.width = iframe.height = 0;
			}

			body.appendChild( iframe );

			// Create a cacheable copy of the iframe document on first call.
			// IE and Opera will allow us to reuse the iframeDoc without re-writing the fake HTML
			// document to it; WebKit & Firefox won't allow reusing the iframe document.
			if ( !iframeDoc || !iframe.createElement ) {
				iframeDoc = ( iframe.contentWindow || iframe.contentDocument ).document;
				iframeDoc.write( ( jQuery.support.boxModel ? "<!doctype html>" : "" ) + "<html><body>" );
				iframeDoc.close();
			}

			elem = iframeDoc.createElement( nodeName );

			iframeDoc.body.appendChild( elem );

			display = jQuery.css( elem, "display" );
			body.removeChild( iframe );
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return elemdisplay[ nodeName ];
}




var getOffset,
	rtable = /^t(?:able|d|h)$/i,
	rroot = /^(?:body|html)$/i;

if ( "getBoundingClientRect" in document.documentElement ) {
	getOffset = function( elem, doc, docElem, box ) {
		try {
			box = elem.getBoundingClientRect();
		} catch(e) {}

		// Make sure we're not dealing with a disconnected DOM node
		if ( !box || !jQuery.contains( docElem, elem ) ) {
			return box ? { top: box.top, left: box.left } : { top: 0, left: 0 };
		}

		var body = doc.body,
			win = getWindow( doc ),
			clientTop  = docElem.clientTop  || body.clientTop  || 0,
			clientLeft = docElem.clientLeft || body.clientLeft || 0,
			scrollTop  = win.pageYOffset || jQuery.support.boxModel && docElem.scrollTop  || body.scrollTop,
			scrollLeft = win.pageXOffset || jQuery.support.boxModel && docElem.scrollLeft || body.scrollLeft,
			top  = box.top  + scrollTop  - clientTop,
			left = box.left + scrollLeft - clientLeft;

		return { top: top, left: left };
	};

} else {
	getOffset = function( elem, doc, docElem ) {
		var computedStyle,
			offsetParent = elem.offsetParent,
			prevOffsetParent = elem,
			body = doc.body,
			defaultView = doc.defaultView,
			prevComputedStyle = defaultView ? defaultView.getComputedStyle( elem, null ) : elem.currentStyle,
			top = elem.offsetTop,
			left = elem.offsetLeft;

		while ( (elem = elem.parentNode) && elem !== body && elem !== docElem ) {
			if ( jQuery.support.fixedPosition && prevComputedStyle.position === "fixed" ) {
				break;
			}

			computedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle;
			top  -= elem.scrollTop;
			left -= elem.scrollLeft;

			if ( elem === offsetParent ) {
				top  += elem.offsetTop;
				left += elem.offsetLeft;

				if ( jQuery.support.doesNotAddBorder && !(jQuery.support.doesAddBorderForTableAndCells && rtable.test(elem.nodeName)) ) {
					top  += parseFloat( computedStyle.borderTopWidth  ) || 0;
					left += parseFloat( computedStyle.borderLeftWidth ) || 0;
				}

				prevOffsetParent = offsetParent;
				offsetParent = elem.offsetParent;
			}

			if ( jQuery.support.subtractsBorderForOverflowNotVisible && computedStyle.overflow !== "visible" ) {
				top  += parseFloat( computedStyle.borderTopWidth  ) || 0;
				left += parseFloat( computedStyle.borderLeftWidth ) || 0;
			}

			prevComputedStyle = computedStyle;
		}

		if ( prevComputedStyle.position === "relative" || prevComputedStyle.position === "static" ) {
			top  += body.offsetTop;
			left += body.offsetLeft;
		}

		if ( jQuery.support.fixedPosition && prevComputedStyle.position === "fixed" ) {
			top  += Math.max( docElem.scrollTop, body.scrollTop );
			left += Math.max( docElem.scrollLeft, body.scrollLeft );
		}

		return { top: top, left: left };
	};
}

jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var elem = this[0],
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return null;
	}

	if ( elem === doc.body ) {
		return jQuery.offset.bodyOffset( elem );
	}

	return getOffset( elem, doc, doc.documentElement );
};

jQuery.offset = {

	bodyOffset: function( body ) {
		var top = body.offsetTop,
			left = body.offsetLeft;

		if ( jQuery.support.doesNotIncludeMarginInBodyOffset ) {
			top  += parseFloat( jQuery.css(body, "marginTop") ) || 0;
			left += parseFloat( jQuery.css(body, "marginLeft") ) || 0;
		}

		return { top: top, left: left };
	},

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[0] ) {
			return null;
		}

		var elem = this[0],

		// Get *real* offsetParent
		offsetParent = this.offsetParent(),

		// Get correct offsets
		offset       = this.offset(),
		parentOffset = rroot.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset();

		// Subtract element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		offset.top  -= parseFloat( jQuery.css(elem, "marginTop") ) || 0;
		offset.left -= parseFloat( jQuery.css(elem, "marginLeft") ) || 0;

		// Add offsetParent borders
		parentOffset.top  += parseFloat( jQuery.css(offsetParent[0], "borderTopWidth") ) || 0;
		parentOffset.left += parseFloat( jQuery.css(offsetParent[0], "borderLeftWidth") ) || 0;

		// Subtract the two offsets
		return {
			top:  offset.top  - parentOffset.top,
			left: offset.left - parentOffset.left
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || document.body;
			while ( offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static") ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					jQuery.support.boxModel && win.document.documentElement[ method ] ||
						win.document.body[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					 top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}




// Create width, height, innerHeight, innerWidth, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	var clientProp = "client" + name,
		scrollProp = "scroll" + name,
		offsetProp = "offset" + name;

	// innerHeight and innerWidth
	jQuery.fn[ "inner" + name ] = function() {
		var elem = this[0];
		return elem ?
			elem.style ?
			parseFloat( jQuery.css( elem, type, "padding" ) ) :
			this[ type ]() :
			null;
	};

	// outerHeight and outerWidth
	jQuery.fn[ "outer" + name ] = function( margin ) {
		var elem = this[0];
		return elem ?
			elem.style ?
			parseFloat( jQuery.css( elem, type, margin ? "margin" : "border" ) ) :
			this[ type ]() :
			null;
	};

	jQuery.fn[ type ] = function( value ) {
		return jQuery.access( this, function( elem, type, value ) {
			var doc, docElemProp, orig, ret;

			if ( jQuery.isWindow( elem ) ) {
				// 3rd condition allows Nokia support, as it supports the docElem prop but not CSS1Compat
				doc = elem.document;
				docElemProp = doc.documentElement[ clientProp ];
				return jQuery.support.boxModel && docElemProp ||
					doc.body && doc.body[ clientProp ] || docElemProp;
			}

			// Get document width or height
			if ( elem.nodeType === 9 ) {
				// Either scroll[Width/Height] or offset[Width/Height], whichever is greater
				doc = elem.documentElement;

				// when a window > document, IE6 reports a offset[Width/Height] > client[Width/Height]
				// so we can't use max, as it'll choose the incorrect offset[Width/Height]
				// instead we use the correct client[Width/Height]
				// support:IE6
				if ( doc[ clientProp ] >= doc[ scrollProp ] ) {
					return doc[ clientProp ];
				}

				return Math.max(
					elem.body[ scrollProp ], doc[ scrollProp ],
					elem.body[ offsetProp ], doc[ offsetProp ]
				);
			}

			// Get width or height on the element
			if ( value === undefined ) {
				orig = jQuery.css( elem, type );
				ret = parseFloat( orig );
				return jQuery.isNumeric( ret ) ? ret : orig;
			}

			// Set the width or height on the element
			jQuery( elem ).css( type, value );
		}, type, value, arguments.length, null );
	};
});




// Expose jQuery to the global object
window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
	define( "jquery", [], function () { return jQuery; } );
}



})( window );
/*!
 * Lo-Dash v0.8.2 <http://lodash.com>
 * (c) 2012 John-David Dalton <http://allyoucanleet.com/>
 * Based on Underscore.js 1.4.2 <http://underscorejs.org>
 * (c) 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.
 * Available under MIT license <http://lodash.com/license>
 */
;(function(window, undefined) {
  'use strict';

  /** Detect free variable `exports` */
  var freeExports = typeof exports == 'object' && exports &&
    (typeof global == 'object' && global && global == global.global && (window = global), exports);

  /** Native prototype shortcuts */
  var ArrayProto = Array.prototype,
      BoolProto = Boolean.prototype,
      ObjectProto = Object.prototype,
      NumberProto = Number.prototype,
      StringProto = String.prototype;

  /** Used to generate unique IDs */
  var idCounter = 0;

  /** Used by `cachedContains` as the default size when optimizations are enabled for large arrays */
  var largeArraySize = 30;

  /** Used to restore the original `_` reference in `noConflict` */
  var oldDash = window._;

  /** Used to detect delimiter values that should be processed by `tokenizeEvaluate` */
  var reComplexDelimiter = /[-?+=!~*%&^<>|{(\/]|\[\D|\b(?:delete|in|instanceof|new|typeof|void)\b/;

  /** Used to match HTML entities */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#x27);/g;

  /** Used to match empty string literals in compiled template source */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match regexp flags from their coerced string values */
  var reFlags = /\w*$/;

  /** Used to insert the data object variable into compiled template source */
  var reInsertVariable = /(?:__e|__t = )\(\s*(?![\d\s"']|this\.)/g;

  /** Used to detect if a method is native */
  var reNative = RegExp('^' +
    (ObjectProto.valueOf + '')
      .replace(/[.*+?^=!:()|[\]\/\\]/g, '\\$&')
      .replace(/valueOf|for [^\]]+/g, '.+?') + '$'
  );

  /** Used to ensure capturing order and avoid matches for undefined delimiters */
  var reNoMatch = /($^)/;

  /** Used to match HTML characters */
  var reUnescapedHtml = /[&<>"']/g;

  /** Used to match unescaped characters in compiled string literals */
  var reUnescapedString = /['\n\r\t\u2028\u2029\\]/g;

  /** Used to fix the JScript [[DontEnum]] bug */
  var shadowed = [
    'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',
    'toLocaleString', 'toString', 'valueOf'
  ];

  /** Used to make template sourceURLs easier to identify */
  var templateCounter = 0;

  /** Native method shortcuts */
  var ceil = Math.ceil,
      concat = ArrayProto.concat,
      floor = Math.floor,
      getPrototypeOf = reNative.test(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,
      hasOwnProperty = ObjectProto.hasOwnProperty,
      push = ArrayProto.push,
      propertyIsEnumerable = ObjectProto.propertyIsEnumerable,
      slice = ArrayProto.slice,
      toString = ObjectProto.toString;

  /* Native method shortcuts for methods with the same name as other `lodash` methods */
  var nativeBind = reNative.test(nativeBind = slice.bind) && nativeBind,
      nativeIsArray = reNative.test(nativeIsArray = Array.isArray) && nativeIsArray,
      nativeIsFinite = window.isFinite,
      nativeKeys = reNative.test(nativeKeys = Object.keys) && nativeKeys,
      nativeMax = Math.max,
      nativeMin = Math.min,
      nativeRandom = Math.random;

  /** `Object#toString` result shortcuts */
  var argsClass = '[object Arguments]',
      arrayClass = '[object Array]',
      boolClass = '[object Boolean]',
      dateClass = '[object Date]',
      funcClass = '[object Function]',
      numberClass = '[object Number]',
      objectClass = '[object Object]',
      regexpClass = '[object RegExp]',
      stringClass = '[object String]';

  /** Timer shortcuts */
  var clearTimeout = window.clearTimeout,
      setTimeout = window.setTimeout;

  /**
   * Detect the JScript [[DontEnum]] bug:
   *
   * In IE < 9 an objects own properties, shadowing non-enumerable ones, are
   * made non-enumerable as well.
   */
  var hasDontEnumBug;

  /**
   * Detect if `Array#shift` and `Array#splice` augment array-like objects
   * incorrectly:
   *
   * Firefox < 10, IE compatibility mode, and IE < 9 have buggy Array `shift()`
   * and `splice()` functions that fail to remove the last element, `value[0]`,
   * of array-like objects even though the `length` property is set to `0`.
   * The `shift()` method is buggy in IE 8 compatibility mode, while `splice()`
   * is buggy regardless of mode in IE < 9 and buggy in compatibility mode in IE 9.
   */
  var hasObjectSpliceBug;

  /** Detect if own properties are iterated after inherited properties (IE < 9) */
  var iteratesOwnLast;

  /** Detect if an `arguments` object's indexes are non-enumerable (IE < 9) */
  var noArgsEnum = true;

  (function() {
    var object = { '0': 1, 'length': 1 },
        props = [];

    function ctor() { this.x = 1; }
    ctor.prototype = { 'valueOf': 1, 'y': 1 };
    for (var prop in new ctor) { props.push(prop); }
    for (prop in arguments) { noArgsEnum = !prop; }

    hasDontEnumBug = (props + '').length < 4;
    iteratesOwnLast = props[0] != 'x';
    hasObjectSpliceBug = (props.splice.call(object, 0, 1), object[0]);
  }(1));

  /** Detect if an `arguments` object's [[Class]] is unresolvable (Firefox < 4, IE < 9) */
  var noArgsClass = !isArguments(arguments);

  /** Detect if `Array#slice` cannot be used to convert strings to arrays (Opera < 10.52) */
  var noArraySliceOnStrings = slice.call('x')[0] != 'x';

  /**
   * Detect lack of support for accessing string characters by index:
   *
   * IE < 8 can't access characters by index and IE 8 can only access
   * characters by index on string literals.
   */
  var noCharByIndex = ('x'[0] + Object('x')[0]) != 'xx';

  /**
   * Detect if a node's [[Class]] is unresolvable (IE < 9)
   * and that the JS engine won't error when attempting to coerce an object to
   * a string without a `toString` property value of `typeof` "function".
   */
  try {
    var noNodeClass = ({ 'toString': 0 } + '', toString.call(window.document || 0) == objectClass);
  } catch(e) { }

  /* Detect if `Function#bind` exists and is inferred to be fast (all but V8) */
  var isBindFast = nativeBind && /\n|Opera/.test(nativeBind + toString.call(window.opera));

  /* Detect if `Object.keys` exists and is inferred to be fast (IE, Opera, V8) */
  var isKeysFast = nativeKeys && /^.+$|true/.test(nativeKeys + !!window.attachEvent);

  /* Detect if strict mode, "use strict", is inferred to be fast (V8) */
  var isStrictFast = !isBindFast;

  /**
   * Detect if sourceURL syntax is usable without erroring:
   *
   * The JS engine in Adobe products, like InDesign, will throw a syntax error
   * when it encounters a single line comment beginning with the `@` symbol.
   *
   * The JS engine in Narwhal will generate the function `function anonymous(){//}`
   * and throw a syntax error.
   *
   * Avoid comments beginning `@` symbols in IE because they are part of its
   * non-standard conditional compilation support.
   * http://msdn.microsoft.com/en-us/library/121hztk3(v=vs.94).aspx
   */
  try {
    var useSourceURL = (Function('//@')(), !window.attachEvent);
  } catch(e) { }

  /** Used to identify object classifications that are array-like */
  var arrayLikeClasses = {};
  arrayLikeClasses[boolClass] = arrayLikeClasses[dateClass] = arrayLikeClasses[funcClass] =
  arrayLikeClasses[numberClass] = arrayLikeClasses[objectClass] = arrayLikeClasses[regexpClass] = false;
  arrayLikeClasses[argsClass] = arrayLikeClasses[arrayClass] = arrayLikeClasses[stringClass] = true;

  /** Used to identify object classifications that `_.clone` supports */
  var cloneableClasses = {};
  cloneableClasses[argsClass] = cloneableClasses[funcClass] = false;
  cloneableClasses[arrayClass] = cloneableClasses[boolClass] = cloneableClasses[dateClass] =
  cloneableClasses[numberClass] = cloneableClasses[objectClass] = cloneableClasses[regexpClass] =
  cloneableClasses[stringClass] = true;

  /** Used to determine if values are of the language type Object */
  var objectTypes = {
    'boolean': false,
    'function': true,
    'object': true,
    'number': false,
    'string': false,
    'undefined': false,
    'unknown': true
  };

  /** Used to escape characters for inclusion in compiled string literals */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\t': 't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /*--------------------------------------------------------------------------*/

  /**
   * The `lodash` function.
   *
   * @name _
   * @constructor
   * @category Chaining
   * @param {Mixed} value The value to wrap in a `lodash` instance.
   * @returns {Object} Returns a `lodash` instance.
   */
  function lodash(value) {
    // exit early if already wrapped
    if (value && value.__wrapped__) {
      return value;
    }
    // allow invoking `lodash` without the `new` operator
    if (!(this instanceof lodash)) {
      return new lodash(value);
    }
    this.__wrapped__ = value;
  }

  /**
   * By default, the template delimiters used by Lo-Dash are similar to those in
   * embedded Ruby (ERB). Change the following template settings to use alternative
   * delimiters.
   *
   * @static
   * @memberOf _
   * @type Object
   */
  lodash.templateSettings = {

    /**
     * Used to detect `data` property values to be HTML-escaped.
     *
     * @static
     * @memberOf _.templateSettings
     * @type RegExp
     */
    'escape': /<%-([\s\S]+?)%>/g,

    /**
     * Used to detect code to be evaluated.
     *
     * @static
     * @memberOf _.templateSettings
     * @type RegExp
     */
    'evaluate': /<%([\s\S]+?)%>/g,

    /**
     * Used to detect `data` property values to inject.
     *
     * @static
     * @memberOf _.templateSettings
     * @type RegExp
     */
    'interpolate': /<%=([\s\S]+?)%>/g,

    /**
     * Used to reference the data object in the template text.
     *
     * @static
     * @memberOf _.templateSettings
     * @type String
     */
    'variable': ''
  };

  /*--------------------------------------------------------------------------*/

  /**
   * The template used to create iterator functions.
   *
   * @private
   * @param {Obect} data The data object used to populate the text.
   * @returns {String} Returns the interpolated text.
   */
  var iteratorTemplate = template(
    // conditional strict mode
    '<% if (useStrict) { %>\'use strict\';\n<% } %>' +

    // the `iteratee` may be reassigned by the `top` snippet
    'var index, value, iteratee = <%= firstArg %>, ' +
    // assign the `result` variable an initial value
    'result = <%= init || firstArg %>;\n' +
    // exit early if the first argument is falsey
    'if (!<%= firstArg %>) return result;\n' +
    // add code before the iteration branches
    '<%= top %>;\n' +

    // the following branch is for iterating arrays and array-like objects
    '<% if (arrayBranch) { %>' +
    'var length = iteratee.length; index = -1;' +
    '  <% if (objectBranch) { %>\nif (length === +length) {<% } %>' +

    // add support for accessing string characters by index if needed
    '  <% if (noCharByIndex) { %>\n' +
    '  if (toString.call(iteratee) == stringClass) {\n' +
    '    iteratee = iteratee.split(\'\')\n' +
    '  }' +
    '  <% } %>\n' +

    '  <%= arrayBranch.beforeLoop %>;\n' +
    '  while (++index < length) {\n' +
    '    value = iteratee[index];\n' +
    '    <%= arrayBranch.inLoop %>\n' +
    '  }' +
    '  <% if (objectBranch) { %>\n}<% } %>' +
    '<% } %>' +

    // the following branch is for iterating an object's own/inherited properties
    '<% if (objectBranch) { %>' +
    '  <% if (arrayBranch) { %>\nelse {' +

    // add support for iterating over `arguments` objects if needed
    '  <%  } else if (noArgsEnum) { %>\n' +
    '  var length = iteratee.length; index = -1;\n' +
    '  if (length && isArguments(iteratee)) {\n' +
    '    while (++index < length) {\n' +
    '      value = iteratee[index += \'\'];\n' +
    '      <%= objectBranch.inLoop %>\n' +
    '    }\n' +
    '  } else {' +
    '  <% } %>' +

    // Firefox < 3.6, Opera > 9.50 - Opera < 11.60, and Safari < 5.1
    // (if the prototype or a property on the prototype has been set)
    // incorrectly sets a function's `prototype` property [[Enumerable]]
    // value to `true`. Because of this Lo-Dash standardizes on skipping
    // the the `prototype` property of functions regardless of its
    // [[Enumerable]] value.
    '  <% if (!hasDontEnumBug) { %>\n' +
    '  var skipProto = typeof iteratee == \'function\' && \n' +
    '    propertyIsEnumerable.call(iteratee, \'prototype\');\n' +
    '  <% } %>' +

    // iterate own properties using `Object.keys` if it's fast
    '  <% if (isKeysFast && useHas) { %>\n' +
    '  var ownIndex = -1,\n' +
    '      ownProps = objectTypes[typeof iteratee] ? nativeKeys(iteratee) : [],\n' +
    '      length = ownProps.length;\n\n' +
    '  <%= objectBranch.beforeLoop %>;\n' +
    '  while (++ownIndex < length) {\n' +
    '    index = ownProps[ownIndex];\n' +
    '    <% if (!hasDontEnumBug) { %>if (!(skipProto && index == \'prototype\')) {\n  <% } %>' +
    '    value = iteratee[index];\n' +
    '    <%= objectBranch.inLoop %>\n' +
    '    <% if (!hasDontEnumBug) { %>}\n<% } %>' +
    '  }' +

    // else using a for-in loop
    '  <% } else { %>\n' +
    '  <%= objectBranch.beforeLoop %>;\n' +
    '  for (index in iteratee) {<%' +
    '    if (!hasDontEnumBug || useHas) { %>\n    if (<%' +
    '      if (!hasDontEnumBug) { %>!(skipProto && index == \'prototype\')<% }' +
    '      if (!hasDontEnumBug && useHas) { %> && <% }' +
    '      if (useHas) { %>hasOwnProperty.call(iteratee, index)<% }' +
    '    %>) {' +
    '    <% } %>\n' +
    '    value = iteratee[index];\n' +
    '    <%= objectBranch.inLoop %>;' +
    '    <% if (!hasDontEnumBug || useHas) { %>\n    }<% } %>\n' +
    '  }' +
    '  <% } %>' +

    // Because IE < 9 can't set the `[[Enumerable]]` attribute of an
    // existing property and the `constructor` property of a prototype
    // defaults to non-enumerable, Lo-Dash skips the `constructor`
    // property when it infers it's iterating over a `prototype` object.
    '  <% if (hasDontEnumBug) { %>\n\n' +
    '  var ctor = iteratee.constructor;\n' +
    '    <% for (var k = 0; k < 7; k++) { %>\n' +
    '  index = \'<%= shadowed[k] %>\';\n' +
    '  if (<%' +
    '      if (shadowed[k] == \'constructor\') {' +
    '        %>!(ctor && ctor.prototype === iteratee) && <%' +
    '      } %>hasOwnProperty.call(iteratee, index)) {\n' +
    '    value = iteratee[index];\n' +
    '    <%= objectBranch.inLoop %>\n' +
    '  }' +
    '    <% } %>' +
    '  <% } %>' +
    '  <% if (arrayBranch || noArgsEnum) { %>\n}<% } %>' +
    '<% } %>\n' +

    // add code to the bottom of the iteration function
    '<%= bottom %>;\n' +
    // finally, return the `result`
    'return result'
  );

  /**
   * Reusable iterator options shared by
   * `countBy`, `every`, `filter`, `find`, `forEach`, `forIn`, `forOwn`, `groupBy`,
   * `map`, `reject`, `some`, and `sortBy`.
   */
  var baseIteratorOptions = {
    'args': 'collection, callback, thisArg',
    'top': 'callback = createCallback(callback, thisArg)',
    'inLoop': 'if (callback(value, index, collection) === false) return result'
  };

  /** Reusable iterator options for `countBy`, `groupBy`, and `sortBy` */
  var countByIteratorOptions = {
    'init': '{}',
    'top': 'callback = createCallback(callback, thisArg)',
    'inLoop':
      'var prop = callback(value, index, collection);\n' +
      '(hasOwnProperty.call(result, prop) ? result[prop]++ : result[prop] = 1)'
  };

  /** Reusable iterator options for `every` and `some` */
  var everyIteratorOptions = {
    'init': 'true',
    'inLoop': 'if (!callback(value, index, collection)) return !result'
  };

  /** Reusable iterator options for `defaults` and `extend` */
  var extendIteratorOptions = {
    'useHas': false,
    'useStrict': false,
    'args': 'object',
    'top':
      'for (var argsIndex = 1, argsLength = arguments.length; argsIndex < argsLength; argsIndex++) {\n' +
      '  if (iteratee = arguments[argsIndex]) {',
    'inLoop': 'result[index] = value',
    'bottom': '  }\n}'
  };

  /** Reusable iterator options for `filter`, `reject`, and `where` */
  var filterIteratorOptions = {
    'init': '[]',
    'inLoop': 'callback(value, index, collection) && result.push(value)'
  };

  /** Reusable iterator options for `find`, `forEach`, `forIn`, and `forOwn` */
  var forEachIteratorOptions = {
    'top': 'callback = createCallback(callback, thisArg)'
  };

  /** Reusable iterator options for `forIn` and `forOwn` */
  var forOwnIteratorOptions = {
    'inLoop': {
      'object': baseIteratorOptions.inLoop
    }
  };

  /** Reusable iterator options for `invoke`, `map`, `pluck`, and `sortBy` */
  var mapIteratorOptions = {
    'init': 'collection || []',
    'beforeLoop': {
      'array':  'result = Array(length)',
      'object': 'result = ' + (isKeysFast ? 'Array(length)' : '[]')
    },
    'inLoop': {
      'array':  'result[index] = callback(value, index, collection)',
      'object': 'result' + (isKeysFast ? '[ownIndex] = ' : '.push') + '(callback(value, index, collection))'
    }
  };

  /** Reusable iterator options for `omit` and `pick` */
  var omitIteratorOptions = {
    'useHas': false,
    'args': 'object, callback, thisArg',
    'init': '{}',
    'top':
      'var isFunc = typeof callback == \'function\';\n' +
      'if (isFunc) callback = createCallback(callback, thisArg);\n' +
      'else var props = concat.apply(ArrayProto, arguments)',
    'inLoop':
      'if (isFunc\n' +
      '  ? !callback(value, index, object)\n' +
      '  : indexOf(props, index) < 0\n' +
      ') result[index] = value'
  };

  /*--------------------------------------------------------------------------*/

  /**
   * Creates a function optimized for searching large arrays for a given `value`,
   * starting at `fromIndex`, using strict equality for comparisons, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Mixed} value The value to search for.
   * @param {Number} [fromIndex=0] The index to start searching from.
   * @param {Number} [largeSize=30] The length at which an array is considered large.
   * @returns {Boolean} Returns `true` if `value` is found, else `false`.
   */
  function cachedContains(array, fromIndex, largeSize) {
    fromIndex || (fromIndex = 0);

    var length = array.length,
        isLarge = (length - fromIndex) >= (largeSize || largeArraySize),
        cache = isLarge ? {} : array;

    if (isLarge) {
      // init value cache
      var index = fromIndex - 1;
      while (++index < length) {
        // manually coerce `value` to string because `hasOwnProperty`, in some
        // older versions of Firefox, coerces objects incorrectly
        var key = array[index] + '';
        (hasOwnProperty.call(cache, key) ? cache[key] : (cache[key] = [])).push(array[index]);
      }
    }
    return function(value) {
      if (isLarge) {
        var key = value + '';
        return hasOwnProperty.call(cache, key) && indexOf(cache[key], value) > -1;
      }
      return indexOf(cache, value, fromIndex) > -1;
    }
  }

  /**
   * Used by `sortBy` to compare transformed `collection` values, stable sorting
   * them in ascending order.
   *
   * @private
   * @param {Object} a The object to compare to `b`.
   * @param {Object} b The object to compare to `a`.
   * @returns {Number} Returns the sort order indicator of `1` or `-1`.
   */
  function compareAscending(a, b) {
    var ai = a.index,
        bi = b.index;

    a = a.criteria;
    b = b.criteria;

    // ensure a stable sort in V8 and other engines
    // http://code.google.com/p/v8/issues/detail?id=90
    if (a !== b) {
      if (a > b || a === undefined) {
        return 1;
      }
      if (a < b || b === undefined) {
        return -1;
      }
    }
    return ai < bi ? -1 : 1;
  }

  /**
   * Creates a function that, when called, invokes `func` with the `this`
   * binding of `thisArg` and prepends any `partailArgs` to the arguments passed
   * to the bound function.
   *
   * @private
   * @param {Function|String} func The function to bind or the method name.
   * @param {Mixed} [thisArg] The `this` binding of `func`.
   * @param {Array} partialArgs An array of arguments to be partially applied.
   * @returns {Function} Returns the new bound function.
   */
  function createBound(func, thisArg, partialArgs) {
    var isFunc = isFunction(func),
        isPartial = !partialArgs,
        methodName = func;

    // juggle arguments
    if (isPartial) {
      partialArgs = thisArg;
    }

    function bound() {
      // `Function#bind` spec
      // http://es5.github.com/#x15.3.4.5
      var args = arguments,
          thisBinding = isPartial ? this : thisArg;

      if (!isFunc) {
        func = thisArg[methodName];
      }
      if (partialArgs.length) {
        args = args.length
          ? partialArgs.concat(slice.call(args))
          : partialArgs;
      }
      if (this instanceof bound) {
        // get `func` instance if `bound` is invoked in a `new` expression
        noop.prototype = func.prototype;
        thisBinding = new noop;

        // mimic the constructor's `return` behavior
        // http://es5.github.com/#x13.2.2
        var result = func.apply(thisBinding, args);
        return result && objectTypes[typeof result]
          ? result
          : thisBinding
      }
      return func.apply(thisBinding, args);
    }
    return bound;
  }

  /**
   * Produces an iteration callback bound to an optional `thisArg`. If `func` is
   * a property name, the callback will return the property value for a given element.
   *
   * @private
   * @param {Function|String} [func=identity|property] The function called per
   * iteration or property name to query.
   * @param {Mixed} [thisArg] The `this` binding of `callback`.
   * @returns {Function} Returns a callback function.
   */
  function createCallback(func, thisArg) {
    if (!func) {
      return identity;
    }
    if (typeof func != 'function') {
      return function(object) {
        return object[func];
      };
    }
    if (thisArg !== undefined) {
      return function(value, index, object) {
        return func.call(thisArg, value, index, object);
      };
    }
    return func;
  }

  /**
   * Creates compiled iteration functions. The iteration function will be created
   * to iterate over only objects if the first argument of `options.args` is
   * "object" or `options.inLoop.array` is falsey.
   *
   * @private
   * @param {Object} [options1, options2, ...] The compile options objects.
   *
   *  useHas - A boolean to specify using `hasOwnProperty` checks in the object loop.
   *
   *  useStrict - A boolean to specify including the "use strict" directive.
   *
   *  args - A string of comma separated arguments the iteration function will accept.
   *
   *  init - A string to specify the initial value of the `result` variable.
   *
   *  top - A string of code to execute before the iteration branches.
   *
   *  beforeLoop - A string or object containing an "array" or "object" property
   *   of code to execute before the array or object loops.
   *
   *  inLoop - A string or object containing an "array" or "object" property
   *   of code to execute in the array or object loops.
   *
   *  bottom - A string of code to execute after the iteration branches but
   *   before the `result` is returned.
   *
   * @returns {Function} Returns the compiled function.
   */
  function createIterator() {
    var data = {
      'bottom': '',
      'hasDontEnumBug': hasDontEnumBug,
      'init': '',
      'isKeysFast': isKeysFast,
      'noArgsEnum': noArgsEnum,
      'noCharByIndex': noCharByIndex,
      'shadowed': shadowed,
      'top': '',
      'useHas': true,
      'useStrict': isStrictFast,
      'arrayBranch': { 'beforeLoop': '' },
      'objectBranch': { 'beforeLoop': '' }
    };

    var object,
        index = -1;

    // merge options into a template data object
    while (object = arguments[++index]) {
      for (var prop in object) {
        var value = object[prop];
        // keep this regexp explicit for the build pre-process
        if (/beforeLoop|inLoop/.test(prop)) {
          if (typeof value == 'string') {
            value = { 'array': value, 'object': value };
          }
          data.arrayBranch[prop] = value.array;
          data.objectBranch[prop] = value.object;
        } else {
          data[prop] = value;
        }
      }
    }
    // set additional template `data` properties
    var args = data.args;
    if ((data.firstArg = /^[^,]+/.exec(args)[0]) != 'collection' || !data.arrayBranch.inLoop) {
      data.arrayBranch = null;
    }
    // create the function factory
    var factory = Function(
        'arrayLikeClasses, ArrayProto, bind, compareAscending, concat, createCallback, ' +
        'forIn, hasOwnProperty, indexOf, isArguments, isArray, isFunction, ' +
        'isPlainObject, objectClass, objectTypes, nativeKeys, propertyIsEnumerable, ' +
        'slice, stringClass, toString, undefined',
      'var callee = function(' + args + ') {\n' + iteratorTemplate(data) + '\n};\n' +
      'return callee'
    );
    // return the compiled function
    return factory(
      arrayLikeClasses, ArrayProto, bind, compareAscending, concat, createCallback,
      forIn, hasOwnProperty, indexOf, isArguments, isArray, isFunction,
      isPlainObject, objectClass, objectTypes, nativeKeys, propertyIsEnumerable,
      slice, stringClass, toString
    );
  }

  /**
   * Used by `template` to escape characters for inclusion in compiled
   * string literals.
   *
   * @private
   * @param {String} match The matched character to escape.
   * @returns {String} Returns the escaped character.
   */
  function escapeStringChar(match) {
    return '\\' + stringEscapes[match];
  }

  /**
   * Used by `escape` to convert characters to HTML entities.
   *
   * @private
   * @param {String} match The matched character to escape.
   * @returns {String} Returns the escaped character.
   */
  function escapeHtmlChar(match) {
    return htmlEscapes[match];
  }

  /**
   * A no-operation function.
   *
   * @private
   */
  function noop() {
    // no operation performed
  }

  /**
   * Used by `unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {String} match The matched character to unescape.
   * @returns {String} Returns the unescaped character.
   */
  function unescapeHtmlChar(match) {
    return htmlUnescapes[match];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Creates an object composed of the inverted keys and values of the given `object`.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Object} object The object to invert.
   * @returns {Object} Returns the created inverted object.
   * @example
   *
   *  _.invert({ 'first': 'Moe', 'second': 'Larry', 'third': 'Curly' });
   * // => { 'Moe': 'first', 'Larry': 'second', 'Curly': 'third' } (order is not guaranteed)
   */
  var invert = createIterator({
    'args': 'object',
    'init': '{}',
    'inLoop': 'result[value] = index'
  });

  /**
   * Checks if `value` is an `arguments` object.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is an `arguments` object, else `false`.
   * @example
   *
   * (function() { return _.isArguments(arguments); })(1, 2, 3);
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  function isArguments(value) {
    return toString.call(value) == argsClass;
  }
  // fallback for browsers that can't detect `arguments` objects by [[Class]]
  if (noArgsClass) {
    isArguments = function(value) {
      return value ? hasOwnProperty.call(value, 'callee') : false;
    };
  }

  /**
   * Checks if `value` is an array.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is an array, else `false`.
   * @example
   *
   * (function() { return _.isArray(arguments); })();
   * // => false
   *
   * _.isArray([1, 2, 3]);
   * // => true
   */
  var isArray = nativeIsArray || function(value) {
    return toString.call(value) == arrayClass;
  };

  /**
   * Checks if `value` is a function.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   */
  function isFunction(value) {
    return typeof value == 'function';
  }
  // fallback for older versions of Chrome and Safari
  if (isFunction(/x/)) {
    isFunction = function(value) {
      return toString.call(value) == funcClass;
    };
  }

  /**
   * Checks if a given `value` is an object created by the `Object` constructor.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if `value` is a plain object, else `false`.
   * @example
   *
   * function Stooge(name, age) {
   *   this.name = name;
   *   this.age = age;
   * }
   *
   * _.isPlainObject(new Stooge('moe', 40));
   * // false
   *
   * _.isPlainObject([1, 2, 3]);
   * // false
   *
   * _.isPlainObject({ 'name': 'moe', 'age': 40 });
   * // => true
   */
  var isPlainObject = !getPrototypeOf ? isPlainFallback : function(value) {
    if (!(value && typeof value == 'object')) {
      return false;
    }
    var valueOf = value.valueOf,
        objProto = typeof valueOf == 'function' && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);

    return objProto
      ? value == objProto || (getPrototypeOf(value) == objProto && !isArguments(value))
      : isPlainFallback(value);
  };

  /**
   * A fallback implementation of `isPlainObject` that checks if a given `value`
   * is an object created by the `Object` constructor, assuming objects created
   * by the `Object` constructor have no inherited enumerable properties and that
   * there are no `Object.prototype` extensions.
   *
   * @private
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if `value` is a plain object, else `false`.
   */
  function isPlainFallback(value) {
    // avoid non-objects and false positives for `arguments` objects
    var result = false;
    if (!(value && typeof value == 'object') || isArguments(value)) {
      return result;
    }
    // IE < 9 presents DOM nodes as `Object` objects except they have `toString`
    // methods that are `typeof` "string" and still can coerce nodes to strings.
    // Also check that the constructor is `Object` (i.e. `Object instanceof Object`)
    var ctor = value.constructor;
    if ((!noNodeClass || !(typeof value.toString != 'function' && typeof (value + '') == 'string')) &&
        (!isFunction(ctor) || ctor instanceof ctor)) {
      // IE < 9 iterates inherited properties before own properties. If the first
      // iterated property is an object's own property then there are no inherited
      // enumerable properties.
      if (iteratesOwnLast) {
        forIn(value, function(value, key, object) {
          result = !hasOwnProperty.call(object, key);
          return false;
        });
        return result === false;
      }
      // In most environments an object's own properties are iterated before
      // its inherited properties. If the last iterated property is an object's
      // own property then there are no inherited enumerable properties.
      forIn(value, function(value, key) {
        result = key;
      });
      return result === false || hasOwnProperty.call(value, result);
    }
    return result;
  }

  /**
   * A shim implementation of `Object.keys` that produces an array of the given
   * object's own enumerable property names.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @returns {Array} Returns a new array of property names.
   */
  var shimKeys = createIterator({
    'args': 'object',
    'init': '[]',
    'inLoop': 'result.push(index)'
  });

  /**
   * Used to convert characters to HTML entities:
   *
   * Though the `>` character is escaped for symmetry, characters like `>` and `/`
   * don't require escaping in HTML and have no special meaning unless they're part
   * of a tag or an unquoted attribute value.
   * http://mathiasbynens.be/notes/ambiguous-ampersands (under "semi-related fun fact")
   */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;'
  };

  /** Used to convert HTML entities to characters */
  var htmlUnescapes = invert(htmlEscapes);

  /*--------------------------------------------------------------------------*/

  /**
   * Creates a clone of `value`. If `deep` is `true`, all nested objects will
   * also be cloned otherwise they will be assigned by reference. Functions, DOM
   * nodes, `arguments` objects, and objects created by constructors other than
   * `Object` are **not** cloned.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to clone.
   * @param {Boolean} deep A flag to indicate a deep clone.
   * @param- {Object} [guard] Internally used to allow this method to work with
   *  others like `_.map` without using their callback `index` argument for `deep`.
   * @param- {Array} [stackA=[]] Internally used to track traversed source objects.
   * @param- {Array} [stackB=[]] Internally used to associate clones with their
   *  source counterparts.
   * @returns {Mixed} Returns the cloned `value`.
   * @example
   *
   * var stooges = [
   *   { 'name': 'moe', 'age': 40 },
   *   { 'name': 'larry', 'age': 50 },
   *   { 'name': 'curly', 'age': 60 }
   * ];
   *
   * _.clone({ 'name': 'moe' });
   * // => { 'name': 'moe' }
   *
   * var shallow = _.clone(stooges);
   * shallow[0] === stooges[0];
   * // => true
   *
   * var deep = _.clone(stooges, true);
   * shallow[0] === stooges[0];
   * // => false
   */
  function clone(value, deep, guard, stackA, stackB) {
    if (value == null) {
      return value;
    }
    if (guard) {
      deep = false;
    }
    // inspect [[Class]]
    var isObj = objectTypes[typeof value];
    if (isObj) {
      // don't clone `arguments` objects, functions, or non-object Objects
      var className = toString.call(value);
      if (!cloneableClasses[className] || (noArgsClass && isArguments(value))) {
        return value;
      }
      var isArr = className == arrayClass;
      isObj = isArr || (className == objectClass ? isPlainObject(value) : isObj);
    }
    // shallow clone
    if (!isObj || !deep) {
      // don't clone functions
      return isObj
        ? (isArr ? slice.call(value) : extend({}, value))
        : value;
    }

    var ctor = value.constructor;
    switch (className) {
      case boolClass:
      case dateClass:
        return new ctor(+value);

      case numberClass:
      case stringClass:
        return new ctor(value);

      case regexpClass:
        return ctor(value.source, reFlags.exec(value));
    }
    // check for circular references and return corresponding clone
    stackA || (stackA = []);
    stackB || (stackB = []);

    var length = stackA.length;
    while (length--) {
      if (stackA[length] == value) {
        return stackB[length];
      }
    }
    // init cloned object
    var result = isArr ? ctor(value.length) : {};

    // add the source value to the stack of traversed objects
    // and associate it with its clone
    stackA.push(value);
    stackB.push(result);

    // recursively populate clone (susceptible to call stack limits)
    (isArr ? forEach : forOwn)(value, function(objValue, key) {
      result[key] = clone(objValue, deep, null, stackA, stackB);
    });

    return result;
  }

  /**
   * Assigns enumerable properties of the default object(s) to the `destination`
   * object for all `destination` properties that resolve to `null`/`undefined`.
   * Once a property is set, additional defaults of the same property will be
   * ignored.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Object} object The destination object.
   * @param {Object} [default1, default2, ...] The default objects.
   * @returns {Object} Returns the destination object.
   * @example
   *
   * var iceCream = { 'flavor': 'chocolate' };
   * _.defaults(iceCream, { 'flavor': 'vanilla', 'sprinkles': 'rainbow' });
   * // => { 'flavor': 'chocolate', 'sprinkles': 'rainbow' }
   */
  var defaults = createIterator(extendIteratorOptions, {
    'inLoop': 'if (result[index] == null) ' + extendIteratorOptions.inLoop
  });

  /**
   * Assigns enumerable properties of the source object(s) to the `destination`
   * object. Subsequent sources will overwrite propery assignments of previous
   * sources.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Object} object The destination object.
   * @param {Object} [source1, source2, ...] The source objects.
   * @returns {Object} Returns the destination object.
   * @example
   *
   * _.extend({ 'name': 'moe' }, { 'age': 40 });
   * // => { 'name': 'moe', 'age': 40 }
   */
  var extend = createIterator(extendIteratorOptions);

  /**
   * Iterates over `object`'s own and inherited enumerable properties, executing
   * the `callback` for each property. The `callback` is bound to `thisArg` and
   * invoked with three arguments; (value, key, object). Callbacks may exit iteration
   * early by explicitly returning `false`.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Object} object The object to iterate over.
   * @param {Function} callback The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding of `callback`.
   * @returns {Object} Returns `object`.
   * @example
   *
   * function Dog(name) {
   *   this.name = name;
   * }
   *
   * Dog.prototype.bark = function() {
   *   alert('Woof, woof!');
   * };
   *
   * _.forIn(new Dog('Dagny'), function(value, key) {
   *   alert(key);
   * });
   * // => alerts 'name' and 'bark' (order is not guaranteed)
   */
  var forIn = createIterator(baseIteratorOptions, forEachIteratorOptions, forOwnIteratorOptions, {
    'useHas': false
  });

  /**
   * Iterates over `object`'s own enumerable properties, executing the `callback`
   * for each property. The `callback` is bound to `thisArg` and invoked with three
   * arguments; (value, key, object). Callbacks may exit iteration early by explicitly
   * returning `false`.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Object} object The object to iterate over.
   * @param {Function} callback The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding of `callback`.
   * @returns {Object} Returns `object`.
   * @example
   *
   * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
   *   alert(key);
   * });
   * // => alerts '0', '1', and 'length' (order is not guaranteed)
   */
  var forOwn = createIterator(baseIteratorOptions, forEachIteratorOptions, forOwnIteratorOptions);

  /**
   * Creates a sorted array of all enumerable properties, own and inherited,
   * of `object` that have function values.
   *
   * @static
   * @memberOf _
   * @alias methods
   * @category Objects
   * @param {Object} object The object to inspect.
   * @returns {Array} Returns a new array of property names that have function values.
   * @example
   *
   * _.functions(_);
   * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]
   */
  var functions = createIterator({
    'useHas': false,
    'args': 'object',
    'init': '[]',
    'inLoop': 'isFunction(value) && result.push(index)',
    'bottom': 'result.sort()'
  });

  /**
   * Checks if the specified object `property` exists and is a direct property,
   * instead of an inherited property.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Object} object The object to check.
   * @param {String} property The property to check for.
   * @returns {Boolean} Returns `true` if key is a direct property, else `false`.
   * @example
   *
   * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');
   * // => true
   */
  function has(object, property) {
    return object ? hasOwnProperty.call(object, property) : false;
  }

  /**
   * Checks if `value` is a boolean (`true` or `false`) value.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is a boolean value, else `false`.
   * @example
   *
   * _.isBoolean(null);
   * // => false
   */
  function isBoolean(value) {
    return value === true || value === false || toString.call(value) == boolClass;
  }

  /**
   * Checks if `value` is a date.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is a date, else `false`.
   * @example
   *
   * _.isDate(new Date);
   * // => true
   */
  function isDate(value) {
    return toString.call(value) == dateClass;
  }

  /**
   * Checks if `value` is a DOM element.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is a DOM element, else `false`.
   * @example
   *
   * _.isElement(document.body);
   * // => true
   */
  function isElement(value) {
    return value ? value.nodeType === 1 : false;
  }

  /**
   * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a
   * length of `0` and objects with no own enumerable properties are considered
   * "empty".
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Array|Object|String} value The value to inspect.
   * @returns {Boolean} Returns `true` if the `value` is empty, else `false`.
   * @example
   *
   * _.isEmpty([1, 2, 3]);
   * // => false
   *
   * _.isEmpty({});
   * // => true
   *
   * _.isEmpty('');
   * // => true
   */
  var isEmpty = createIterator({
    'args': 'value',
    'init': 'true',
    'top':
      'var className = toString.call(value),\n' +
      '    length = value.length;\n' +
      'if (arrayLikeClasses[className]' +
      (noArgsClass ? ' || isArguments(value)' : '') + ' ||\n' +
      '  (className == objectClass && length === +length &&\n' +
      '  isFunction(value.splice))' +
      ') return !length',
    'inLoop': {
      'object': 'return false'
    }
  });

  /**
   * Performs a deep comparison between two values to determine if they are
   * equivalent to each other.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} a The value to compare.
   * @param {Mixed} b The other value to compare.
   * @param- {Object} [stackA=[]] Internally used track traversed `a` objects.
   * @param- {Object} [stackB=[]] Internally used track traversed `b` objects.
   * @returns {Boolean} Returns `true` if the values are equvalent, else `false`.
   * @example
   *
   * var moe = { 'name': 'moe', 'luckyNumbers': [13, 27, 34] };
   * var clone = { 'name': 'moe', 'luckyNumbers': [13, 27, 34] };
   *
   * moe == clone;
   * // => false
   *
   * _.isEqual(moe, clone);
   * // => true
   */
  function isEqual(a, b, stackA, stackB) {
    // a strict comparison is necessary because `null == undefined`
    if (a == null || b == null) {
      return a === b;
    }
    // exit early for identical values
    if (a === b) {
      // treat `+0` vs. `-0` as not equal
      return a !== 0 || (1 / a == 1 / b);
    }
    // unwrap any `lodash` wrapped values
    if (objectTypes[typeof a] || objectTypes[typeof b]) {
      a = a.__wrapped__ || a;
      b = b.__wrapped__ || b;
    }
    // compare [[Class]] names
    var className = toString.call(a);
    if (className != toString.call(b)) {
      return false;
    }
    switch (className) {
      case boolClass:
      case dateClass:
        // coerce dates and booleans to numbers, dates to milliseconds and booleans
        // to `1` or `0`, treating invalid dates coerced to `NaN` as not equal
        return +a == +b;

      case numberClass:
        // treat `NaN` vs. `NaN` as equal
        return a != +a
          ? b != +b
          // but treat `+0` vs. `-0` as not equal
          : (a == 0 ? (1 / a == 1 / b) : a == +b);

      case regexpClass:
      case stringClass:
        // coerce regexes to strings (http://es5.github.com/#x15.10.6.4)
        // treat string primitives and their corresponding object instances as equal
        return a == b + '';
    }
    // exit early, in older browsers, if `a` is array-like but not `b`
    var isArr = arrayLikeClasses[className];
    if (noArgsClass && !isArr && (isArr = isArguments(a)) && !isArguments(b)) {
      return false;
    }
    // exit for functions and DOM nodes
    if (!isArr && (className != objectClass || (noNodeClass && (
        (typeof a.toString != 'function' && typeof (a + '') == 'string') ||
        (typeof b.toString != 'function' && typeof (b + '') == 'string'))))) {
      return false;
    }

    // assume cyclic structures are equal
    // the algorithm for detecting cyclic structures is adapted from ES 5.1
    // section 15.12.3, abstract operation `JO` (http://es5.github.com/#x15.12.3)
    stackA || (stackA = []);
    stackB || (stackB = []);

    var length = stackA.length;
    while (length--) {
      if (stackA[length] == a) {
        return stackB[length] == b;
      }
    }

    var index = -1,
        result = true,
        size = 0;

    // add `a` and `b` to the stack of traversed objects
    stackA.push(a);
    stackB.push(b);

    // recursively compare objects and arrays (susceptible to call stack limits)
    if (isArr) {
      // compare lengths to determine if a deep comparison is necessary
      size = a.length;
      result = size == b.length;

      if (result) {
        // deep compare the contents, ignoring non-numeric properties
        while (size--) {
          if (!(result = isEqual(a[size], b[size], stackA, stackB))) {
            break;
          }
        }
      }
      return result;
    }

    var ctorA = a.constructor,
        ctorB = b.constructor;

    // non `Object` object instances with different constructors are not equal
    if (ctorA != ctorB && !(
          isFunction(ctorA) && ctorA instanceof ctorA &&
          isFunction(ctorB) && ctorB instanceof ctorB
        )) {
      return false;
    }
    // deep compare objects
    for (var prop in a) {
      if (hasOwnProperty.call(a, prop)) {
        // count the number of properties.
        size++;
        // deep compare each property value.
        if (!(hasOwnProperty.call(b, prop) && isEqual(a[prop], b[prop], stackA, stackB))) {
          return false;
        }
      }
    }
    // ensure both objects have the same number of properties
    for (prop in b) {
      // The JS engine in Adobe products, like InDesign, has a bug that causes
      // `!size--` to throw an error so it must be wrapped in parentheses.
      // https://github.com/documentcloud/underscore/issues/355
      if (hasOwnProperty.call(b, prop) && !(size--)) {
        // `size` will be `-1` if `b` has more properties than `a`
        return false;
      }
    }
    // handle JScript [[DontEnum]] bug
    if (hasDontEnumBug) {
      while (++index < 7) {
        prop = shadowed[index];
        if (hasOwnProperty.call(a, prop) &&
            !(hasOwnProperty.call(b, prop) && isEqual(a[prop], b[prop], stackA, stackB))) {
          return false;
        }
      }
    }
    return true;
  }

  /**
   * Checks if `value` is a finite number.
   *
   * Note: This is not the same as native `isFinite`, which will return true for
   * booleans and other values. See http://es5.github.com/#x15.1.2.5.
   *
   * @deprecated
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is a finite number, else `false`.
   * @example
   *
   * _.isFinite(-101);
   * // => true
   *
   * _.isFinite('10');
   * // => false
   *
   * _.isFinite(Infinity);
   * // => false
   */
  function isFinite(value) {
    return nativeIsFinite(value) && toString.call(value) == numberClass;
  }

  /**
   * Checks if `value` is the language type of Object.
   * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(1);
   * // => false
   */
  function isObject(value) {
    // check if the value is the ECMAScript language type of Object
    // http://es5.github.com/#x8
    // and avoid a V8 bug
    // http://code.google.com/p/v8/issues/detail?id=2291
    return value ? objectTypes[typeof value] : false;
  }

  /**
   * Checks if `value` is `NaN`.
   *
   * Note: This is not the same as native `isNaN`, which will return true for
   * `undefined` and other values. See http://es5.github.com/#x15.1.2.4.
   *
   * @deprecated
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is `NaN`, else `false`.
   * @example
   *
   * _.isNaN(NaN);
   * // => true
   *
   * _.isNaN(new Number(NaN));
   * // => true
   *
   * isNaN(undefined);
   * // => true
   *
   * _.isNaN(undefined);
   * // => false
   */
  function isNaN(value) {
    // `NaN` as a primitive is the only value that is not equal to itself
    // (perform the [[Class]] check first to avoid errors with some host objects in IE)
    return toString.call(value) == numberClass && value != +value
  }

  /**
   * Checks if `value` is `null`.
   *
   * @deprecated
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is `null`, else `false`.
   * @example
   *
   * _.isNull(null);
   * // => true
   *
   * _.isNull(undefined);
   * // => false
   */
  function isNull(value) {
    return value === null;
  }

  /**
   * Checks if `value` is a number.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is a number, else `false`.
   * @example
   *
   * _.isNumber(8.4 * 5);
   * // => true
   */
  function isNumber(value) {
    return toString.call(value) == numberClass;
  }

  /**
   * Checks if `value` is a regular expression.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is a regular expression, else `false`.
   * @example
   *
   * _.isRegExp(/moe/);
   * // => true
   */
  function isRegExp(value) {
    return toString.call(value) == regexpClass;
  }

  /**
   * Checks if `value` is a string.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is a string, else `false`.
   * @example
   *
   * _.isString('moe');
   * // => true
   */
  function isString(value) {
    return toString.call(value) == stringClass;
  }

  /**
   * Checks if `value` is `undefined`.
   *
   * @deprecated
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is `undefined`, else `false`.
   * @example
   *
   * _.isUndefined(void 0);
   * // => true
   */
  function isUndefined(value) {
    return value === undefined;
  }

  /**
   * Creates an array composed of the own enumerable property names of `object`.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Object} object The object to inspect.
   * @returns {Array} Returns a new array of property names.
   * @example
   *
   * _.keys({ 'one': 1, 'two': 2, 'three': 3 });
   * // => ['one', 'two', 'three'] (order is not guaranteed)
   */
  var keys = !nativeKeys ? shimKeys : function(object) {
    var type = typeof object;

    // avoid iterating over the `prototype` property
    if (type == 'function' && propertyIsEnumerable.call(object, 'prototype')) {
      return shimKeys(object);
    }
    return object && objectTypes[type]
      ? nativeKeys(object)
      : [];
  };

  /**
   * Merges enumerable properties of the source object(s) into the `destination`
   * object. Subsequent sources will overwrite propery assignments of previous
   * sources.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Object} object The destination object.
   * @param {Object} [source1, source2, ...] The source objects.
   * @param- {Object} [indicator] Internally used to indicate that the `stack`
   *  argument is an array of traversed objects instead of another source object.
   * @param- {Array} [stackA=[]] Internally used to track traversed source objects.
   * @param- {Array} [stackB=[]] Internally used to associate clones with their
   *  source counterparts.
   * @returns {Object} Returns the destination object.
   * @example
   *
   * var stooges = [
   *   { 'name': 'moe' },
   *   { 'name': 'larry' }
   * ];
   *
   * var ages = [
   *   { 'age': 40 },
   *   { 'age': 50 }
   * ];
   *
   * _.merge(stooges, ages);
   * // => [{ 'name': 'moe', 'age': 40 }, { 'name': 'larry', 'age': 50 }]
   */
  var merge = createIterator(extendIteratorOptions, {
    'args': 'object, source, indicator',
    'top':
      'var isArr, args = arguments, argsIndex = 0;\n' +
      'if (indicator == compareAscending) {\n' +
      '  var argsLength = 2, stackA = args[3], stackB = args[4]\n' +
      '} else {\n' +
      '  var argsLength = args.length, stackA = [], stackB = []\n' +
      '}\n' +
      'while (++argsIndex < argsLength) {\n' +
      '  if (iteratee = args[argsIndex]) {',
    'inLoop':
      'if ((source = value) && ((isArr = isArray(source)) || isPlainObject(source))) {\n' +
      '  var found = false, stackLength = stackA.length;\n' +
      '  while (stackLength--) {\n' +
      '    if (found = stackA[stackLength] == source) break\n' +
      '  }\n' +
      '  if (found) {\n' +
      '    result[index] = stackB[stackLength]\n' +
      '  } else {\n' +
      '    stackA.push(source);\n' +
      '    stackB.push(value = (value = result[index], isArr)\n' +
      '      ? (isArray(value) ? value : [])\n' +
      '      : (isPlainObject(value) ? value : {})\n' +
      '    );\n' +
      '    result[index] = callee(value, source, compareAscending, stackA, stackB)\n' +
      '  }\n' +
      '} else if (source != null) {\n' +
      '  result[index] = source\n' +
      '}'
  });

  /**
   * Creates a shallow clone of `object` excluding the specified properties.
   * Property names may be specified as individual arguments or as arrays of
   * property names. If `callback` is passed, it will be executed for each property
   * in the `object`, omitting the properties `callback` returns truthy for. The
   * `callback` is bound to `thisArg` and invoked with three arguments; (value, key, object).
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Object} object The source object.
   * @param {Function|String} callback|[prop1, prop2, ...] The properties to omit
   *  or the function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding of `callback`.
   * @returns {Object} Returns an object without the omitted properties.
   * @example
   *
   * _.omit({ 'name': 'moe', 'age': 40, 'userid': 'moe1' }, 'userid');
   * // => { 'name': 'moe', 'age': 40 }
   *
   * _.omit({ 'name': 'moe', '_hint': 'knucklehead', '_seed': '96c4eb' }, function(value, key) {
   *   return key.charAt(0) == '_';
   * });
   * // => { 'name': 'moe' }
   */
  var omit = createIterator(omitIteratorOptions);

  /**
   * Creates a two dimensional array of the given object's key-value pairs,
   * i.e. `[[key1, value1], [key2, value2]]`.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Object} object The object to inspect.
   * @returns {Array} Returns new array of key-value pairs.
   * @example
   *
   * _.pairs({ 'moe': 30, 'larry': 40, 'curly': 50 });
   * // => [['moe', 30], ['larry', 40], ['curly', 50]] (order is not guaranteed)
   */
  var pairs = createIterator({
    'args': 'object',
    'init':'[]',
    'inLoop': 'result'  + (isKeysFast ? '[ownIndex] = ' : '.push') + '([index, value])'
  });

  /**
   * Creates a shallow clone of `object` composed of the specified properties.
   * Property names may be specified as individual arguments or as arrays of
   * property names. If `callback` is passed, it will be executed for each property
   * in the `object`, picking the properties `callback` returns truthy for. The
   * `callback` is bound to `thisArg` and invoked with three arguments; (value, key, object).
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Object} object The source object.
   * @param {Function|String} callback|[prop1, prop2, ...] The properties to pick
   *  or the function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding of `callback`.
   * @returns {Object} Returns an object composed of the picked properties.
   * @example
   *
   * _.pick({ 'name': 'moe', 'age': 40, 'userid': 'moe1' }, 'name', 'age');
   * // => { 'name': 'moe', 'age': 40 }
   *
   * _.pick({ 'name': 'moe', '_hint': 'knucklehead', '_seed': '96c4eb' }, function(value, key) {
   *   return key.charAt(0) != '_';
   * });
   * // => { 'name': 'moe' }
   */
  var pick = createIterator(omitIteratorOptions, {
    'top':
      'if (typeof callback != \'function\') {\n' +
      '  var index = 0,\n' +
      '      props = concat.apply(ArrayProto, arguments),\n' +
      '      length = props.length;\n' +
      '  while (++index < length) {\n' +
      '    var prop = props[index];\n' +
      '    if (prop in object) result[prop] = object[prop]\n' +
      '  }\n' +
      '} else {\n' +
      '  callback = createCallback(callback, thisArg)',
    'inLoop':
      'if (callback(value, index, object)) result[index] = value',
    'bottom': '}'
  });

  /**
   * Creates an array composed of the own enumerable property values of `object`.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Object} object The object to inspect.
   * @returns {Array} Returns a new array of property values.
   * @example
   *
   * _.values({ 'one': 1, 'two': 2, 'three': 3 });
   * // => [1, 2, 3]
   */
  var values = createIterator({
    'args': 'object',
    'init': '[]',
    'inLoop': 'result.push(value)'
  });

  /*--------------------------------------------------------------------------*/

  /**
   * Checks if a given `target` element is present in a `collection` using strict
   * equality for comparisons, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @alias include
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Mixed} target The value to check for.
   * @returns {Boolean} Returns `true` if the `target` element is found, else `false`.
   * @example
   *
   * _.contains([1, 2, 3], 3);
   * // => true
   *
   * _.contains({ 'name': 'moe', 'age': 40 }, 'moe');
   * // => true
   *
   * _.contains('curly', 'ur');
   * // => true
   */
  var contains = createIterator({
    'args': 'collection, target',
    'init': 'false',
    'noCharByIndex': false,
    'beforeLoop': {
      'array': 'if (toString.call(collection) == stringClass) return collection.indexOf(target) > -1'
    },
    'inLoop': 'if (value === target) return true'
  });

  /**
   * Creates an object composed of keys returned from running each element of
   * `collection` through a `callback`. The corresponding value of each key is
   * the number of times the key was returned by `callback`. The `callback` is
   * bound to `thisArg` and invoked with three arguments; (value, index|key, collection).
   * The `callback` argument may also be the name of a property to count by (e.g. 'length').
   *
   * @static
   * @memberOf _
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Function|String} callback|property The function called per iteration
   *  or property name to count by.
   * @param {Mixed} [thisArg] The `this` binding of `callback`.
   * @returns {Object} Returns the composed aggregate object.
   * @example
   *
   * _.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });
   * // => { '4': 1, '6': 2 }
   *
   * _.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
   * // => { '4': 1, '6': 2 }
   *
   * _.countBy(['one', 'two', 'three'], 'length');
   * // => { '3': 2, '5': 1 }
   */
  var countBy = createIterator(baseIteratorOptions, countByIteratorOptions);

  /**
   * Checks if the `callback` returns a truthy value for **all** elements of a
   * `collection`. The `callback` is bound to `thisArg` and invoked with three
   * arguments; (value, index|key, collection).
   *
   * @static
   * @memberOf _
   * @alias all
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Function} [callback=identity] The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding of `callback`.
   * @returns {Boolean} Returns `true` if all elements pass the callback check,
   *  else `false`.
   * @example
   *
   * _.every([true, 1, null, 'yes'], Boolean);
   * // => false
   */
  var every = createIterator(baseIteratorOptions, everyIteratorOptions);

  /**
   * Examines each element in a `collection`, returning an array of all elements
   * the `callback` returns truthy for. The `callback` is bound to `thisArg` and
   * invoked with three arguments; (value, index|key, collection).
   *
   * @static
   * @memberOf _
   * @alias select
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Function} [callback=identity] The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding of `callback`.
   * @returns {Array} Returns a new array of elements that passed the callback check.
   * @example
   *
   * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
   * // => [2, 4, 6]
   */
  var filter = createIterator(baseIteratorOptions, filterIteratorOptions);

  /**
   * Examines each element in a `collection`, returning the first one the `callback`
   * returns truthy for. The function returns as soon as it finds an acceptable
   * element, and does not iterate over the entire `collection`. The `callback` is
   * bound to `thisArg` and invoked with three arguments; (value, index|key, collection).
   *
   * @static
   * @memberOf _
   * @alias detect
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Function} callback The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding of `callback`.
   * @returns {Mixed} Returns the element that passed the callback check,
   *  else `undefined`.
   * @example
   *
   * var even = _.find([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
   * // => 2
   */
  var find = createIterator(baseIteratorOptions, forEachIteratorOptions, {
    'init': 'undefined',
    'inLoop': 'if (callback(value, index, collection)) return value'
  });

  /**
   * Iterates over a `collection`, executing the `callback` for each element in
   * the `collection`. The `callback` is bound to `thisArg` and invoked with three
   * arguments; (value, index|key, collection). Callbacks may exit iteration early
   * by explicitly returning `false`.
   *
   * @static
   * @memberOf _
   * @alias each
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Function} callback The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding of `callback`.
   * @returns {Array|Object|String} Returns `collection`.
   * @example
   *
   * _([1, 2, 3]).forEach(alert).join(',');
   * // => alerts each number and returns '1,2,3'
   *
   * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, alert);
   * // => alerts each number (order is not guaranteed)
   */
  var forEach = createIterator(baseIteratorOptions, forEachIteratorOptions);

  /**
   * Creates an object composed of keys returned from running each element of
   * `collection` through a `callback`. The corresponding value of each key is an
   * array of elements passed to `callback` that returned the key. The `callback`
   * is bound to `thisArg` and invoked with three arguments; (value, index|key, collection).
   * The `callback` argument may also be the name of a property to count by (e.g. 'length').
   *
   * @static
   * @memberOf _
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Function|String} callback|property The function called per iteration
   *  or property name to group by.
   * @param {Mixed} [thisArg] The `this` binding of `callback`.
   * @returns {Object} Returns the composed aggregate object.
   * @example
   *
   * _.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });
   * // => { '4': [4.2], '6': [6.1, 6.4] }
   *
   * _.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
   * // => { '4': [4.2], '6': [6.1, 6.4] }
   *
   * _.groupBy(['one', 'two', 'three'], 'length');
   * // => { '3': ['one', 'two'], '5': ['three'] }
   */
  var groupBy = createIterator(baseIteratorOptions, countByIteratorOptions, {
    'inLoop':
      'var prop = callback(value, index, collection);\n' +
      '(hasOwnProperty.call(result, prop) ? result[prop] : result[prop] = []).push(value)'
  });

  /**
   * Invokes the method named by `methodName` on each element in the `collection`,
   * returning an array of the results of each invoked method. Additional arguments
   * will be passed to each invoked method. If `methodName` is a function it will
   * be invoked for, and `this` bound to, each element in the `collection`.
   *
   * @static
   * @memberOf _
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Function|String} methodName The name of the method to invoke or
   *  the function invoked per iteration.
   * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the method with.
   * @returns {Array} Returns a new array of the results of each invoked method.
   * @example
   *
   * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
   * // => [[1, 5, 7], [1, 2, 3]]
   *
   * _.invoke([123, 456], String.prototype.split, '');
   * // => [['1', '2', '3'], ['4', '5', '6']]
   */
  var invoke = createIterator(mapIteratorOptions, {
    'args': 'collection, methodName',
    'top':
      'var args = slice.call(arguments, 2),\n' +
      '    isFunc = typeof methodName == \'function\'',
    'inLoop': {
      'array':
        'result[index] = (isFunc ? methodName : value[methodName]).apply(value, args)',
      'object':
        'result' + (isKeysFast ? '[ownIndex] = ' : '.push') +
        '((isFunc ? methodName : value[methodName]).apply(value, args))'
    }
  });

  /**
   * Creates an array of values by running each element in the `collection`
   * through a `callback`. The `callback` is bound to `thisArg` and invoked with
   * three arguments; (value, index|key, collection).
   *
   * @static
   * @memberOf _
   * @alias collect
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Function} [callback=identity] The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding of `callback`.
   * @returns {Array} Returns a new array of the results of each `callback` execution.
   * @example
   *
   * _.map([1, 2, 3], function(num) { return num * 3; });
   * // => [3, 6, 9]
   *
   * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });
   * // => [3, 6, 9] (order is not guaranteed)
   */
  var map = createIterator(baseIteratorOptions, mapIteratorOptions);

  /**
   * Retrieves the maximum value of an `array`. If `callback` is passed,
   * it will be executed for each value in the `array` to generate the
   * criterion by which the value is ranked. The `callback` is bound to
   * `thisArg` and invoked with three arguments; (value, index, collection).
   *
   * @static
   * @memberOf _
   * @category Collections
   * @param {Array} collection The collection to iterate over.
   * @param {Function} [callback] The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding of `callback`.
   * @returns {Mixed} Returns the maximum value.
   * @example
   *
   * var stooges = [
   *   { 'name': 'moe', 'age': 40 },
   *   { 'name': 'larry', 'age': 50 },
   *   { 'name': 'curly', 'age': 60 }
   * ];
   *
   * _.max(stooges, function(stooge) { return stooge.age; });
   * // => { 'name': 'curly', 'age': 60 };
   */
  function max(collection, callback, thisArg) {
    var computed = -Infinity,
        index = -1,
        length = collection ? collection.length : 0,
        result = computed;

    if (callback || length !== +length) {
      callback = createCallback(callback, thisArg);
      forEach(collection, function(value, index, collection) {
        var current = callback(value, index, collection);
        if (current > computed) {
          computed = current;
          result = value;
        }
      });
    } else {
      while (++index < length) {
        if (collection[index] > result) {
          result = collection[index];
        }
      }
    }
    return result;
  }

  /**
   * Retrieves the minimum value of an `array`. If `callback` is passed,
   * it will be executed for each value in the `array` to generate the
   * criterion by which the value is ranked. The `callback` is bound to `thisArg`
   * and invoked with three arguments; (value, index, collection).
   *
   * @static
   * @memberOf _
   * @category Collections
   * @param {Array} collection The collection to iterate over.
   * @param {Function} [callback] The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding of `callback`.
   * @returns {Mixed} Returns the minimum value.
   * @example
   *
   * _.min([10, 5, 100, 2, 1000]);
   * // => 2
   */
  function min(collection, callback, thisArg) {
    var computed = Infinity,
        index = -1,
        length = collection ? collection.length : 0,
        result = computed;

    if (callback || length !== +length) {
      callback = createCallback(callback, thisArg);
      forEach(collection, function(value, index, collection) {
        var current = callback(value, index, collection);
        if (current < computed) {
          computed = current;
          result = value;
        }
      });
    } else {
      while (++index < length) {
        if (collection[index] < result) {
          result = collection[index];
        }
      }
    }
    return result;
  }

  /**
   * Retrieves the value of a specified property from all elements in
   * the `collection`.
   *
   * @static
   * @memberOf _
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {String} property The property to pluck.
   * @returns {Array} Returns a new array of property values.
   * @example
   *
   * var stooges = [
   *   { 'name': 'moe', 'age': 40 },
   *   { 'name': 'larry', 'age': 50 },
   *   { 'name': 'curly', 'age': 60 }
   * ];
   *
   * _.pluck(stooges, 'name');
   * // => ['moe', 'larry', 'curly']
   */
  var pluck = createIterator(mapIteratorOptions, {
    'args': 'collection, property',
    'inLoop': {
      'array':  'result[index] = value[property]',
      'object': 'result' + (isKeysFast ? '[ownIndex] = ' : '.push') + '(value[property])'
    }
  });

  /**
   * Boils down a `collection` to a single value. The initial state of the
   * reduction is `accumulator` and each successive step of it should be returned
   * by the `callback`. The `callback` is bound to `thisArg` and invoked with 4
   * arguments; for arrays they are (accumulator, value, index|key, collection).
   *
   * @static
   * @memberOf _
   * @alias foldl, inject
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Function} callback The function called per iteration.
   * @param {Mixed} [accumulator] Initial value of the accumulator.
   * @param {Mixed} [thisArg] The `this` binding of `callback`.
   * @returns {Mixed} Returns the accumulated value.
   * @example
   *
   * var sum = _.reduce([1, 2, 3], function(memo, num) { return memo + num; });
   * // => 6
   */
  var reduce = createIterator({
    'args': 'collection, callback, accumulator, thisArg',
    'init': 'accumulator',
    'top':
      'var noaccum = arguments.length < 3;\n' +
      'callback = createCallback(callback, thisArg)',
    'beforeLoop': {
      'array': 'if (noaccum) result = iteratee[++index]'
    },
    'inLoop': {
      'array':
        'result = callback(result, value, index, collection)',
      'object':
        'result = noaccum\n' +
        '  ? (noaccum = false, value)\n' +
        '  : callback(result, value, index, collection)'
    }
  });

  /**
   * The right-associative version of `_.reduce`.
   *
   * @static
   * @memberOf _
   * @alias foldr
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Function} callback The function called per iteration.
   * @param {Mixed} [accumulator] Initial value of the accumulator.
   * @param {Mixed} [thisArg] The `this` binding of `callback`.
   * @returns {Mixed} Returns the accumulated value.
   * @example
   *
   * var list = [[0, 1], [2, 3], [4, 5]];
   * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);
   * // => [4, 5, 2, 3, 0, 1]
   */
  function reduceRight(collection, callback, accumulator, thisArg) {
    var iteratee = collection,
        length = collection ? collection.length : 0,
        noaccum = arguments.length < 3;

    if (length !== +length) {
      var props = keys(collection);
      length = props.length;
    } else if (noCharByIndex && toString.call(collection) == stringClass) {
      iteratee = collection.split('');
    }
    forEach(collection, function(value, index, object) {
      index = props ? props[--length] : --length;
      accumulator = noaccum
        ? (noaccum = false, iteratee[index])
        : callback.call(thisArg, accumulator, iteratee[index], index, object);
    });
    return accumulator;
  }

  /**
   * The opposite of `_.filter`, this method returns the values of a
   * `collection` that `callback` does **not** return truthy for.
   *
   * @static
   * @memberOf _
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Function} [callback=identity] The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding of `callback`.
   * @returns {Array} Returns a new array of elements that did **not** pass the
   *  callback check.
   * @example
   *
   * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
   * // => [1, 3, 5]
   */
  var reject = createIterator(baseIteratorOptions, filterIteratorOptions, {
    'inLoop': '!' + filterIteratorOptions.inLoop
  });

  /**
   * Creates an array of shuffled `array` values, using a version of the
   * Fisher-Yates shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.
   *
   * @static
   * @memberOf _
   * @category Collections
   * @param {Array} collection The collection to shuffle.
   * @returns {Array} Returns a new shuffled collection.
   * @example
   *
   * _.shuffle([1, 2, 3, 4, 5, 6]);
   * // => [4, 1, 6, 3, 5, 2]
   */
  function shuffle(collection) {
    var index = -1,
        result = Array(collection ? collection.length : 0);

    forEach(collection, function(value) {
      var rand = floor(nativeRandom() * (++index + 1));
      result[index] = result[rand];
      result[rand] = value;
    });
    return result;
  }

  /**
   * Gets the size of the `collection` by returning `collection.length` for arrays
   * and array-like objects or the number of own enumerable properties for objects.
   *
   * @static
   * @memberOf _
   * @category Collections
   * @param {Array|Object|String} collection The collection to inspect.
   * @returns {Number} Returns `collection.length` or number of own enumerable properties.
   * @example
   *
   * _.size([1, 2]);
   * // => 2
   *
   * _.size({ 'one': 1, 'two': 2, 'three': 3 });
   * // => 3
   *
   * _.size('curly');
   * // => 5
   */
  function size(collection) {
    var length = collection ? collection.length : 0;
    return length === +length ? length : keys(collection).length;
  }

  /**
   * Checks if the `callback` returns a truthy value for **any** element of a
   * `collection`. The function returns as soon as it finds passing value, and
   * does not iterate over the entire `collection`. The `callback` is bound to
   * `thisArg` and invoked with three arguments; (value, index|key, collection).
   *
   * @static
   * @memberOf _
   * @alias any
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Function} [callback=identity] The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding of `callback`.
   * @returns {Boolean} Returns `true` if any element passes the callback check,
   *  else `false`.
   * @example
   *
   * _.some([null, 0, 'yes', false]);
   * // => true
   */
  var some = createIterator(baseIteratorOptions, everyIteratorOptions, {
    'init': 'false',
    'inLoop': everyIteratorOptions.inLoop.replace('!', '')
  });

  /**
   * Creates an array, stable sorted in ascending order by the results of
   * running each element of `collection` through a `callback`. The `callback`
   * is bound to `thisArg` and invoked with three arguments; (value, index|key, collection).
   * The `callback` argument may also be the name of a property to sort by (e.g. 'length').
   *
   * @static
   * @memberOf _
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Function|String} callback|property The function called per iteration
   *  or property name to sort by.
   * @param {Mixed} [thisArg] The `this` binding of `callback`.
   * @returns {Array} Returns a new array of sorted elements.
   * @example
   *
   * _.sortBy([1, 2, 3], function(num) { return Math.sin(num); });
   * // => [3, 1, 2]
   *
   * _.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);
   * // => [3, 1, 2]
   *
   * _.sortBy(['larry', 'brendan', 'moe'], 'length');
   * // => ['moe', 'larry', 'brendan']
   */
  var sortBy = createIterator(baseIteratorOptions, countByIteratorOptions, mapIteratorOptions, {
    'inLoop': {
      'array':
        'result[index] = {\n' +
        '  criteria: callback(value, index, collection),\n' +
        '  index: index,\n' +
        '  value: value\n' +
        '}',
      'object':
        'result' + (isKeysFast ? '[ownIndex] = ' : '.push') + '({\n' +
        '  criteria: callback(value, index, collection),\n' +
        '  index: index,\n' +
        '  value: value\n' +
        '})'
    },
    'bottom':
      'result.sort(compareAscending);\n' +
      'length = result.length;\n' +
      'while (length--) {\n' +
      '  result[length] = result[length].value\n' +
      '}'
  });

  /**
   * Converts the `collection`, to an array.
   *
   * @static
   * @memberOf _
   * @category Collections
   * @param {Array|Object|String} collection The collection to convert.
   * @returns {Array} Returns the new converted array.
   * @example
   *
   * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);
   * // => [2, 3, 4]
   */
  function toArray(collection) {
    if (!collection) {
      return [];
    }
    var length = collection.length;
    if (length === +length) {
      return (noArraySliceOnStrings ? toString.call(collection) == stringClass : typeof collection == 'string')
        ? collection.split('')
        : slice.call(collection);
    }
    return values(collection);
  }

  /**
   * Examines each element in a `collection`, returning an array of all elements
   * that contain the given `properties`.
   *
   * @static
   * @memberOf _
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Object} properties The object of properties/values to filter by.
   * @returns {Array} Returns a new array of elements that contain the given `properties`.
   * @example
   *
   * var stooges = [
   *   { 'name': 'moe', 'age': 40 },
   *   { 'name': 'larry', 'age': 50 },
   *   { 'name': 'curly', 'age': 60 }
   * ];
   *
   * _.where(stooges, { 'age': 40 });
   * // => [{ 'name': 'moe', 'age': 40 }]
   */
  var where = createIterator(filterIteratorOptions, {
    'args': 'collection, properties',
    'top':
      'var props = [];\n' +
      'forIn(properties, function(value, prop) { props.push(prop) });\n' +
      'var propsLength = props.length',
    'inLoop':
      'for (var pass = true, propIndex = 0; propIndex < propsLength; propIndex++) {\n' +
      '  var prop = props[propIndex];\n' +
      '  if (!(pass = value[prop] === properties[prop])) break\n' +
      '}\n' +
      'pass && result.push(value)'
  });

  /*--------------------------------------------------------------------------*/

  /**
   * Creates an array with all falsey values of `array` removed. The values
   * `false`, `null`, `0`, `""`, `undefined` and `NaN` are all falsey.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} array The array to compact.
   * @returns {Array} Returns a new filtered array.
   * @example
   *
   * _.compact([0, 1, false, 2, '', 3]);
   * // => [1, 2, 3]
   */
  function compact(array) {
    var index = -1,
        length = array ? array.length : 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value) {
        result.push(value);
      }
    }
    return result;
  }

  /**
   * Creates an array of `array` elements not present in the other arrays
   * using strict equality for comparisons, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} array The array to process.
   * @param {Array} [array1, array2, ...] Arrays to check.
   * @returns {Array} Returns a new array of `array` elements not present in the
   *  other arrays.
   * @example
   *
   * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);
   * // => [1, 3, 4]
   */
  function difference(array) {
    var result = [];
    if (!array) {
      return result;
    }
    var index = -1,
        length = array.length,
        flattened = concat.apply(ArrayProto, arguments),
        contains = cachedContains(flattened, length);

    while (++index < length) {
      var value = array[index];
      if (!contains(value)) {
        result.push(value);
      }
    }
    return result;
  }

  /**
   * Gets the first element of the `array`. Pass `n` to return the first `n`
   * elements of the `array`.
   *
   * @static
   * @memberOf _
   * @alias head, take
   * @category Arrays
   * @param {Array} array The array to query.
   * @param {Number} [n] The number of elements to return.
   * @param- {Object} [guard] Internally used to allow this method to work with
   *  others like `_.map` without using their callback `index` argument for `n`.
   * @returns {Mixed} Returns the first element or an array of the first `n`
   *  elements of `array`.
   * @example
   *
   * _.first([5, 4, 3, 2, 1]);
   * // => 5
   */
  function first(array, n, guard) {
    if (array) {
      return (n == null || guard) ? array[0] : slice.call(array, 0, n);
    }
  }

  /**
   * Flattens a nested array (the nesting can be to any depth). If `shallow` is
   * truthy, `array` will only be flattened a single level.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} array The array to compact.
   * @param {Boolean} shallow A flag to indicate only flattening a single level.
   * @returns {Array} Returns a new flattened array.
   * @example
   *
   * _.flatten([1, [2], [3, [[4]]]]);
   * // => [1, 2, 3, 4];
   *
   * _.flatten([1, [2], [3, [[4]]]], true);
   * // => [1, 2, 3, [[4]]];
   */
  function flatten(array, shallow) {
    var index = -1,
        length = array ? array.length : 0,
        result = [];

    while (++index < length) {
      var value = array[index];

      // recursively flatten arrays (susceptible to call stack limits)
      if (isArray(value)) {
        push.apply(result, shallow ? value : flatten(value));
      } else {
        result.push(value);
      }
    }
    return result;
  }

  /**
   * Gets the index at which the first occurrence of `value` is found using
   * strict equality for comparisons, i.e. `===`. If the `array` is already
   * sorted, passing `true` for `fromIndex` will run a faster binary search.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} array The array to search.
   * @param {Mixed} value The value to search for.
   * @param {Boolean|Number} [fromIndex=0] The index to start searching from or
   *  `true` to perform a binary search on a sorted `array`.
   * @returns {Number} Returns the index of the matched value or `-1`.
   * @example
   *
   * _.indexOf([1, 2, 3, 1, 2, 3], 2);
   * // => 1
   *
   * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);
   * // => 4
   *
   * _.indexOf([1, 1, 2, 2, 3, 3], 2, true);
   * // => 2
   */
  function indexOf(array, value, fromIndex) {
    var index = -1,
        length = array ? array.length : 0;

    if (typeof fromIndex == 'number') {
      index = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0) - 1;
    } else if (fromIndex) {
      index = sortedIndex(array, value);
      return array[index] === value ? index : -1;
    }
    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Gets all but the last element of `array`. Pass `n` to exclude the last `n`
   * elements from the result.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} array The array to query.
   * @param {Number} [n] The number of elements to return.
   * @param- {Object} [guard] Internally used to allow this method to work with
   *  others like `_.map` without using their callback `index` argument for `n`.
   * @returns {Array} Returns all but the last element or `n` elements of `array`.
   * @example
   *
   * _.initial([3, 2, 1]);
   * // => [3, 2]
   */
  function initial(array, n, guard) {
    return array
      ? slice.call(array, 0, -((n == null || guard) ? 1 : n))
      : [];
  }

  /**
   * Computes the intersection of all the passed-in arrays using strict equality
   * for comparisons, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} [array1, array2, ...] Arrays to process.
   * @returns {Array} Returns a new array of unique elements, in order, that are
   *  present in **all** of the arrays.
   * @example
   *
   * _.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]);
   * // => [1, 2]
   */
  function intersection(array) {
    var argsLength = arguments.length,
        cache = [],
        index = -1,
        length = array ? array.length : 0,
        result = [];

    array: while (++index < length) {
      var value = array[index];
      if (indexOf(result, value) < 0) {
        for (var argsIndex = 1; argsIndex < argsLength; argsIndex++) {
          if (!(cache[argsIndex] || (cache[argsIndex] = cachedContains(arguments[argsIndex])))(value)) {
            continue array;
          }
        }
        result.push(value);
      }
    }
    return result;
  }

  /**
   * Gets the last element of the `array`. Pass `n` to return the last `n`
   * elements of the `array`.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} array The array to query.
   * @param {Number} [n] The number of elements to return.
   * @param- {Object} [guard] Internally used to allow this method to work with
   *  others like `_.map` without using their callback `index` argument for `n`.
   * @returns {Mixed} Returns the last element or an array of the last `n`
   *  elements of `array`.
   * @example
   *
   * _.last([3, 2, 1]);
   * // => 1
   */
  function last(array, n, guard) {
    if (array) {
      var length = array.length;
      return (n == null || guard) ? array[length - 1] : slice.call(array, -n || length);
    }
  }

  /**
   * Gets the index at which the last occurrence of `value` is found using
   * strict equality for comparisons, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} array The array to search.
   * @param {Mixed} value The value to search for.
   * @param {Number} [fromIndex=array.length-1] The index to start searching from.
   * @returns {Number} Returns the index of the matched value or `-1`.
   * @example
   *
   * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);
   * // => 4
   *
   * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);
   * // => 1
   */
  function lastIndexOf(array, value, fromIndex) {
    var index = array ? array.length : 0;
    if (typeof fromIndex == 'number') {
      index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;
    }
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Creates an object composed from arrays of `keys` and `values`. Pass either
   * a single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`, or
   * two arrays, one of `keys` and one of corresponding `values`.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} keys The array of keys.
   * @param {Array} [values=[]] The array of values.
   * @returns {Object} Returns an object composed of the given keys and
   *  corresponding values.
   * @example
   *
   * _.object(['moe', 'larry', 'curly'], [30, 40, 50]);
   * // => { 'moe': 30, 'larry': 40, 'curly': 50 }
   */
  function object(keys, values) {
    var index = -1,
        length = keys ? keys.length : 0,
        result = {};

    while (++index < length) {
      var key = keys[index];
      if (values) {
        result[key] = values[index];
      } else {
        result[key[0]] = key[1];
      }
    }
    return result;
  }

  /**
   * Creates an array of numbers (positive and/or negative) progressing from
   * `start` up to but not including `stop`. This method is a port of Python's
   * `range()` function. See http://docs.python.org/library/functions.html#range.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Number} [start=0] The start of the range.
   * @param {Number} end The end of the range.
   * @param {Number} [step=1] The value to increment or descrement by.
   * @returns {Array} Returns a new range array.
   * @example
   *
   * _.range(10);
   * // => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
   *
   * _.range(1, 11);
   * // => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
   *
   * _.range(0, 30, 5);
   * // => [0, 5, 10, 15, 20, 25]
   *
   * _.range(0, -10, -1);
   * // => [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]
   *
   * _.range(0);
   * // => []
   */
  function range(start, end, step) {
    start = +start || 0;
    step = +step || 1;

    if (end == null) {
      end = start;
      start = 0;
    }
    // use `Array(length)` so V8 will avoid the slower "dictionary" mode
    // http://www.youtube.com/watch?v=XAqIpGU8ZZk#t=16m27s
    var index = -1,
        length = nativeMax(0, ceil((end - start) / step)),
        result = Array(length);

    while (++index < length) {
      result[index] = start;
      start += step;
    }
    return result;
  }

  /**
   * The opposite of `_.initial`, this method gets all but the first value of
   * `array`. Pass `n` to exclude the first `n` values from the result.
   *
   * @static
   * @memberOf _
   * @alias drop, tail
   * @category Arrays
   * @param {Array} array The array to query.
   * @param {Number} [n] The number of elements to return.
   * @param- {Object} [guard] Internally used to allow this method to work with
   *  others like `_.map` without using their callback `index` argument for `n`.
   * @returns {Array} Returns all but the first value or `n` values of `array`.
   * @example
   *
   * _.rest([3, 2, 1]);
   * // => [2, 1]
   */
  function rest(array, n, guard) {
    return array
      ? slice.call(array, (n == null || guard) ? 1 : n)
      : [];
  }

  /**
   * Uses a binary search to determine the smallest index at which the `value`
   * should be inserted into `array` in order to maintain the sort order of the
   * sorted `array`. If `callback` is passed, it will be executed for `value` and
   * each element in `array` to compute their sort ranking. The `callback` is
   * bound to `thisArg` and invoked with one argument; (value). The `callback`
   * argument may also be the name of a property to order by.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} array The array to iterate over.
   * @param {Mixed} value The value to evaluate.
   * @param {Function|String} [callback=identity|property] The function called
   *  per iteration or property name to order by.
   * @param {Mixed} [thisArg] The `this` binding of `callback`.
   * @returns {Number} Returns the index at which the value should be inserted
   *  into `array`.
   * @example
   *
   * _.sortedIndex([20, 30, 50], 40);
   * // => 2
   *
   * _.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
   * // => 2
   *
   * var dict = {
   *   'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }
   * };
   *
   * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
   *   return dict.wordToNumber[word];
   * });
   * // => 2
   *
   * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
   *   return this.wordToNumber[word];
   * }, dict);
   * // => 2
   */
  function sortedIndex(array, value, callback, thisArg) {
    var low = 0,
        high = array ? array.length : low;

    if (callback) {
      callback = createCallback(callback, thisArg);
      value = callback(value);
      while (low < high) {
        var mid = (low + high) >>> 1;
        callback(array[mid]) < value ? low = mid + 1 : high = mid;
      }
    } else {
      while (low < high) {
        var mid = (low + high) >>> 1;
        array[mid] < value ? low = mid + 1 : high = mid;
      }
    }
    return low;
  }

  /**
   * Computes the union of the passed-in arrays using strict equality for
   * comparisons, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} [array1, array2, ...] Arrays to process.
   * @returns {Array} Returns a new array of unique values, in order, that are
   *  present in one or more of the arrays.
   * @example
   *
   * _.union([1, 2, 3], [101, 2, 1, 10], [2, 1]);
   * // => [1, 2, 3, 101, 10]
   */
  function union() {
    var index = -1,
        flattened = concat.apply(ArrayProto, arguments),
        length = flattened.length,
        result = [];

    while (++index < length) {
      var value = flattened[index];
      if (indexOf(result, value) < 0) {
        result.push(value);
      }
    }
    return result;
  }

  /**
   * Creates a duplicate-value-free version of the `array` using strict equality
   * for comparisons, i.e. `===`. If the `array` is already sorted, passing `true`
   * for `isSorted` will run a faster algorithm. If `callback` is passed, each
   * element of `array` is passed through a callback` before uniqueness is computed.
   * The `callback` is bound to `thisArg` and invoked with three arguments; (value, index, array).
   *
   * @static
   * @memberOf _
   * @alias unique
   * @category Arrays
   * @param {Array} array The array to process.
   * @param {Boolean} [isSorted=false] A flag to indicate that the `array` is already sorted.
   * @param {Function} [callback=identity] The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding of `callback`.
   * @returns {Array} Returns a duplicate-value-free array.
   * @example
   *
   * _.uniq([1, 2, 1, 3, 1]);
   * // => [1, 2, 3]
   *
   * _.uniq([1, 1, 2, 2, 3], true);
   * // => [1, 2, 3]
   *
   * _.uniq([1, 2, 1.5, 3, 2.5], function(num) { return Math.floor(num); });
   * // => [1, 2, 3]
   *
   * _.uniq([1, 2, 1.5, 3, 2.5], function(num) { return this.floor(num); }, Math);
   * // => [1, 2, 3]
   */
  function uniq(array, isSorted, callback, thisArg) {
    var index = -1,
        length = array ? array.length : 0,
        result = [],
        seen = [];

    // juggle arguments
    if (typeof isSorted == 'function') {
      thisArg = callback;
      callback = isSorted;
      isSorted = false;
    }
    callback = createCallback(callback, thisArg);
    while (++index < length) {
      var computed = callback(array[index], index, array);
      if (isSorted
            ? !index || seen[seen.length - 1] !== computed
            : indexOf(seen, computed) < 0
          ) {
        seen.push(computed);
        result.push(array[index]);
      }
    }
    return result;
  }

  /**
   * Creates an array with all occurrences of the passed values removed using
   * strict equality for comparisons, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} array The array to filter.
   * @param {Mixed} [value1, value2, ...] Values to remove.
   * @returns {Array} Returns a new filtered array.
   * @example
   *
   * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
   * // => [2, 3, 4]
   */
  function without(array) {
    var index = -1,
        length = array ? array.length : 0,
        contains = cachedContains(arguments, 1, 20),
        result = [];

    while (++index < length) {
      var value = array[index];
      if (!contains(value)) {
        result.push(value);
      }
    }
    return result;
  }

  /**
   * Groups the elements of each array at their corresponding indexes. Useful for
   * separate data sources that are coordinated through matching array indexes.
   * For a matrix of nested arrays, `_.zip.apply(...)` can transpose the matrix
   * in a similar fashion.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} [array1, array2, ...] Arrays to process.
   * @returns {Array} Returns a new array of grouped elements.
   * @example
   *
   * _.zip(['moe', 'larry', 'curly'], [30, 40, 50], [true, false, false]);
   * // => [['moe', 30, true], ['larry', 40, false], ['curly', 50, false]]
   */
  function zip(array) {
    var index = -1,
        length = array ? max(pluck(arguments, 'length')) : 0,
        result = Array(length);

    while (++index < length) {
      result[index] = pluck(arguments, index);
    }
    return result;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Creates a function that is restricted to executing only after it is
   * called `n` times.
   *
   * @static
   * @memberOf _
   * @category Functions
   * @param {Number} n The number of times the function must be called before
   * it is executed.
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new restricted function.
   * @example
   *
   * var renderNotes = _.after(notes.length, render);
   * _.forEach(notes, function(note) {
   *   note.asyncSave({ 'success': renderNotes });
   * });
   * // `renderNotes` is run once, after all notes have saved
   */
  function after(n, func) {
    if (n < 1) {
      return func();
    }
    return function() {
      if (--n < 1) {
        return func.apply(this, arguments);
      }
    };
  }

  /**
   * Creates a function that, when called, invokes `func` with the `this`
   * binding of `thisArg` and prepends any additional `bind` arguments to those
   * passed to the bound function.
   *
   * @static
   * @memberOf _
   * @category Functions
   * @param {Function} func The function to bind.
   * @param {Mixed} [thisArg] The `this` binding of `func`.
   * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.
   * @returns {Function} Returns the new bound function.
   * @example
   *
   * var func = function(greeting) {
   *   return greeting + ' ' + this.name;
   * };
   *
   * func = _.bind(func, { 'name': 'moe' }, 'hi');
   * func();
   * // => 'hi moe'
   */
  function bind(func, thisArg) {
    // use `Function#bind` if it exists and is fast
    // (in V8 `Function#bind` is slower except when partially applied)
    return isBindFast || (nativeBind && arguments.length > 2)
      ? nativeBind.call.apply(nativeBind, arguments)
      : createBound(func, thisArg, slice.call(arguments, 2));
  }

  /**
   * Binds methods on `object` to `object`, overwriting the existing method.
   * If no method names are provided, all the function properties of `object`
   * will be bound.
   *
   * @static
   * @memberOf _
   * @category Functions
   * @param {Object} object The object to bind and assign the bound methods to.
   * @param {String} [methodName1, methodName2, ...] Method names on the object to bind.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var buttonView = {
   *  'label': 'lodash',
   *  'onClick': function() { alert('clicked: ' + this.label); }
   * };
   *
   * _.bindAll(buttonView);
   * jQuery('#lodash_button').on('click', buttonView.onClick);
   * // => When the button is clicked, `this.label` will have the correct value
   */
  var bindAll = createIterator({
    'useHas': false,
    'useStrict': false,
    'args': 'object',
    'top':
      'var funcs = arguments,\n' +
      '    index = 0,\n' +
      '    length = funcs.length;\n' +
      'if (length > 1) {\n' +
      '  while (++index < length) {\n' +
      '    result[funcs[index]] = bind(result[funcs[index]], result)\n' +
      '  }\n' +
      '  return result\n' +
      '}',
    'inLoop':
      'if (isFunction(value)) result[index] = bind(value, result)'
  });

  /**
   * Creates a function that is the composition of the passed functions,
   * where each function consumes the return value of the function that follows.
   * In math terms, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.
   *
   * @static
   * @memberOf _
   * @category Functions
   * @param {Function} [func1, func2, ...] Functions to compose.
   * @returns {Function} Returns the new composed function.
   * @example
   *
   * var greet = function(name) { return 'hi: ' + name; };
   * var exclaim = function(statement) { return statement + '!'; };
   * var welcome = _.compose(exclaim, greet);
   * welcome('moe');
   * // => 'hi: moe!'
   */
  function compose() {
    var funcs = arguments;
    return function() {
      var args = arguments,
          length = funcs.length;

      while (length--) {
        args = [funcs[length].apply(this, args)];
      }
      return args[0];
    };
  }

  /**
   * Creates a function that will delay the execution of `func` until after
   * `wait` milliseconds have elapsed since the last time it was invoked. Pass
   * `true` for `immediate` to cause debounce to invoke `func` on the leading,
   * instead of the trailing, edge of the `wait` timeout. Subsequent calls to
   * the debounced function will return the result of the last `func` call.
   *
   * @static
   * @memberOf _
   * @category Functions
   * @param {Function} func The function to debounce.
   * @param {Number} wait The number of milliseconds to delay.
   * @param {Boolean} immediate A flag to indicate execution is on the leading
   *  edge of the timeout.
   * @returns {Function} Returns the new debounced function.
   * @example
   *
   * var lazyLayout = _.debounce(calculateLayout, 300);
   * jQuery(window).on('resize', lazyLayout);
   */
  function debounce(func, wait, immediate) {
    var args,
        result,
        thisArg,
        timeoutId;

    function delayed() {
      timeoutId = null;
      if (!immediate) {
        result = func.apply(thisArg, args);
      }
    }

    return function() {
      var isImmediate = immediate && !timeoutId;
      args = arguments;
      thisArg = this;

      clearTimeout(timeoutId);
      timeoutId = setTimeout(delayed, wait);

      if (isImmediate) {
        result = func.apply(thisArg, args);
      }
      return result;
    };
  }

  /**
   * Executes the `func` function after `wait` milliseconds. Additional arguments
   * will be passed to `func` when it is invoked.
   *
   * @static
   * @memberOf _
   * @category Functions
   * @param {Function} func The function to delay.
   * @param {Number} wait The number of milliseconds to delay execution.
   * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the function with.
   * @returns {Number} Returns the `setTimeout` timeout id.
   * @example
   *
   * var log = _.bind(console.log, console);
   * _.delay(log, 1000, 'logged later');
   * // => 'logged later' (Appears after one second.)
   */
  function delay(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function() { return func.apply(undefined, args); }, wait);
  }

  /**
   * Defers executing the `func` function until the current call stack has cleared.
   * Additional arguments will be passed to `func` when it is invoked.
   *
   * @static
   * @memberOf _
   * @category Functions
   * @param {Function} func The function to defer.
   * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the function with.
   * @returns {Number} Returns the `setTimeout` timeout id.
   * @example
   *
   * _.defer(function() { alert('deferred'); });
   * // returns from the function before `alert` is called
   */
  function defer(func) {
    var args = slice.call(arguments, 1);
    return setTimeout(function() { return func.apply(undefined, args); }, 1);
  }

  /**
   * Creates a function that, when called, invokes `object[methodName]` and
   * prepends any additional `lateBind` arguments to those passed to the bound
   * function. This method differs from `_.bind` by allowing bound functions to
   * reference methods that will be redefined or don't yet exist.
   *
   * @static
   * @memberOf _
   * @category Functions
   * @param {Object} object The object the method belongs to.
   * @param {String} methodName The method name.
   * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.
   * @returns {Function} Returns the new bound function.
   * @example
   *
   * var object = {
   *   'name': 'moe',
   *   'greet': function(greeting) {
   *     return greeting + ' ' + this.name;
   *   }
   * };
   *
   * var func = _.lateBind(object, 'greet', 'hi');
   * func();
   * // => 'hi moe'
   *
   * object.greet = function(greeting) {
   *   return greeting + ', ' + this.name + '!';
   * };
   *
   * func();
   * // => 'hi, moe!'
   */
  function lateBind(object, methodName) {
    return createBound(methodName, object, slice.call(arguments, 2));
  }

  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * passed, it will be used to determine the cache key for storing the result
   * based on the arguments passed to the memoized function. By default, the first
   * argument passed to the memoized function is used as the cache key.
   *
   * @static
   * @memberOf _
   * @category Functions
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] A function used to resolve the cache key.
   * @returns {Function} Returns the new memoizing function.
   * @example
   *
   * var fibonacci = _.memoize(function(n) {
   *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
   * });
   */
  function memoize(func, resolver) {
    var cache = {};
    return function() {
      var prop = resolver ? resolver.apply(this, arguments) : arguments[0];
      return hasOwnProperty.call(cache, prop)
        ? cache[prop]
        : (cache[prop] = func.apply(this, arguments));
    };
  }

  /**
   * Creates a function that is restricted to one execution. Repeat calls to
   * the function will return the value of the first call.
   *
   * @static
   * @memberOf _
   * @category Functions
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new restricted function.
   * @example
   *
   * var initialize = _.once(createApplication);
   * initialize();
   * initialize();
   * // Application is only created once.
   */
  function once(func) {
    var result,
        ran = false;

    return function() {
      if (ran) {
        return result;
      }
      ran = true;
      result = func.apply(this, arguments);

      // clear the `func` variable so the function may be garbage collected
      func = null;
      return result;
    };
  }

  /**
   * Creates a function that, when called, invokes `func` with any additional
   * `partial` arguments prepended to those passed to the new function. This method
   * is similar to `bind`, except it does **not** alter the `this` binding.
   *
   * @static
   * @memberOf _
   * @category Functions
   * @param {Function} func The function to partially apply arguments to.
   * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.
   * @returns {Function} Returns the new partially applied function.
   * @example
   *
   * var greet = function(greeting, name) { return greeting + ': ' + name; };
   * var hi = _.partial(greet, 'hi');
   * hi('moe');
   * // => 'hi: moe'
   */
  function partial(func) {
    return createBound(func, slice.call(arguments, 1));
  }

  /**
   * Creates a function that, when executed, will only call the `func`
   * function at most once per every `wait` milliseconds. If the throttled
   * function is invoked more than once during the `wait` timeout, `func` will
   * also be called on the trailing edge of the timeout. Subsequent calls to the
   * throttled function will return the result of the last `func` call.
   *
   * @static
   * @memberOf _
   * @category Functions
   * @param {Function} func The function to throttle.
   * @param {Number} wait The number of milliseconds to throttle executions to.
   * @returns {Function} Returns the new throttled function.
   * @example
   *
   * var throttled = _.throttle(updatePosition, 100);
   * jQuery(window).on('scroll', throttled);
   */
  function throttle(func, wait) {
    var args,
        result,
        thisArg,
        timeoutId,
        lastCalled = 0;

    function trailingCall() {
      lastCalled = new Date;
      timeoutId = null;
      result = func.apply(thisArg, args);
    }

    return function() {
      var now = new Date,
          remain = wait - (now - lastCalled);

      args = arguments;
      thisArg = this;

      if (remain <= 0) {
        clearTimeout(timeoutId);
        lastCalled = now;
        result = func.apply(thisArg, args);
      }
      else if (!timeoutId) {
        timeoutId = setTimeout(trailingCall, remain);
      }
      return result;
    };
  }

  /**
   * Creates a function that passes `value` to the `wrapper` function as its
   * first argument. Additional arguments passed to the new function are appended
   * to those passed to the `wrapper` function.
   *
   * @static
   * @memberOf _
   * @category Functions
   * @param {Mixed} value The value to wrap.
   * @param {Function} wrapper The wrapper function.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var hello = function(name) { return 'hello: ' + name; };
   * hello = _.wrap(hello, function(func) {
   *   return 'before, ' + func('moe') + ', after';
   * });
   * hello();
   * // => 'before, hello: moe, after'
   */
  function wrap(value, wrapper) {
    return function() {
      var args = [value];
      if (arguments.length) {
        push.apply(args, arguments);
      }
      return wrapper.apply(this, args);
    };
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Converts the characters `&`, `<`, `>`, `"`, and `'` in `string` to their
   * corresponding HTML entities.
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {String} string The string to escape.
   * @returns {String} Returns the escaped string.
   * @example
   *
   * _.escape('Moe, Larry & Curly');
   * // => "Moe, Larry &amp; Curly"
   */
  function escape(string) {
    return string == null ? '' : (string + '').replace(reUnescapedHtml, escapeHtmlChar);
  }

  /**
   * This function returns the first argument passed to it.
   *
   * Note: It is used throughout Lo-Dash as a default callback.
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {Mixed} value Any value.
   * @returns {Mixed} Returns `value`.
   * @example
   *
   * var moe = { 'name': 'moe' };
   * moe === _.identity(moe);
   * // => true
   */
  function identity(value) {
    return value;
  }

  /**
   * Adds functions properties of `object` to the `lodash` function and chainable
   * wrapper.
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {Object} object The object of function properties to add to `lodash`.
   * @example
   *
   * _.mixin({
   *   'capitalize': function(string) {
   *     return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
   *   }
   * });
   *
   * _.capitalize('larry');
   * // => 'Larry'
   *
   * _('curly').capitalize();
   * // => 'Curly'
   */
  function mixin(object) {
    forEach(functions(object), function(methodName) {
      var func = lodash[methodName] = object[methodName];

      lodash.prototype[methodName] = function() {
        var args = [this.__wrapped__];
        if (arguments.length) {
          push.apply(args, arguments);
        }
        var result = func.apply(lodash, args);
        if (this.__chain__) {
          result = new lodash(result);
          result.__chain__ = true;
        }
        return result;
      };
    });
  }

  /**
   * Reverts the '_' variable to its previous value and returns a reference to
   * the `lodash` function.
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @returns {Function} Returns the `lodash` function.
   * @example
   *
   * var lodash = _.noConflict();
   */
  function noConflict() {
    window._ = oldDash;
    return this;
  }

  /**
   * Produces a random number between `min` and `max` (inclusive). If only one
   * argument is passed, a number between `0` and the given number will be returned.
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {Number} [min=0] The minimum possible value.
   * @param {Number} [max=1] The maximum possible value.
   * @returns {Number} Returns a random number.
   * @example
   *
   * _.random(0, 5);
   * // => a number between 1 and 5
   *
   * _.random(5);
   * // => also a number between 1 and 5
   */
  function random(min, max) {
    if (min == null && max == null) {
      max = 1;
    }
    min = +min || 0;
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + floor(nativeRandom() * ((+max || 0) - min + 1));
  }

  /**
   * Resolves the value of `property` on `object`. If `property` is a function
   * it will be invoked and its result returned, else the property value is
   * returned. If `object` is falsey, then `null` is returned.
   *
   * @deprecated
   * @static
   * @memberOf _
   * @category Utilities
   * @param {Object} object The object to inspect.
   * @param {String} property The property to get the value of.
   * @returns {Mixed} Returns the resolved value.
   * @example
   *
   * var object = {
   *   'cheese': 'crumpets',
   *   'stuff': function() {
   *     return 'nonsense';
   *   }
   * };
   *
   * _.result(object, 'cheese');
   * // => 'crumpets'
   *
   * _.result(object, 'stuff');
   * // => 'nonsense'
   */
  function result(object, property) {
    // based on Backbone's private `getValue` function
    // https://github.com/documentcloud/backbone/blob/0.9.2/backbone.js#L1419-1424
    var value = object ? object[property] : null;
    return isFunction(value) ? object[property]() : value;
  }

  /**
   * A micro-templating method that handles arbitrary delimiters, preserves
   * whitespace, and correctly escapes quotes within interpolated code.
   *
   * Note: In the development build `_.template` utilizes sourceURLs for easier
   * debugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
   *
   * Note: Lo-Dash may be used in Chrome extensions by either creating a `lodash csp`
   * build and avoiding `_.template` use, or loading Lo-Dash in a sandboxed page.
   * See http://developer.chrome.com/trunk/extensions/sandboxingEval.html
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {String} text The template text.
   * @param {Obect} data The data object used to populate the text.
   * @param {Object} options The options object.
   * @returns {Function|String} Returns a compiled function when no `data` object
   *  is given, else it returns the interpolated text.
   * @example
   *
   * // using a compiled template
   * var compiled = _.template('hello: <%= name %>');
   * compiled({ 'name': 'moe' });
   * // => 'hello: moe'
   *
   * var list = '<% _.forEach(people, function(name) { %><li><%= name %></li><% }); %>';
   * _.template(list, { 'people': ['moe', 'larry', 'curly'] });
   * // => '<li>moe</li><li>larry</li><li>curly</li>'
   *
   * // using the "escape" delimiter to escape HTML in data property values
   * _.template('<b><%- value %></b>', { 'value': '<script>' });
   * // => '<b>&lt;script></b>'
   *
   * // using the internal `print` function in "evaluate" delimiters
   * _.template('<% print("Hello " + epithet); %>.', { 'epithet': 'stooge' });
   * // => 'Hello stooge.'
   *
   * // using custom template delimiter settings
   * _.templateSettings = {
   *   'interpolate': /\{\{([\s\S]+?)\}\}/g
   * };
   *
   * _.template('Hello {{ name }}!', { 'name': 'Mustache' });
   * // => 'Hello Mustache!'
   *
   * // using the `variable` option to ensure a with-statement isn't used in the compiled template
   * var compiled = _.template('hello: <%= data.name %>', null, { 'variable': 'data' });
   * compiled.source;
   * // => function(data) {
   *   var __t, __p = '', __e = _.escape;
   *   __p += 'hello: ' + ((__t = ( data.name )) == null ? '' : __t);
   *   return __p;
   * }
   *
   * // using the `source` property to inline compiled templates for meaningful
   * // line numbers in error messages and a stack trace
   * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
   *   var JST = {\
   *     "main": ' + _.template(mainText).source + '\
   *   };\
   * ');
   */
  function template(text, data, options) {
    // based on John Resig's `tmpl` implementation
    // http://ejohn.org/blog/javascript-micro-templating/
    // and Laura Doktorova's doT.js
    // https://github.com/olado/doT
    text || (text = '');
    options || (options = {});

    var isEvaluating,
        result,
        index = 0,
        settings = lodash.templateSettings,
        source = "__p += '",
        variable = options.variable || settings.variable,
        hasVariable = variable;

    // compile regexp to match each delimiter
    var reDelimiters = RegExp(
      (options.escape || settings.escape || reNoMatch).source + '|' +
      (options.interpolate || settings.interpolate || reNoMatch).source + '|' +
      (options.evaluate || settings.evaluate || reNoMatch).source + '|$'
    , 'g');

    text.replace(reDelimiters, function(match, escapeValue, interpolateValue, evaluateValue, offset) {
      // escape characters that cannot be included in string literals
      source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);

      // replace delimiters with snippets
      source +=
        escapeValue ? "' +\n__e(" + escapeValue + ") +\n'" :
        evaluateValue ? "';\n" + evaluateValue + ";\n__p += '" :
        interpolateValue ? "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'" : '';

      isEvaluating || (isEvaluating = evaluateValue || reComplexDelimiter.test(escapeValue || interpolateValue));
      index = offset + match.length;
    });

    source += "';\n";

    // if `variable` is not specified and the template contains "evaluate"
    // delimiters, wrap a with-statement around the generated code to add the
    // data object to the top of the scope chain
    if (!hasVariable) {
      variable = 'obj';
      if (isEvaluating) {
        source = 'with (' + variable + ') {\n' + source + '\n}\n';
      }
      else {
        // avoid a with-statement by prepending data object references to property names
        var reDoubleVariable = RegExp('(\\(\\s*)' + variable + '\\.' + variable + '\\b', 'g');
        source = source
          .replace(reInsertVariable, '$&' + variable + '.')
          .replace(reDoubleVariable, '$1__d');
      }
    }

    // cleanup code by stripping empty strings
    source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
      .replace(reEmptyStringMiddle, '$1')
      .replace(reEmptyStringTrailing, '$1;');

    // frame code as the function body
    source = 'function(' + variable + ') {\n' +
      (hasVariable ? '' : variable + ' || (' + variable + ' = {});\n') +
      'var __t, __p = \'\', __e = _.escape' +
      (isEvaluating
        ? ', __j = Array.prototype.join;\n' +
          'function print() { __p += __j.call(arguments, \'\') }\n'
        : (hasVariable ? '' : ', __d = ' + variable + '.' + variable + ' || ' + variable) + ';\n'
      ) +
      source +
      'return __p\n}';

    // use a sourceURL for easier debugging
    // http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
    var sourceURL = useSourceURL
      ? '\n//@ sourceURL=/lodash/template/source[' + (templateCounter++) + ']'
      : '';

    try {
      result = Function('_', 'return ' + source + sourceURL)(lodash);
    } catch(e) {
      e.source = source;
      throw e;
    }

    if (data) {
      return result(data);
    }
    // provide the compiled function's source via its `toString` method, in
    // supported environments, or the `source` property as a convenience for
    // inlining compiled templates during the build process
    result.source = source;
    return result;
  }

  /**
   * Executes the `callback` function `n` times, returning an array of the results
   * of each `callback` execution. The `callback` is bound to `thisArg` and invoked
   * with one argument; (index).
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {Number} n The number of times to execute the callback.
   * @param {Function} callback The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding of `callback`.
   * @returns {Array} Returns a new array of the results of each `callback` execution.
   * @example
   *
   * var diceRolls = _.times(3, _.partial(_.random, 1, 6));
   * // => [3, 6, 4]
   *
   * _.times(3, function(n) { mage.castSpell(n); });
   * // => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively
   *
   * _.times(3, function(n) { this.cast(n); }, mage);
   * // => also calls `mage.castSpell(n)` three times
   */
  function times(n, callback, thisArg) {
    n = +n || 0;
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = callback.call(thisArg, index);
    }
    return result;
  }

  /**
   * Converts the HTML entities `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#x27;`
   * in `string` to their corresponding characters.
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {String} string The string to unescape.
   * @returns {String} Returns the unescaped string.
   * @example
   *
   * _.unescape('Moe, Larry &amp; Curly');
   * // => "Moe, Larry & Curly"
   */
  function unescape(string) {
    return string == null ? '' : (string + '').replace(reEscapedHtml, unescapeHtmlChar);
  }

  /**
   * Generates a unique id. If `prefix` is passed, the id will be appended to it.
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {String} [prefix] The value to prefix the id with.
   * @returns {Number|String} Returns a numeric id if no prefix is passed, else
   *  a string id may be returned.
   * @example
   *
   * _.uniqueId('contact_');
   * // => 'contact_104'
   */
  function uniqueId(prefix) {
    var id = idCounter++;
    return prefix ? prefix + id : id;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Wraps the value in a `lodash` wrapper object.
   *
   * @static
   * @memberOf _
   * @category Chaining
   * @param {Mixed} value The value to wrap.
   * @returns {Object} Returns the wrapper object.
   * @example
   *
   * var stooges = [
   *   { 'name': 'moe', 'age': 40 },
   *   { 'name': 'larry', 'age': 50 },
   *   { 'name': 'curly', 'age': 60 }
   * ];
   *
   * var youngest = _.chain(stooges)
   *     .sortBy(function(stooge) { return stooge.age; })
   *     .map(function(stooge) { return stooge.name + ' is ' + stooge.age; })
   *     .first()
   *     .value();
   * // => 'moe is 40'
   */
  function chain(value) {
    value = new lodash(value);
    value.__chain__ = true;
    return value;
  }

  /**
   * Invokes `interceptor` with the `value` as the first argument, and then
   * returns `value`. The purpose of this method is to "tap into" a method chain,
   * in order to perform operations on intermediate results within the chain.
   *
   * @static
   * @memberOf _
   * @category Chaining
   * @param {Mixed} value The value to pass to `interceptor`.
   * @param {Function} interceptor The function to invoke.
   * @returns {Mixed} Returns `value`.
   * @example
   *
   * _.chain([1, 2, 3, 200])
   *  .filter(function(num) { return num % 2 == 0; })
   *  .tap(alert)
   *  .map(function(num) { return num * num })
   *  .value();
   * // => // [2, 200] (alerted)
   * // => [4, 40000]
   */
  function tap(value, interceptor) {
    interceptor(value);
    return value;
  }

  /**
   * Enables method chaining on the wrapper object.
   *
   * @name chain
   * @deprecated
   * @memberOf _
   * @category Chaining
   * @returns {Mixed} Returns the wrapper object.
   * @example
   *
   * _([1, 2, 3]).value();
   * // => [1, 2, 3]
   */
  function wrapperChain() {
    this.__chain__ = true;
    return this;
  }

  /**
   * Extracts the wrapped value.
   *
   * @name value
   * @memberOf _
   * @category Chaining
   * @returns {Mixed} Returns the wrapped value.
   * @example
   *
   * _([1, 2, 3]).value();
   * // => [1, 2, 3]
   */
  function wrapperValue() {
    return this.__wrapped__;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * The semantic version number.
   *
   * @static
   * @memberOf _
   * @type String
   */
  lodash.VERSION = '0.8.2';

  // assign static methods
  lodash.after = after;
  lodash.bind = bind;
  lodash.bindAll = bindAll;
  lodash.chain = chain;
  lodash.clone = clone;
  lodash.compact = compact;
  lodash.compose = compose;
  lodash.contains = contains;
  lodash.countBy = countBy;
  lodash.debounce = debounce;
  lodash.defaults = defaults;
  lodash.defer = defer;
  lodash.delay = delay;
  lodash.difference = difference;
  lodash.escape = escape;
  lodash.every = every;
  lodash.extend = extend;
  lodash.filter = filter;
  lodash.find = find;
  lodash.first = first;
  lodash.flatten = flatten;
  lodash.forEach = forEach;
  lodash.forIn = forIn;
  lodash.forOwn = forOwn;
  lodash.functions = functions;
  lodash.groupBy = groupBy;
  lodash.has = has;
  lodash.identity = identity;
  lodash.indexOf = indexOf;
  lodash.initial = initial;
  lodash.intersection = intersection;
  lodash.invert = invert;
  lodash.invoke = invoke;
  lodash.isArguments = isArguments;
  lodash.isArray = isArray;
  lodash.isBoolean = isBoolean;
  lodash.isDate = isDate;
  lodash.isElement = isElement;
  lodash.isEmpty = isEmpty;
  lodash.isEqual = isEqual;
  lodash.isFinite = isFinite;
  lodash.isFunction = isFunction;
  lodash.isNaN = isNaN;
  lodash.isNull = isNull;
  lodash.isNumber = isNumber;
  lodash.isObject = isObject;
  lodash.isPlainObject = isPlainObject;
  lodash.isRegExp = isRegExp;
  lodash.isString = isString;
  lodash.isUndefined = isUndefined;
  lodash.keys = keys;
  lodash.last = last;
  lodash.lastIndexOf = lastIndexOf;
  lodash.lateBind = lateBind;
  lodash.map = map;
  lodash.max = max;
  lodash.memoize = memoize;
  lodash.merge = merge;
  lodash.min = min;
  lodash.mixin = mixin;
  lodash.noConflict = noConflict;
  lodash.object = object;
  lodash.omit = omit;
  lodash.once = once;
  lodash.pairs = pairs;
  lodash.partial = partial;
  lodash.pick = pick;
  lodash.pluck = pluck;
  lodash.random = random;
  lodash.range = range;
  lodash.reduce = reduce;
  lodash.reduceRight = reduceRight;
  lodash.reject = reject;
  lodash.rest = rest;
  lodash.result = result;
  lodash.shuffle = shuffle;
  lodash.size = size;
  lodash.some = some;
  lodash.sortBy = sortBy;
  lodash.sortedIndex = sortedIndex;
  lodash.tap = tap;
  lodash.template = template;
  lodash.throttle = throttle;
  lodash.times = times;
  lodash.toArray = toArray;
  lodash.unescape = unescape;
  lodash.union = union;
  lodash.uniq = uniq;
  lodash.uniqueId = uniqueId;
  lodash.values = values;
  lodash.where = where;
  lodash.without = without;
  lodash.wrap = wrap;
  lodash.zip = zip;

  // assign aliases
  lodash.all = every;
  lodash.any = some;
  lodash.collect = map;
  lodash.detect = find;
  lodash.drop = rest;
  lodash.each = forEach;
  lodash.foldl = reduce;
  lodash.foldr = reduceRight;
  lodash.head = first;
  lodash.include = contains;
  lodash.inject = reduce;
  lodash.methods = functions;
  lodash.select = filter;
  lodash.tail = rest;
  lodash.take = first;
  lodash.unique = uniq;

  // add pseudo private properties used and removed during the build process
  lodash._iteratorTemplate = iteratorTemplate;
  lodash._shimKeys = shimKeys;

  /*--------------------------------------------------------------------------*/

  // add all static functions to `lodash.prototype`
  mixin(lodash);

  // add `lodash.prototype.chain` after calling `mixin()` to avoid overwriting
  // it with the wrapped `lodash.chain`
  lodash.prototype.chain = wrapperChain;
  lodash.prototype.value = wrapperValue;

  // add all mutator Array functions to the wrapper.
  forEach(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
    var func = ArrayProto[methodName];

    lodash.prototype[methodName] = function() {
      var value = this.__wrapped__;
      func.apply(value, arguments);

      // avoid array-like object bugs with `Array#shift` and `Array#splice` in
      // Firefox < 10 and IE < 9
      if (hasObjectSpliceBug && value.length === 0) {
        delete value[0];
      }
      if (this.__chain__) {
        value = new lodash(value);
        value.__chain__ = true;
      }
      return value;
    };
  });

  // add all accessor Array functions to the wrapper.
  forEach(['concat', 'join', 'slice'], function(methodName) {
    var func = ArrayProto[methodName];

    lodash.prototype[methodName] = function() {
      var value = this.__wrapped__,
          result = func.apply(value, arguments);

      if (this.__chain__) {
        result = new lodash(result);
        result.__chain__ = true;
      }
      return result;
    };
  });

  /*--------------------------------------------------------------------------*/

  // expose Lo-Dash
  // some AMD build optimizers, like r.js, check for specific condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lo-Dash to the global object even when an AMD loader is present in
    // case Lo-Dash was injected by a third-party script and not intended to be
    // loaded as a module. The global assignment can be reverted in the Lo-Dash
    // module via its `noConflict()` method.
    window._ = lodash;

    // define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module
    define(function() {
      return lodash;
    });
  }
  // check for `exports` after `define` in case a build optimizer adds an `exports` object
  else if (freeExports) {
    // in Node.js or RingoJS v0.8.0+
    if (typeof module == 'object' && module && module.exports == freeExports) {
      (module.exports = lodash)._ = lodash;
    }
    // in Narwhal or RingoJS v0.7.0-
    else {
      freeExports._ = lodash;
    }
  }
  else {
    // in a browser or Rhino
    window._ = lodash;
  }
}(this));
/**
 *  html5shiv: https://github.com/aFarkas/html5shiv
 *  This script is the defacto way to enable use of HTML5 sectioning elements in legacy Internet Explorer, 
 *  as well as default HTML5 styling in Internet Explorer 6 - 9, Safari 4.x (and iPhone 3.x), and Firefox 3.x.
 *
 *  For discussion and comments, see: http://remysharp.com/2009/01/07/html5-enabling-script/
 *  Dual licensed under the MIT <http://www.opensource.org/licenses/mit-license.php> or GPL Version 2 licenses
 *
 *  Typical usage:
 *  <!--[if lt IE 9]>
 *  <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
 *  <![endif]-->
 *
 */

( function() {
    // Conditional Compilation: A quick one-liner that tests if the browser is Internet Explorer (Windows)
    // lower than ie8. More informations see here: http://www.javascriptkit.com/javatutors/conditionalcompile.shtml

    //if( !/*@cc_on!@*/0 )
    if((ndv_ = navigator.userAgent.match(/(trident)\/?\s*((\.?\d+)(\.\d+)*)/i)) && ndv_[3] <= 4) {
        var e = "abbr,article,aside,audio,bb,canvas,datagrid,datalist,details,dialog,eventsource,figcaption,figure,footer,header,hgroup,mark,menu,meter,nav,output,progress,section,time,video".split(',');
        for( var i=0; i<e.length; i++ ) {
            if ( document.getElementsByTagName( e[i] ) ) {
                document.createElement( e[i] );
            }
        }
    }
} () );
/**
 * FontDetect - A simple library to detect if an internal font is present or an external font got loaded.
 * 
 * TO USE: 
 *     Include jQuery. This was developed using jQuery 1.7.
 *     Include this file. If desired, you can load this file after the BODY.
 *     Create a new fontdetect().
 *     After you load the fonts you want to test, call either of these methods:
 *     
 *	       fontDetect = new fontdetect();
 *	       
 *	       // Checks that the font is loaded now.
 *	       isLoaded = fontDetect.isFontLoaded(fontname);
 *     
 *         // Polls for the font getting loaded and calls a callback when it does.
 *	       fontDetect.onFontLoaded(fontname, callback [, {onFail: xxx, msInterval: yyy, msTimeout: zzz}]);
 *     
 *     Note: For externally loaded fonts, you may have to wait for more than a second to get a reliable 
 *     answer. Internal browser fonts can be detected immediately.
 *     
 *         // Determines which font in the font stack is being used for a given element.
 *	       sFontname = fontDetect.whichFont(element);
 *     
 * @author		Jennifer Simonds
 * @copyright	2012 Jennifer Simonds
 * @license	MIT License http://opensource.org/licenses/MIT
 * 
 * @version 1.0  2012-04-11	Created.
 * 
 * @version 1.0  2012-04-12	Refined the algorithm to use fewer helper elements, more reference fonts,
 *								and quicker detection of a nonexistent font.
 * 
 * @version 2.0  2012-06-01	Added onFontLoaded for a callback to execute as soon as the font is 
 *								detected or when a timeout has passed without loading. Added whichFont
 *								to determine which font actually loaded. Changed the license from BSD 
 *								3-clause to MIT.
 *								
 * @version 2.1  2012-08-12	Fixed a bug that caused horizontal scrollbar to show up in FF & IE.
 *                              (Thanks to Geoff Beaumont for the bug report & fix)
 */
var fontdetect = function()
{
	// The private parts
	var _isInitialized = false;
	var _aFallbackFonts = ['serif', 'sans-serif', 'monospace', 'cursive', 'fantasy'];
	
	function _init ()
	{
		if (_isInitialized)
		{	return;
		}

		_isInitialized = true;

		SDE.$('body > :first-child').before(
			'<div id="fontdetectHelper"><span>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</span></div>'
		);
		SDE.$('#fontdetectHelper').css({
			'position': 'absolute',
			'visibility': 'hidden',
			'top': '-200px',
			'left': '-100000px',
			'width': '100000px',
			'height': '200px',
			'font-size': '100px'
		});
	}

	
	// The public interface
	return	{
		/**
		 * Polls 10 times/second until a font gets loaded or until it times out. (Default = 2 secs) It 
		 * calls a callback on load, & optionally calls another function if it times out without loading.
		 * 
		 * NOTE: You must specify at least one callback - for success or failure.
		 * 
		 * @param string		The font name to check for.
		 * @param function		The function to call if it gets loaded within the timeout period.
		 * @param options		An optional object with named parameters:
		 *     @param onFail       The function to call if the font doesn't load within the timeout period.
		 *     @param msInterval   How many milliseconds for the polling interval. Default = 100.
		 *     @param msTimeout    How many milliseconds until we time out & call onFail. Default = 2000.
		 */
		onFontLoaded: function (p_cssFontName, p_onLoad, p_onFail, p_options)
		{
			if (!p_cssFontName)
			{	return;
			}
			
			// Our hashtable of optional params.
			var msInterval = (p_options && p_options.msInterval) ? p_options.msInterval : 100;
			var msTimeout  = (p_options && p_options.msTimeout) ? p_options.msTimeout : 2000;

			if (!p_onLoad && !p_onFail)
			{	// Caller must specify at least one callback.
				return;
			}
			
			if (!_isInitialized)
			{	_init ();
			}
			
			if (this.isFontLoaded(p_cssFontName))
			{	// It's already here, so no need to poll.
				if (p_onLoad)
				{	p_onLoad(p_cssFontName);
				}
				return;
			}
			
			// At this point we know the font hasn't loaded yet. Add it to the list of fonts to monitor.
			
			// Set up an interval using msInterval. The callback calls isFontLoaded(), & if true
			// it closes the interval & calls p_onLoad, else if the current time has timed out
			// it closes the interval & calls onFail if there is one.
			var outerThis = this;
			var utStart = new Date().getTime();
			var idInterval = setInterval (
				function()
				{
					if (outerThis.isFontLoaded(p_cssFontName))
					{	// It's now loaded.
						clearInterval (idInterval);
						p_onLoad(p_cssFontName);
						return;
					}
					else
					{	// Still not loaded.
						var utNow = new Date().getTime();
						if ((utNow - utStart) > msTimeout)
						{
							clearInterval (idInterval);
							if (p_onFail)
							{	p_onFail(p_cssFontName);
							}
						}
					}
				},
				msInterval
			);
		},


		/**
		 * Determines if a font has gotten loaded.
		 * 
		 * @param string		The font name to check for.
		 * 
		 * @returns bool		true if it's loaded, else false if the browser had to use a fallback font.
		 */
		isFontLoaded: function (p_cssFontName)
		{
			var wThisFont = 0;
			var wPrevFont = 0;

			if (!_isInitialized)
			{	_init ();
			}
			
			for(var ix = 0; ix < _aFallbackFonts.length; ++ix)
			{
				var $helperSpan = SDE.$('#fontdetectHelper > SPAN');
				$helperSpan.css('font-family', p_cssFontName + ',' + _aFallbackFonts[ix]);
				wThisFont = $helperSpan.width();
				if (ix > 0 && wThisFont != wPrevFont)
				{// This iteration's font was different than the previous iteration's font, so it must
				//  have fallen back on a generic font. So our font must not exist.
					return false;
				}

				wPrevFont = wThisFont;
			}

			// The widths were all the same, therefore the browser must have rendered the text in the same
			// font every time. So unless all the generic fonts are identical widths (highly unlikely), it 
			// couldn't have fallen back to a generic font. It's our font.
			return true;
		},


		/**
		 * Determines which font is being used for a given element.
		 * 
		 * @param string/object		The element to examine. If it's a string, it's a jQuery selector. If it's 
		 *							an object, it's taken as a DOM element.
		 * 
		 * @returns string			The name of the font that's being used - either one of the fonts 
		 *							listed in the element's font-family css value, or null.
		 */
		whichFont: function (p_element)
		{
			var sStack = SDE.$(p_element).css('font-family');
			var aStack = sStack.split(',');
			
			var sFont = aStack.shift();
			while (sFont)
			{
				sFont = sFont.replace(/^\s*['"]?\s*([^'"]*)\s*['"]?\s*$/, '$1');
				
				if (this.isFontLoaded(sFont))
				{	return sFont;
				}
				sFont = aStack.shift();
			}
			
			return null;
		}
	};
}();
/*
 * TypeHelpers version 1.0
 * Zoltan Hawryluk, Nov 24 2009.
 * See: http://www.useragentman.com/blog/2009/11/29/how-to-detect-font-smoothing-using-javascript/  
 * 
 * Released under the MIT License. http://www.opensource.org/licenses/mit-license.php
 * 
 * Works for 
 *   - IE6+ (Windows), 
 *   - Firefox 3.5+ (Windows, Mac, Linux), 
 *   - Safari 4+ (Windows, Mac OS X), 
 *   - Chrome 3.0+ (Windows).
 *   - Opera 10.10 and under reports unknown support for font-smoothing.
 * 
 * METHODS
 * -------
 * 
 * hasSmoothing() returns:
 *     true if font smoothing is enabled
 *     false if font smoothing isn't enabled
 *     
 * addClasses() adds the following classes to the html tag:
 *     "noSZfonts noFontSmooth" if it isn't
 *
 * NOTICE
 * ------
 * 
 * This Lib will modified! Please remember when you will update them 
 * to an newer version! 
 * 
 */

var TypeHelpers = new function(){
  var me = this;
   
  me.hasSmoothing = function(){
    // FF gt 4.x becomes every time our new webfonts
    if ((ndv_ = navigator.userAgent.match(/(firefox)\/?\s*((\.?\d+)(\.\d+)*)/i)) && ndv_[3] >= 4) {
      return true;
    } 

    // IE gt 7.x also becomes every time our new webfonts
    if ((ndv_ = navigator.userAgent.match(/(trident)\/?\s*((\.?\d+)(\.\d+)*)/i)) && ndv_[3] >= 5) {
      return true;
    }

    if ((ndv_ = navigator.userAgent.match(/(msie) ?\s*((\.?\d+)(\.\d+)*).*nt 5.1/i)) && ndv_[3] >= 7) {
      return true;
    }

    // IE has screen.fontSmoothingEnabled - sweet!      
    if (typeof(screen.fontSmoothingEnabled) != "undefined") {
       return screen.fontSmoothingEnabled;  
    }
    else {
       try {
          // Create a 35x35 Canvas block.
          var canvasNode = document.createElement("canvas");
          canvasNode.width = "35";
          canvasNode.height = "35"
          
          // We must put this node into the body, otherwise 
          // Safari Windows does not report correctly.
          canvasNode.style.display = "none";
          document.body.appendChild(canvasNode);
          var ctx = canvasNode.getContext("2d");
          
          // draw a black letter "O", 32px Arial.
          ctx.textBaseline = "top";
          ctx.font = "32px Arial";
          ctx.fillStyle = "black";
          ctx.strokeStyle = "black";
          ctx.fillText("O", 0, 0);
          
          // start at (8,1) and search the canvas from left to right,
          // top to bottom to see if we can find a non-black pixel.  If
          // so we return true.
          for (var j = 8; j <= 32; j++) {
             for (var i = 1; i <= 32; i++) {
                var imageData = ctx.getImageData(i, j, 1, 1).data;
                var alpha = imageData[3];
                if (alpha != 255 && alpha != 0) {
                   return true; // font-smoothing must be on.
                }
             }
          }
          
          // Remove <canvas> element, because we don't need them any more ...
          if ( canvasNode.parentNode ) {
              canvasNode.parentNode.removeChild( canvasNode );
          }
          
          // didn't find any non-black pixels - return false.
          return false;
       } 
       catch (ex) {
          // Something went wrong (for example, Opera cannot use the
          // canvas fillText() method.  Return null (unknown).
          return true; //return null;
       }
    }
 }

 me.insertClasses = function(){
    var result = me.hasSmoothing();
        
    if( result === false ) {
        document.documentElement.className += ' noSZfonts noFontSmooth';
        return false;
    }

    return true;
 }
}
;/*	SWFObject v2.2 <http://code.google.com/p/swfobject/> 
	is released under the MIT License <http://www.opensource.org/licenses/mit-license.php> 
*/

var swfobject = function() {
    _swfobject = window.swfobject;    
	var UNDEF = "undefined",
		OBJECT = "object",
		SHOCKWAVE_FLASH = "Shockwave Flash",
		SHOCKWAVE_FLASH_AX = "ShockwaveFlash.ShockwaveFlash",
		FLASH_MIME_TYPE = "application/x-shockwave-flash",
		EXPRESS_INSTALL_ID = "SWFObjectExprInst",
		ON_READY_STATE_CHANGE = "onreadystatechange",
		
		win = window,
		doc = document,
		nav = navigator,
		
		plugin = false,
		domLoadFnArr = [main],
		regObjArr = [],
		objIdArr = [],
		listenersArr = [],
		storedAltContent,
		storedAltContentId,
		storedCallbackFn,
		storedCallbackObj,
		isDomLoaded = false,
		isExpressInstallActive = false,
		dynamicStylesheet,
		dynamicStylesheetMedia,
		autoHideShow = true,
	
	/* Centralized function for browser feature detection
		- User agent string detection is only used when no good alternative is possible
		- Is executed directly for optimal performance
	*/	
	ua = function() {
		var w3cdom = typeof doc.getElementById != UNDEF && typeof doc.getElementsByTagName != UNDEF && typeof doc.createElement != UNDEF,
			u = nav.userAgent.toLowerCase(),
			p = nav.platform.toLowerCase(),
			windows = p ? /win/.test(p) : /win/.test(u),
			mac = p ? /mac/.test(p) : /mac/.test(u),
			webkit = /webkit/.test(u) ? parseFloat(u.replace(/^.*webkit\/(\d+(\.\d+)?).*$/, "$1")) : false, // returns either the webkit version or false if not webkit
			ie = !+"\v1", // feature detection based on Andrea Giammarchi's solution: http://webreflection.blogspot.com/2009/01/32-bytes-to-know-if-your-browser-is-ie.html
			playerVersion = [0,0,0],
			d = null;
		if (typeof nav.plugins != UNDEF && typeof nav.plugins[SHOCKWAVE_FLASH] == OBJECT) {
			d = nav.plugins[SHOCKWAVE_FLASH].description;
			if (d && !(typeof nav.mimeTypes != UNDEF && nav.mimeTypes[FLASH_MIME_TYPE] && !nav.mimeTypes[FLASH_MIME_TYPE].enabledPlugin)) { // navigator.mimeTypes["application/x-shockwave-flash"].enabledPlugin indicates whether plug-ins are enabled or disabled in Safari 3+
				plugin = true;
				ie = false; // cascaded feature detection for Internet Explorer
				d = d.replace(/^.*\s+(\S+\s+\S+$)/, "$1");
				playerVersion[0] = parseInt(d.replace(/^(.*)\..*$/, "$1"), 10);
				playerVersion[1] = parseInt(d.replace(/^.*\.(.*)\s.*$/, "$1"), 10);
				playerVersion[2] = /[a-zA-Z]/.test(d) ? parseInt(d.replace(/^.*[a-zA-Z]+(.*)$/, "$1"), 10) : 0;
			}
		}
		else if (typeof win.ActiveXObject != UNDEF) {
			try {
				var a = new ActiveXObject(SHOCKWAVE_FLASH_AX);
				if (a) { // a will return null when ActiveX is disabled
					d = a.GetVariable("$version");
					if (d) {
						ie = true; // cascaded feature detection for Internet Explorer
						d = d.split(" ")[1].split(",");
						playerVersion = [parseInt(d[0], 10), parseInt(d[1], 10), parseInt(d[2], 10)];
					}
				}
			}
			catch(e) {}
		}
		return { w3:w3cdom, pv:playerVersion, wk:webkit, ie:ie, win:windows, mac:mac };
	}(),
	
	/* Cross-browser onDomLoad
		- Will fire an event as soon as the DOM of a web page is loaded
		- Internet Explorer workaround based on Diego Perini's solution: http://javascript.nwbox.com/IEContentLoaded/
		- Regular onload serves as fallback
	*/ 
	onDomLoad = function() {
		if (!ua.w3) { return; }
		if ((typeof doc.readyState != UNDEF && doc.readyState == "complete") || (typeof doc.readyState == UNDEF && (doc.getElementsByTagName("body")[0] || doc.body))) { // function is fired after onload, e.g. when script is inserted dynamically 
			callDomLoadFunctions();
		}
		if (!isDomLoaded) {
			if (typeof doc.addEventListener != UNDEF) {
				doc.addEventListener("DOMContentLoaded", callDomLoadFunctions, false);
			}		
			if (ua.ie && ua.win) {
				doc.attachEvent(ON_READY_STATE_CHANGE, function() {
					if (doc.readyState == "complete") {
						doc.detachEvent(ON_READY_STATE_CHANGE, arguments.callee);
						callDomLoadFunctions();
					}
				});
				if (win == top) { // if not inside an iframe
					(function(){
						if (isDomLoaded) { return; }
						try {
							doc.documentElement.doScroll("left");
						}
						catch(e) {
							setTimeout(arguments.callee, 0);
							return;
						}
						callDomLoadFunctions();
					})();
				}
			}
			if (ua.wk) {
				(function(){
					if (isDomLoaded) { return; }
					if (!/loaded|complete/.test(doc.readyState)) {
						setTimeout(arguments.callee, 0);
						return;
					}
					callDomLoadFunctions();
				})();
			}
			addLoadEvent(callDomLoadFunctions);
		}
	}();
	
	function callDomLoadFunctions() {
		if (isDomLoaded) { return; }
		try { // test if we can really add/remove elements to/from the DOM; we don't want to fire it too early
			var t = doc.getElementsByTagName("body")[0].appendChild(createElement("span"));
			t.parentNode.removeChild(t);
		}
		catch (e) { return; }
		isDomLoaded = true;
		var dl = domLoadFnArr.length;
		for (var i = 0; i < dl; i++) {
			domLoadFnArr[i]();
		}
	}
	
	function addDomLoadEvent(fn) {
		if (isDomLoaded) {
			fn();
		}
		else { 
			domLoadFnArr[domLoadFnArr.length] = fn; // Array.push() is only available in IE5.5+
		}
	}
	
	/* Cross-browser onload
		- Based on James Edwards' solution: http://brothercake.com/site/resources/scripts/onload/
		- Will fire an event as soon as a web page including all of its assets are loaded 
	 */
	function addLoadEvent(fn) {
		if (typeof win.addEventListener != UNDEF) {
			win.addEventListener("load", fn, false);
		}
		else if (typeof doc.addEventListener != UNDEF) {
			doc.addEventListener("load", fn, false);
		}
		else if (typeof win.attachEvent != UNDEF) {
			addListener(win, "onload", fn);
		}
		else if (typeof win.onload == "function") {
			var fnOld = win.onload;
			win.onload = function() {
				fnOld();
				fn();
			};
		}
		else {
			win.onload = fn;
		}
	}
	
	/* Main function
		- Will preferably execute onDomLoad, otherwise onload (as a fallback)
	*/
	function main() { 
		if (plugin) {
			testPlayerVersion();
		}
		else {
			matchVersions();
		}
	}
	
	/* Detect the Flash Player version for non-Internet Explorer browsers
		- Detecting the plug-in version via the object element is more precise than using the plugins collection item's description:
		  a. Both release and build numbers can be detected
		  b. Avoid wrong descriptions by corrupt installers provided by Adobe
		  c. Avoid wrong descriptions by multiple Flash Player entries in the plugin Array, caused by incorrect browser imports
		- Disadvantage of this method is that it depends on the availability of the DOM, while the plugins collection is immediately available
	*/
	function testPlayerVersion() {
		var b = doc.getElementsByTagName("body")[0];
		var o = createElement(OBJECT);
		o.setAttribute("type", FLASH_MIME_TYPE);
		var t = b.appendChild(o);
		if (t) {
			var counter = 0;
			(function(){
				if (typeof t.GetVariable != UNDEF) {
					var d = t.GetVariable("$version");
					if (d) {
						d = d.split(" ")[1].split(",");
						ua.pv = [parseInt(d[0], 10), parseInt(d[1], 10), parseInt(d[2], 10)];
					}
				}
				else if (counter < 10) {
					counter++;
					setTimeout(arguments.callee, 10);
					return;
				}
				b.removeChild(o);
				t = null;
				matchVersions();
			})();
		}
		else {
			matchVersions();
		}
	}
	
	/* Perform Flash Player and SWF version matching; static publishing only
	*/
	function matchVersions() {
		var rl = regObjArr.length;
		if (rl > 0) {
			for (var i = 0; i < rl; i++) { // for each registered object element
				var id = regObjArr[i].id;
				var cb = regObjArr[i].callbackFn;
				var cbObj = {success:false, id:id};
				if (ua.pv[0] > 0) {
					var obj = getElementById(id);
					if (obj) {
						if (hasPlayerVersion(regObjArr[i].swfVersion) && !(ua.wk && ua.wk < 312)) { // Flash Player version >= published SWF version: Houston, we have a match!
							setVisibility(id, true);
							if (cb) {
								cbObj.success = true;
								cbObj.ref = getObjectById(id);
								cb(cbObj);
							}
						}
						else if (regObjArr[i].expressInstall && canExpressInstall()) { // show the Adobe Express Install dialog if set by the web page author and if supported
							var att = {};
							att.data = regObjArr[i].expressInstall;
							att.width = obj.getAttribute("width") || "0";
							att.height = obj.getAttribute("height") || "0";
							if (obj.getAttribute("class")) { att.styleclass = obj.getAttribute("class"); }
							if (obj.getAttribute("align")) { att.align = obj.getAttribute("align"); }
							// parse HTML object param element's name-value pairs
							var par = {};
							var p = obj.getElementsByTagName("param");
							var pl = p.length;
							for (var j = 0; j < pl; j++) {
								if (p[j].getAttribute("name").toLowerCase() != "movie") {
									par[p[j].getAttribute("name")] = p[j].getAttribute("value");
								}
							}
							showExpressInstall(att, par, id, cb);
						}
						else { // Flash Player and SWF version mismatch or an older Webkit engine that ignores the HTML object element's nested param elements: display alternative content instead of SWF
							displayAltContent(obj);
							if (cb) { cb(cbObj); }
						}
					}
				}
				else {	// if no Flash Player is installed or the fp version cannot be detected we let the HTML object element do its job (either show a SWF or alternative content)
					setVisibility(id, true);
					if (cb) {
						var o = getObjectById(id); // test whether there is an HTML object element or not
						if (o && typeof o.SetVariable != UNDEF) { 
							cbObj.success = true;
							cbObj.ref = o;
						}
						cb(cbObj);
					}
				}
			}
		}
	}
	
	function getObjectById(objectIdStr) {
		var r = null;
		var o = getElementById(objectIdStr);
		if (o && o.nodeName == "OBJECT") {
			if (typeof o.SetVariable != UNDEF) {
				r = o;
			}
			else {
				var n = o.getElementsByTagName(OBJECT)[0];
				if (n) {
					r = n;
				}
			}
		}
		return r;
	}
	
	/* Requirements for Adobe Express Install
		- only one instance can be active at a time
		- fp 6.0.65 or higher
		- Win/Mac OS only
		- no Webkit engines older than version 312
	*/
	function canExpressInstall() {
		return !isExpressInstallActive && hasPlayerVersion("6.0.65") && (ua.win || ua.mac) && !(ua.wk && ua.wk < 312);
	}
	
	/* Show the Adobe Express Install dialog
		- Reference: http://www.adobe.com/cfusion/knowledgebase/index.cfm?id=6a253b75
	*/
	function showExpressInstall(att, par, replaceElemIdStr, callbackFn) {
		isExpressInstallActive = true;
		storedCallbackFn = callbackFn || null;
		storedCallbackObj = {success:false, id:replaceElemIdStr};
		var obj = getElementById(replaceElemIdStr);
		if (obj) {
			if (obj.nodeName == "OBJECT") { // static publishing
				storedAltContent = abstractAltContent(obj);
				storedAltContentId = null;
			}
			else { // dynamic publishing
				storedAltContent = obj;
				storedAltContentId = replaceElemIdStr;
			}
			att.id = EXPRESS_INSTALL_ID;
			if (typeof att.width == UNDEF || (!/%$/.test(att.width) && parseInt(att.width, 10) < 310)) { att.width = "310"; }
			if (typeof att.height == UNDEF || (!/%$/.test(att.height) && parseInt(att.height, 10) < 137)) { att.height = "137"; }
			doc.title = doc.title.slice(0, 47) + " - Flash Player Installation";
			var pt = ua.ie && ua.win ? "ActiveX" : "PlugIn",
				fv = "MMredirectURL=" + win.location.toString().replace(/&/g,"%26") + "&MMplayerType=" + pt + "&MMdoctitle=" + doc.title;
			if (typeof par.flashvars != UNDEF) {
				par.flashvars += "&" + fv;
			}
			else {
				par.flashvars = fv;
			}
			// IE only: when a SWF is loading (AND: not available in cache) wait for the readyState of the object element to become 4 before removing it,
			// because you cannot properly cancel a loading SWF file without breaking browser load references, also obj.onreadystatechange doesn't work
			if (ua.ie && ua.win && obj.readyState != 4) {
				var newObj = createElement("div");
				replaceElemIdStr += "SWFObjectNew";
				newObj.setAttribute("id", replaceElemIdStr);
				obj.parentNode.insertBefore(newObj, obj); // insert placeholder div that will be replaced by the object element that loads expressinstall.swf
				obj.style.display = "none";
				(function(){
					if (obj.readyState == 4) {
						obj.parentNode.removeChild(obj);
					}
					else {
						setTimeout(arguments.callee, 10);
					}
				})();
			}
			createSWF(att, par, replaceElemIdStr);
		}
	}
	
	/* Functions to abstract and display alternative content
	*/
	function displayAltContent(obj) {
		if (ua.ie && ua.win && obj.readyState != 4) {
			// IE only: when a SWF is loading (AND: not available in cache) wait for the readyState of the object element to become 4 before removing it,
			// because you cannot properly cancel a loading SWF file without breaking browser load references, also obj.onreadystatechange doesn't work
			var el = createElement("div");
			obj.parentNode.insertBefore(el, obj); // insert placeholder div that will be replaced by the alternative content
			el.parentNode.replaceChild(abstractAltContent(obj), el);
			obj.style.display = "none";
			(function(){
				if (obj.readyState == 4) {
					obj.parentNode.removeChild(obj);
				}
				else {
					setTimeout(arguments.callee, 10);
				}
			})();
		}
		else {
			obj.parentNode.replaceChild(abstractAltContent(obj), obj);
		}
	} 

	function abstractAltContent(obj) {
		var ac = createElement("div");
		if (ua.win && ua.ie) {
			ac.innerHTML = obj.innerHTML;
		}
		else {
			var nestedObj = obj.getElementsByTagName(OBJECT)[0];
			if (nestedObj) {
				var c = nestedObj.childNodes;
				if (c) {
					var cl = c.length;
					for (var i = 0; i < cl; i++) {
						if (!(c[i].nodeType == 1 && c[i].nodeName == "PARAM") && !(c[i].nodeType == 8)) {
							ac.appendChild(c[i].cloneNode(true));
						}
					}
				}
			}
		}
		return ac;
	}
	
	/* Cross-browser dynamic SWF creation
	*/
	function createSWF(attObj, parObj, id) {
		var r, el = getElementById(id);
		if (ua.wk && ua.wk < 312) { return r; }
		if (el) {
			if (typeof attObj.id == UNDEF) { // if no 'id' is defined for the object element, it will inherit the 'id' from the alternative content
				attObj.id = id;
			}
			if (ua.ie && ua.win) { // Internet Explorer + the HTML object element + W3C DOM methods do not combine: fall back to outerHTML
				var att = "";
				for (var i in attObj) {
					if (attObj[i] != Object.prototype[i]) { // filter out prototype additions from other potential libraries
						if (i.toLowerCase() == "data") {
							parObj.movie = attObj[i];
						}
						else if (i.toLowerCase() == "styleclass") { // 'class' is an ECMA4 reserved keyword
							att += ' class="' + attObj[i] + '"';
						}
						else if (i.toLowerCase() != "classid") {
							att += ' ' + i + '="' + attObj[i] + '"';
						}
					}
				}
				var par = "";
				for (var j in parObj) {
					if (parObj[j] != Object.prototype[j]) { // filter out prototype additions from other potential libraries
						par += '<param name="' + j + '" value="' + parObj[j] + '" />';
					}
				}
				el.outerHTML = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"' + att + '>' + par + '</object>';
				objIdArr[objIdArr.length] = attObj.id; // stored to fix object 'leaks' on unload (dynamic publishing only)
				r = getElementById(attObj.id);	
			}
			else { // well-behaving browsers
				var o = createElement(OBJECT);
				o.setAttribute("type", FLASH_MIME_TYPE);
				for (var m in attObj) {
					if (attObj[m] != Object.prototype[m]) { // filter out prototype additions from other potential libraries
						if (m.toLowerCase() == "styleclass") { // 'class' is an ECMA4 reserved keyword
							o.setAttribute("class", attObj[m]);
						}
						else if (m.toLowerCase() != "classid") { // filter out IE specific attribute
							o.setAttribute(m, attObj[m]);
						}
					}
				}
				for (var n in parObj) {
					if (parObj[n] != Object.prototype[n] && n.toLowerCase() != "movie") { // filter out prototype additions from other potential libraries and IE specific param element
						createObjParam(o, n, parObj[n]);
					}
				}
				el.parentNode.replaceChild(o, el);
				r = o;
			}
		}
		return r;
	}
	
	function createObjParam(el, pName, pValue) {
		var p = createElement("param");
		p.setAttribute("name", pName);	
		p.setAttribute("value", pValue);
		el.appendChild(p);
	}
	
	/* Cross-browser SWF removal
		- Especially needed to safely and completely remove a SWF in Internet Explorer
	*/
	function removeSWF(id) {
		var obj = getElementById(id);
		if (obj && obj.nodeName == "OBJECT") {
			if (ua.ie && ua.win) {
				obj.style.display = "none";
				(function(){
					if (obj.readyState == 4) {
						removeObjectInIE(id);
					}
					else {
						setTimeout(arguments.callee, 10);
					}
				})();
			}
			else {
				obj.parentNode.removeChild(obj);
			}
		}
	}
	
	function removeObjectInIE(id) {
		var obj = getElementById(id);
		if (obj) {
			for (var i in obj) {
				if (typeof obj[i] == "function") {
					obj[i] = null;
				}
			}
			obj.parentNode.removeChild(obj);
		}
	}
	
	/* Functions to optimize JavaScript compression
	*/
	function getElementById(id) {
		var el = null;
		try {
			el = doc.getElementById(id);
		}
		catch (e) {}
		return el;
	}
	
	function createElement(el) {
		return doc.createElement(el);
	}
	
	/* Updated attachEvent function for Internet Explorer
		- Stores attachEvent information in an Array, so on unload the detachEvent functions can be called to avoid memory leaks
	*/	
	function addListener(target, eventType, fn) {
		target.attachEvent(eventType, fn);
		listenersArr[listenersArr.length] = [target, eventType, fn];
	}
	
	/* Flash Player and SWF content version matching
	*/
	function hasPlayerVersion(rv) {
		var pv = ua.pv, v = rv.split(".");
		v[0] = parseInt(v[0], 10);
		v[1] = parseInt(v[1], 10) || 0; // supports short notation, e.g. "9" instead of "9.0.0"
		v[2] = parseInt(v[2], 10) || 0;
		return (pv[0] > v[0] || (pv[0] == v[0] && pv[1] > v[1]) || (pv[0] == v[0] && pv[1] == v[1] && pv[2] >= v[2])) ? true : false;
	}
	
	/* Cross-browser dynamic CSS creation
		- Based on Bobby van der Sluis' solution: http://www.bobbyvandersluis.com/articles/dynamicCSS.php
	*/	
	function createCSS(sel, decl, media, newStyle) {
		if (ua.ie && ua.mac) { return; }
		var h = doc.getElementsByTagName("head")[0];
		if (!h) { return; } // to also support badly authored HTML pages that lack a head element
		var m = (media && typeof media == "string") ? media : "screen";
		if (newStyle) {
			dynamicStylesheet = null;
			dynamicStylesheetMedia = null;
		}
		if (!dynamicStylesheet || dynamicStylesheetMedia != m) { 
			// create dynamic stylesheet + get a global reference to it
			var s = createElement("style");
			s.setAttribute("type", "text/css");
			s.setAttribute("media", m);
			dynamicStylesheet = h.appendChild(s);
			if (ua.ie && ua.win && typeof doc.styleSheets != UNDEF && doc.styleSheets.length > 0) {
				dynamicStylesheet = doc.styleSheets[doc.styleSheets.length - 1];
			}
			dynamicStylesheetMedia = m;
		}
		// add style rule
		if (ua.ie && ua.win) {
			if (dynamicStylesheet && typeof dynamicStylesheet.addRule == OBJECT) {
				dynamicStylesheet.addRule(sel, decl);
			}
		}
		else {
			if (dynamicStylesheet && typeof doc.createTextNode != UNDEF) {
				dynamicStylesheet.appendChild(doc.createTextNode(sel + " {" + decl + "}"));
			}
		}
	}
	
	function setVisibility(id, isVisible) {
		if (!autoHideShow) { return; }
		var v = isVisible ? "visible" : "hidden";
		if (isDomLoaded && getElementById(id)) {
			getElementById(id).style.visibility = v;
		}
		else {
			createCSS("#" + id, "visibility:" + v);
		}
	}

	/* Filter to avoid XSS attacks
	*/
	function urlEncodeIfNecessary(s) {
		var regex = /[\\\"<>\.;]/;
		var hasBadChars = regex.exec(s) != null;
		return hasBadChars && typeof encodeURIComponent != UNDEF ? encodeURIComponent(s) : s;
	}
	
	/* Release memory to avoid memory leaks caused by closures, fix hanging audio/video threads and force open sockets/NetConnections to disconnect (Internet Explorer only)
	*/
	var cleanup = function() {
		if (ua.ie && ua.win) {
			window.attachEvent("onunload", function() {
				// remove listeners to avoid memory leaks
				var ll = listenersArr.length;
				for (var i = 0; i < ll; i++) {
					listenersArr[i][0].detachEvent(listenersArr[i][1], listenersArr[i][2]);
				}
				// cleanup dynamically embedded objects to fix audio/video threads and force open sockets and NetConnections to disconnect
				var il = objIdArr.length;
				for (var j = 0; j < il; j++) {
					removeSWF(objIdArr[j]);
				}
				// cleanup library's main closures to avoid memory leaks
				for (var k in ua) {
					ua[k] = null;
				}
				ua = null;
				for (var l in swfobject) {
					swfobject[l] = null;
				}
				swfobject = null;
			});
		}
	}();
	
	return {
		/* Public API
			- Reference: http://code.google.com/p/swfobject/wiki/documentation
		*/ 
		registerObject: function(objectIdStr, swfVersionStr, xiSwfUrlStr, callbackFn) {
			if (ua.w3 && objectIdStr && swfVersionStr) {
				var regObj = {};
				regObj.id = objectIdStr;
				regObj.swfVersion = swfVersionStr;
				regObj.expressInstall = xiSwfUrlStr;
				regObj.callbackFn = callbackFn;
				regObjArr[regObjArr.length] = regObj;
				setVisibility(objectIdStr, false);
			}
			else if (callbackFn) {
				callbackFn({success:false, id:objectIdStr});
			}
		},
		
		getObjectById: function(objectIdStr) {
			if (ua.w3) {
				return getObjectById(objectIdStr);
			}
		},
		
		embedSWF: function(swfUrlStr, replaceElemIdStr, widthStr, heightStr, swfVersionStr, xiSwfUrlStr, flashvarsObj, parObj, attObj, callbackFn) {
			var callbackObj = {success:false, id:replaceElemIdStr};
			if (ua.w3 && !(ua.wk && ua.wk < 312) && swfUrlStr && replaceElemIdStr && widthStr && heightStr && swfVersionStr) {
				setVisibility(replaceElemIdStr, false);
				addDomLoadEvent(function() {
					widthStr += ""; // auto-convert to string
					heightStr += "";
					var att = {};
					if (attObj && typeof attObj === OBJECT) {
						for (var i in attObj) { // copy object to avoid the use of references, because web authors often reuse attObj for multiple SWFs
							att[i] = attObj[i];
						}
					}
					att.data = swfUrlStr;
					att.width = widthStr;
					att.height = heightStr;
					var par = {}; 
					if (parObj && typeof parObj === OBJECT) {
						for (var j in parObj) { // copy object to avoid the use of references, because web authors often reuse parObj for multiple SWFs
							par[j] = parObj[j];
						}
					}
					if (flashvarsObj && typeof flashvarsObj === OBJECT) {
						for (var k in flashvarsObj) { // copy object to avoid the use of references, because web authors often reuse flashvarsObj for multiple SWFs
							if (typeof par.flashvars != UNDEF) {
								par.flashvars += "&" + k + "=" + flashvarsObj[k];
							}
							else {
								par.flashvars = k + "=" + flashvarsObj[k];
							}
						}
					}
					if (hasPlayerVersion(swfVersionStr)) { // create SWF
						var obj = createSWF(att, par, replaceElemIdStr);
						if (att.id == replaceElemIdStr) {
							setVisibility(replaceElemIdStr, true);
						}
						callbackObj.success = true;
						callbackObj.ref = obj;
					}
					else if (xiSwfUrlStr && canExpressInstall()) { // show Adobe Express Install
						att.data = xiSwfUrlStr;
						showExpressInstall(att, par, replaceElemIdStr, callbackFn);
						return;
					}
					else { // show alternative content
						setVisibility(replaceElemIdStr, true);
					}
					if (callbackFn) { callbackFn(callbackObj); }
				});
			}
			else if (callbackFn) { callbackFn(callbackObj);	}
		},
		
		switchOffAutoHideShow: function() {
			autoHideShow = false;
		},
		
		ua: ua,
		
		getFlashPlayerVersion: function() {
			return { major:ua.pv[0], minor:ua.pv[1], release:ua.pv[2] };
		},
		
		hasFlashPlayerVersion: hasPlayerVersion,
		
		createSWF: function(attObj, parObj, replaceElemIdStr) {
			if (ua.w3) {
				return createSWF(attObj, parObj, replaceElemIdStr);
			}
			else {
				return undefined;
			}
		},
		
		showExpressInstall: function(att, par, replaceElemIdStr, callbackFn) {
			if (ua.w3 && canExpressInstall()) {
				showExpressInstall(att, par, replaceElemIdStr, callbackFn);
			}
		},
		
		removeSWF: function(objElemIdStr) {
			if (ua.w3) {
				removeSWF(objElemIdStr);
			}
		},
		
		createCSS: function(selStr, declStr, mediaStr, newStyleBoolean) {
			if (ua.w3) {
				createCSS(selStr, declStr, mediaStr, newStyleBoolean);
			}
		},
		
		addDomLoadEvent: addDomLoadEvent,
		
		addLoadEvent: addLoadEvent,
		
		getQueryParamValue: function(param) {
			var q = doc.location.search || doc.location.hash;
			if (q) {
				if (/\?/.test(q)) { q = q.split("?")[1]; } // strip question mark
				if (param == null) {
					return urlEncodeIfNecessary(q);
				}
				var pairs = q.split("&");
				for (var i = 0; i < pairs.length; i++) {
					if (pairs[i].substring(0, pairs[i].indexOf("=")) == param) {
						return urlEncodeIfNecessary(pairs[i].substring((pairs[i].indexOf("=") + 1)));
					}
				}
			}
			return "";
		},
		
		// For internal usage only
		expressInstallCallback: function() {
			if (isExpressInstallActive) {
				var obj = getElementById(EXPRESS_INSTALL_ID);
				if (obj && storedAltContent) {
					obj.parentNode.replaceChild(storedAltContent, obj);
					if (storedAltContentId) {
						setVisibility(storedAltContentId, true);
						if (ua.ie && ua.win) { storedAltContent.style.display = "block"; }
					}
					if (storedCallbackFn) { storedCallbackFn(storedCallbackObj); }
				}
				isExpressInstallActive = false;
			} 
		},

        noConflict: function () {
            window.swfobject = _swfobject;
        }
	};
}();
/*!
 * jQuery UI 1.8.14
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI
 */
(function( $, undefined ) {

// prevent duplicate loading
// this is only a problem because we proxy existing functions
// and we don't want to double proxy them
$.ui = $.ui || {};
if ( $.ui.version ) {
	return;
}

$.extend( $.ui, {
	version: "1.8.14",

	keyCode: {
		ALT: 18,
		BACKSPACE: 8,
		CAPS_LOCK: 20,
		COMMA: 188,
		COMMAND: 91,
		COMMAND_LEFT: 91, // COMMAND
		COMMAND_RIGHT: 93,
		CONTROL: 17,
		DELETE: 46,
		DOWN: 40,
		END: 35,
		ENTER: 13,
		ESCAPE: 27,
		HOME: 36,
		INSERT: 45,
		LEFT: 37,
		MENU: 93, // COMMAND_RIGHT
		NUMPAD_ADD: 107,
		NUMPAD_DECIMAL: 110,
		NUMPAD_DIVIDE: 111,
		NUMPAD_ENTER: 108,
		NUMPAD_MULTIPLY: 106,
		NUMPAD_SUBTRACT: 109,
		PAGE_DOWN: 34,
		PAGE_UP: 33,
		PERIOD: 190,
		RIGHT: 39,
		SHIFT: 16,
		SPACE: 32,
		TAB: 9,
		UP: 38,
		WINDOWS: 91 // COMMAND
	}
});

// plugins
$.fn.extend({
	_focus: $.fn.focus,
	focus: function( delay, fn ) {
		return typeof delay === "number" ?
			this.each(function() {
				var elem = this;
				setTimeout(function() {
					$( elem ).focus();
					if ( fn ) {
						fn.call( elem );
					}
				}, delay );
			}) :
			this._focus.apply( this, arguments );
	},

	scrollParent: function() {
		var scrollParent;
		if (($.browser.msie && (/(static|relative)/).test(this.css('position'))) || (/absolute/).test(this.css('position'))) {
			scrollParent = this.parents().filter(function() {
				return (/(relative|absolute|fixed)/).test($.curCSS(this,'position',1)) && (/(auto|scroll)/).test($.curCSS(this,'overflow',1)+$.curCSS(this,'overflow-y',1)+$.curCSS(this,'overflow-x',1));
			}).eq(0);
		} else {
			scrollParent = this.parents().filter(function() {
				return (/(auto|scroll)/).test($.curCSS(this,'overflow',1)+$.curCSS(this,'overflow-y',1)+$.curCSS(this,'overflow-x',1));
			}).eq(0);
		}

		return (/fixed/).test(this.css('position')) || !scrollParent.length ? $(document) : scrollParent;
	},

	zIndex: function( zIndex ) {
		if ( zIndex !== undefined ) {
			return this.css( "zIndex", zIndex );
		}

		if ( this.length ) {
			var elem = $( this[ 0 ] ), position, value;
			while ( elem.length && elem[ 0 ] !== document ) {
				// Ignore z-index if position is set to a value where z-index is ignored by the browser
				// This makes behavior of this function consistent across browsers
				// WebKit always returns auto if the element is positioned
				position = elem.css( "position" );
				if ( position === "absolute" || position === "relative" || position === "fixed" ) {
					// IE returns 0 when zIndex is not specified
					// other browsers return a string
					// we ignore the case of nested elements with an explicit value of 0
					// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
					value = parseInt( elem.css( "zIndex" ), 10 );
					if ( !isNaN( value ) && value !== 0 ) {
						return value;
					}
				}
				elem = elem.parent();
			}
		}

		return 0;
	},

	disableSelection: function() {
		return this.bind( ( $.support.selectstart ? "selectstart" : "mousedown" ) +
			".ui-disableSelection", function( event ) {
				event.preventDefault();
			});
	},

	enableSelection: function() {
		return this.unbind( ".ui-disableSelection" );
	}
});

$.each( [ "Width", "Height" ], function( i, name ) {
	var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
		type = name.toLowerCase(),
		orig = {
			innerWidth: $.fn.innerWidth,
			innerHeight: $.fn.innerHeight,
			outerWidth: $.fn.outerWidth,
			outerHeight: $.fn.outerHeight
		};

	function reduce( elem, size, border, margin ) {
		$.each( side, function() {
			size -= parseFloat( $.curCSS( elem, "padding" + this, true) ) || 0;
			if ( border ) {
				size -= parseFloat( $.curCSS( elem, "border" + this + "Width", true) ) || 0;
			}
			if ( margin ) {
				size -= parseFloat( $.curCSS( elem, "margin" + this, true) ) || 0;
			}
		});
		return size;
	}

	$.fn[ "inner" + name ] = function( size ) {
		if ( size === undefined ) {
			return orig[ "inner" + name ].call( this );
		}

		return this.each(function() {
			$( this ).css( type, reduce( this, size ) + "px" );
		});
	};

	$.fn[ "outer" + name] = function( size, margin ) {
		if ( typeof size !== "number" ) {
			return orig[ "outer" + name ].call( this, size );
		}

		return this.each(function() {
			$( this).css( type, reduce( this, size, true, margin ) + "px" );
		});
	};
});

// selectors
function focusable( element, isTabIndexNotNaN ) {
	var nodeName = element.nodeName.toLowerCase();
	if ( "area" === nodeName ) {
		var map = element.parentNode,
			mapName = map.name,
			img;
		if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
			return false;
		}
		img = $( "img[usemap=#" + mapName + "]" )[0];
		return !!img && visible( img );
	}
	return ( /input|select|textarea|button|object/.test( nodeName )
		? !element.disabled
		: "a" == nodeName
			? element.href || isTabIndexNotNaN
			: isTabIndexNotNaN)
		// the element and all of its ancestors must be visible
		&& visible( element );
}

function visible( element ) {
	return !$( element ).parents().andSelf().filter(function() {
		return $.curCSS( this, "visibility" ) === "hidden" ||
			$.expr.filters.hidden( this );
	}).length;
}

$.extend( $.expr[ ":" ], {
	data: function( elem, i, match ) {
		return !!$.data( elem, match[ 3 ] );
	},

	focusable: function( element ) {
		return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
	},

	tabbable: function( element ) {
		var tabIndex = $.attr( element, "tabindex" ),
			isTabIndexNaN = isNaN( tabIndex );
		return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
	}
});

// support
$(function() {
	var body = document.body,
		div = body.appendChild( div = document.createElement( "div" ) );

	$.extend( div.style, {
		minHeight: "100px",
		height: "auto",
		padding: 0,
		borderWidth: 0
	});

	$.support.minHeight = div.offsetHeight === 100;
	$.support.selectstart = "onselectstart" in div;

	// set display to none to avoid a layout bug in IE
	// http://dev.jquery.com/ticket/4014
	body.removeChild( div ).style.display = "none";
});





// deprecated
$.extend( $.ui, {
	// $.ui.plugin is deprecated.  Use the proxy pattern instead.
	plugin: {
		add: function( module, option, set ) {
			var proto = $.ui[ module ].prototype;
			for ( var i in set ) {
				proto.plugins[ i ] = proto.plugins[ i ] || [];
				proto.plugins[ i ].push( [ option, set[ i ] ] );
			}
		},
		call: function( instance, name, args ) {
			var set = instance.plugins[ name ];
			if ( !set || !instance.element[ 0 ].parentNode ) {
				return;
			}
	
			for ( var i = 0; i < set.length; i++ ) {
				if ( instance.options[ set[ i ][ 0 ] ] ) {
					set[ i ][ 1 ].apply( instance.element, args );
				}
			}
		}
	},
	
	// will be deprecated when we switch to jQuery 1.4 - use jQuery.contains()
	contains: function( a, b ) {
		return document.compareDocumentPosition ?
			a.compareDocumentPosition( b ) & 16 :
			a !== b && a.contains( b );
	},
	
	// only used by resizable
	hasScroll: function( el, a ) {
	
		//If overflow is hidden, the element might have extra content, but the user wants to hide it
		if ( $( el ).css( "overflow" ) === "hidden") {
			return false;
		}
	
		var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
			has = false;
	
		if ( el[ scroll ] > 0 ) {
			return true;
		}
	
		// TODO: determine which cases actually cause this to happen
		// if the element doesn't have the scroll set, see if it's possible to
		// set the scroll
		el[ scroll ] = 1;
		has = ( el[ scroll ] > 0 );
		el[ scroll ] = 0;
		return has;
	},
	
	// these are odd functions, fix the API or move into individual plugins
	isOverAxis: function( x, reference, size ) {
		//Determines when x coordinate is over "b" element axis
		return ( x > reference ) && ( x < ( reference + size ) );
	},
	isOver: function( y, x, top, left, height, width ) {
		//Determines when x, y coordinates is over "b" element
		return $.ui.isOverAxis( y, top, height ) && $.ui.isOverAxis( x, left, width );
	}
});

})( jQuery );
/*!
 * jQuery UI Widget 1.8.14
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Widget
 */
(function( $, undefined ) {

// jQuery 1.4+
if ( $.cleanData ) {
	var _cleanData = $.cleanData;
	$.cleanData = function( elems ) {
		for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
			$( elem ).triggerHandler( "remove" );
		}
		_cleanData( elems );
	};
} else {
	var _remove = $.fn.remove;
	$.fn.remove = function( selector, keepData ) {
		return this.each(function() {
			if ( !keepData ) {
				if ( !selector || $.filter( selector, [ this ] ).length ) {
					$( "*", this ).add( [ this ] ).each(function() {
						$( this ).triggerHandler( "remove" );
					});
				}
			}
			return _remove.call( $(this), selector, keepData );
		});
	};
}

$.widget = function( name, base, prototype ) {
	var namespace = name.split( "." )[ 0 ],
		fullName;
	name = name.split( "." )[ 1 ];
	fullName = namespace + "-" + name;

	if ( !prototype ) {
		prototype = base;
		base = $.Widget;
	}

	// create selector for plugin
	$.expr[ ":" ][ fullName ] = function( elem ) {
		return !!$.data( elem, name );
	};

	$[ namespace ] = $[ namespace ] || {};
	$[ namespace ][ name ] = function( options, element ) {
		// allow instantiation without initializing for simple inheritance
		if ( arguments.length ) {
			this._createWidget( options, element );
		}
	};

	var basePrototype = new base();
	// we need to make the options hash a property directly on the new instance
	// otherwise we'll modify the options hash on the prototype that we're
	// inheriting from
//	$.each( basePrototype, function( key, val ) {
//		if ( $.isPlainObject(val) ) {
//			basePrototype[ key ] = $.extend( {}, val );
//		}
//	});
	basePrototype.options = $.extend( true, {}, basePrototype.options );
	$[ namespace ][ name ].prototype = $.extend( true, basePrototype, {
		namespace: namespace,
		widgetName: name,
		widgetEventPrefix: $[ namespace ][ name ].prototype.widgetEventPrefix || name,
		widgetBaseClass: fullName
	}, prototype );

	$.widget.bridge( name, $[ namespace ][ name ] );
};

$.widget.bridge = function( name, object ) {
	$.fn[ name ] = function( options ) {
		var isMethodCall = typeof options === "string",
			args = Array.prototype.slice.call( arguments, 1 ),
			returnValue = this;

		// allow multiple hashes to be passed on init
		options = !isMethodCall && args.length ?
			$.extend.apply( null, [ true, options ].concat(args) ) :
			options;

		// prevent calls to internal methods
		if ( isMethodCall && options.charAt( 0 ) === "_" ) {
			return returnValue;
		}

		if ( isMethodCall ) {
			this.each(function() {
				var instance = $.data( this, name ),
					methodValue = instance && $.isFunction( instance[options] ) ?
						instance[ options ].apply( instance, args ) :
						instance;
				// TODO: add this back in 1.9 and use $.error() (see #5972)
//				if ( !instance ) {
//					throw "cannot call methods on " + name + " prior to initialization; " +
//						"attempted to call method '" + options + "'";
//				}
//				if ( !$.isFunction( instance[options] ) ) {
//					throw "no such method '" + options + "' for " + name + " widget instance";
//				}
//				var methodValue = instance[ options ].apply( instance, args );
				if ( methodValue !== instance && methodValue !== undefined ) {
					returnValue = methodValue;
					return false;
				}
			});
		} else {
			this.each(function() {
				var instance = $.data( this, name );
				if ( instance ) {
					instance.option( options || {} )._init();
				} else {
					$.data( this, name, new object( options, this ) );
				}
			});
		}

		return returnValue;
	};
};

$.Widget = function( options, element ) {
	// allow instantiation without initializing for simple inheritance
	if ( arguments.length ) {
		this._createWidget( options, element );
	}
};

$.Widget.prototype = {
	widgetName: "widget",
	widgetEventPrefix: "",
	options: {
		disabled: false
	},
	_createWidget: function( options, element ) {
		// $.widget.bridge stores the plugin instance, but we do it anyway
		// so that it's stored even before the _create function runs
		$.data( element, this.widgetName, this );
		this.element = $( element );
		this.options = $.extend( true, {},
			this.options,
			this._getCreateOptions(),
			options );

		var self = this;
		this.element.bind( "remove." + this.widgetName, function() {
			self.destroy();
		});

		this._create();
		this._trigger( "create" );
		this._init();
	},
	_getCreateOptions: function() {
		return $.metadata && $.metadata.get( this.element[0] )[ this.widgetName ];
	},
	_create: function() {},
	_init: function() {},

	destroy: function() {
		this.element
			.unbind( "." + this.widgetName )
			.removeData( this.widgetName );
		this.widget()
			.unbind( "." + this.widgetName )
			.removeAttr( "aria-disabled" )
			.removeClass(
				this.widgetBaseClass + "-disabled " +
				"ui-state-disabled" );
	},

	widget: function() {
		return this.element;
	},

	option: function( key, value ) {
		var options = key;

		if ( arguments.length === 0 ) {
			// don't return a reference to the internal hash
			return $.extend( {}, this.options );
		}

		if  (typeof key === "string" ) {
			if ( value === undefined ) {
				return this.options[ key ];
			}
			options = {};
			options[ key ] = value;
		}

		this._setOptions( options );

		return this;
	},
	_setOptions: function( options ) {
		var self = this;
		$.each( options, function( key, value ) {
			self._setOption( key, value );
		});

		return this;
	},
	_setOption: function( key, value ) {
		this.options[ key ] = value;

		if ( key === "disabled" ) {
			this.widget()
				[ value ? "addClass" : "removeClass"](
					this.widgetBaseClass + "-disabled" + " " +
					"ui-state-disabled" )
				.attr( "aria-disabled", value );
		}

		return this;
	},

	enable: function() {
		return this._setOption( "disabled", false );
	},
	disable: function() {
		return this._setOption( "disabled", true );
	},

	_trigger: function( type, event, data ) {
		var callback = this.options[ type ];

		event = $.Event( event );
		event.type = ( type === this.widgetEventPrefix ?
			type :
			this.widgetEventPrefix + type ).toLowerCase();
		data = data || {};

		// copy original event properties over to the new event
		// this would happen if we could call $.event.fix instead of $.Event
		// but we don't have a way to force an event to be fixed multiple times
		if ( event.originalEvent ) {
			for ( var i = $.event.props.length, prop; i; ) {
				prop = $.event.props[ --i ];
				event[ prop ] = event.originalEvent[ prop ];
			}
		}

		this.element.trigger( event, data );

		return !( $.isFunction(callback) &&
			callback.call( this.element[0], event, data ) === false ||
			event.isDefaultPrevented() );
	}
};

})( jQuery );
/*!
 * jQuery UI Mouse 1.8.14
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Mouse
 *
 * Depends:
 *	jquery.ui.widget.js
 */
(function( $, undefined ) {

var mouseHandled = false;
$(document).mousedown(function(e) {
	mouseHandled = false;
});

$.widget("ui.mouse", {
	options: {
		cancel: ':input,option',
		distance: 1,
		delay: 0
	},
	_mouseInit: function() {
		var self = this;

		this.element
			.bind('mousedown.'+this.widgetName, function(event) {
				return self._mouseDown(event);
			})
			.bind('click.'+this.widgetName, function(event) {
				if (true === $.data(event.target, self.widgetName + '.preventClickEvent')) {
				    $.removeData(event.target, self.widgetName + '.preventClickEvent');
					event.stopImmediatePropagation();
					return false;
				}
			});

		this.started = false;
	},

	// TODO: make sure destroying one instance of mouse doesn't mess with
	// other instances of mouse
	_mouseDestroy: function() {
		this.element.unbind('.'+this.widgetName);
	},

	_mouseDown: function(event) {
		// don't let more than one widget handle mouseStart
		if(mouseHandled) {return};

		// we may have missed mouseup (out of window)
		(this._mouseStarted && this._mouseUp(event));

		this._mouseDownEvent = event;

		var self = this,
			btnIsLeft = (event.which == 1),
			elIsCancel = (typeof this.options.cancel == "string" ? $(event.target).closest(this.options.cancel).length : false);
		if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
			return true;
		}

		this.mouseDelayMet = !this.options.delay;
		if (!this.mouseDelayMet) {
			this._mouseDelayTimer = setTimeout(function() {
				self.mouseDelayMet = true;
			}, this.options.delay);
		}

		if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
			this._mouseStarted = (this._mouseStart(event) !== false);
			if (!this._mouseStarted) {
				event.preventDefault();
				return true;
			}
		}

		// Click event may never have fired (Gecko & Opera)
		if (true === $.data(event.target, this.widgetName + '.preventClickEvent')) {
			$.removeData(event.target, this.widgetName + '.preventClickEvent');
		}

		// these delegates are required to keep context
		this._mouseMoveDelegate = function(event) {
			return self._mouseMove(event);
		};
		this._mouseUpDelegate = function(event) {
			return self._mouseUp(event);
		};
		$(document)
			.bind('mousemove.'+this.widgetName, this._mouseMoveDelegate)
			.bind('mouseup.'+this.widgetName, this._mouseUpDelegate);

		event.preventDefault();
		
		mouseHandled = true;
		return true;
	},

	_mouseMove: function(event) {
		// IE mouseup check - mouseup happened when mouse was out of window
		if ($.browser.msie && !(document.documentMode >= 9) && !event.button) {
			return this._mouseUp(event);
		}

		if (this._mouseStarted) {
			this._mouseDrag(event);
			return event.preventDefault();
		}

		if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
			this._mouseStarted =
				(this._mouseStart(this._mouseDownEvent, event) !== false);
			(this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));
		}

		return !this._mouseStarted;
	},

	_mouseUp: function(event) {
		$(document)
			.unbind('mousemove.'+this.widgetName, this._mouseMoveDelegate)
			.unbind('mouseup.'+this.widgetName, this._mouseUpDelegate);

		if (this._mouseStarted) {
			this._mouseStarted = false;

			if (event.target == this._mouseDownEvent.target) {
			    $.data(event.target, this.widgetName + '.preventClickEvent', true);
			}

			this._mouseStop(event);
		}

		return false;
	},

	_mouseDistanceMet: function(event) {
		return (Math.max(
				Math.abs(this._mouseDownEvent.pageX - event.pageX),
				Math.abs(this._mouseDownEvent.pageY - event.pageY)
			) >= this.options.distance
		);
	},

	_mouseDelayMet: function(event) {
		return this.mouseDelayMet;
	},

	// These are placeholder methods, to be overriden by extending plugin
	_mouseStart: function(event) {},
	_mouseDrag: function(event) {},
	_mouseStop: function(event) {},
	_mouseCapture: function(event) { return true; }
});

})(jQuery);
/*
 * jQuery UI Slider 1.8.14
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Slider
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.mouse.js
 *	jquery.ui.widget.js
 */
(function( $, undefined ) {

// number of pages in a slider
// (how many times can you page up/down to go through the whole range)
var numPages = 5;

$.widget( "ui.slider", $.ui.mouse, {

	widgetEventPrefix: "slide",

	options: {
		animate: false,
		distance: 0,
		max: 100,
		min: 0,
		orientation: "horizontal",
		range: false,
		step: 1,
		value: 0,
		values: null
	},

	_create: function() {
		var self = this,
			o = this.options,
			existingHandles = this.element.find( ".ui-slider-handle" ).addClass( "ui-state-default ui-corner-all" ),
			handle = "<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>",
			handleCount = ( o.values && o.values.length ) || 1,
			handles = [];

		this._keySliding = false;
		this._mouseSliding = false;
		this._animateOff = true;
		this._handleIndex = null;
		this._detectOrientation();
		this._mouseInit();

		this.element
			.addClass( "ui-slider" +
				" ui-slider-" + this.orientation +
				" ui-widget" +
				" ui-widget-content" +
				" ui-corner-all" +
				( o.disabled ? " ui-slider-disabled ui-disabled" : "" ) );

		this.range = $([]);

		if ( o.range ) {
			if ( o.range === true ) {
				if ( !o.values ) {
					o.values = [ this._valueMin(), this._valueMin() ];
				}
				if ( o.values.length && o.values.length !== 2 ) {
					o.values = [ o.values[0], o.values[0] ];
				}
			}

			this.range = $( "<div></div>" )
				.appendTo( this.element )
				.addClass( "ui-slider-range" +
				// note: this isn't the most fittingly semantic framework class for this element,
				// but worked best visually with a variety of themes
				" ui-widget-header" + 
				( ( o.range === "min" || o.range === "max" ) ? " ui-slider-range-" + o.range : "" ) );
		}

		for ( var i = existingHandles.length; i < handleCount; i += 1 ) {
			handles.push( handle );
		}

		this.handles = existingHandles.add( $( handles.join( "" ) ).appendTo( self.element ) );

		this.handle = this.handles.eq( 0 );

		this.handles.add( this.range ).filter( "a" )
			.click(function( event ) {
				event.preventDefault();
			})
			.hover(function() {
				if ( !o.disabled ) {
					$( this ).addClass( "ui-state-hover" );
				}
			}, function() {
				$( this ).removeClass( "ui-state-hover" );
			})
			.focus(function() {
				if ( !o.disabled ) {
					$( ".ui-slider .ui-state-focus" ).removeClass( "ui-state-focus" );
					$( this ).addClass( "ui-state-focus" );
				} else {
					$( this ).blur();
				}
			})
			.blur(function() {
				$( this ).removeClass( "ui-state-focus" );
			});

		this.handles.each(function( i ) {
			$( this ).data( "index.ui-slider-handle", i );
		});

		this.handles
			.keydown(function( event ) {
				var ret = true,
					index = $( this ).data( "index.ui-slider-handle" ),
					allowed,
					curVal,
					newVal,
					step;
	
				if ( self.options.disabled ) {
					return;
				}
	
				switch ( event.keyCode ) {
					case $.ui.keyCode.HOME:
					case $.ui.keyCode.END:
					case $.ui.keyCode.PAGE_UP:
					case $.ui.keyCode.PAGE_DOWN:
					case $.ui.keyCode.UP:
					case $.ui.keyCode.RIGHT:
					case $.ui.keyCode.DOWN:
					case $.ui.keyCode.LEFT:
						ret = false;
						if ( !self._keySliding ) {
							self._keySliding = true;
							$( this ).addClass( "ui-state-active" );
							allowed = self._start( event, index );
							if ( allowed === false ) {
								return;
							}
						}
						break;
				}
	
				step = self.options.step;
				if ( self.options.values && self.options.values.length ) {
					curVal = newVal = self.values( index );
				} else {
					curVal = newVal = self.value();
				}
	
				switch ( event.keyCode ) {
					case $.ui.keyCode.HOME:
						newVal = self._valueMin();
						break;
					case $.ui.keyCode.END:
						newVal = self._valueMax();
						break;
					case $.ui.keyCode.PAGE_UP:
						newVal = self._trimAlignValue( curVal + ( (self._valueMax() - self._valueMin()) / numPages ) );
						break;
					case $.ui.keyCode.PAGE_DOWN:
						newVal = self._trimAlignValue( curVal - ( (self._valueMax() - self._valueMin()) / numPages ) );
						break;
					case $.ui.keyCode.UP:
					case $.ui.keyCode.RIGHT:
						if ( curVal === self._valueMax() ) {
							return;
						}
						newVal = self._trimAlignValue( curVal + step );
						break;
					case $.ui.keyCode.DOWN:
					case $.ui.keyCode.LEFT:
						if ( curVal === self._valueMin() ) {
							return;
						}
						newVal = self._trimAlignValue( curVal - step );
						break;
				}
	
				self._slide( event, index, newVal );
	
				return ret;
	
			})
			.keyup(function( event ) {
				var index = $( this ).data( "index.ui-slider-handle" );
	
				if ( self._keySliding ) {
					self._keySliding = false;
					self._stop( event, index );
					self._change( event, index );
					$( this ).removeClass( "ui-state-active" );
				}
	
			});

		this._refreshValue();

		this._animateOff = false;
	},

	destroy: function() {
		this.handles.remove();
		this.range.remove();

		this.element
			.removeClass( "ui-slider" +
				" ui-slider-horizontal" +
				" ui-slider-vertical" +
				" ui-slider-disabled" +
				" ui-widget" +
				" ui-widget-content" +
				" ui-corner-all" )
			.removeData( "slider" )
			.unbind( ".slider" );

		this._mouseDestroy();

		return this;
	},

	_mouseCapture: function( event ) {
		var o = this.options,
			position,
			normValue,
			distance,
			closestHandle,
			self,
			index,
			allowed,
			offset,
			mouseOverHandle;

		if ( o.disabled ) {
			return false;
		}

		this.elementSize = {
			width: this.element.outerWidth(),
			height: this.element.outerHeight()
		};
		this.elementOffset = this.element.offset();

		position = { x: event.pageX, y: event.pageY };
		normValue = this._normValueFromMouse( position );
		distance = this._valueMax() - this._valueMin() + 1;
		self = this;
		this.handles.each(function( i ) {
			var thisDistance = Math.abs( normValue - self.values(i) );
			if ( distance > thisDistance ) {
				distance = thisDistance;
				closestHandle = $( this );
				index = i;
			}
		});

		// workaround for bug #3736 (if both handles of a range are at 0,
		// the first is always used as the one with least distance,
		// and moving it is obviously prevented by preventing negative ranges)
		if( o.range === true && this.values(1) === o.min ) {
			index += 1;
			closestHandle = $( this.handles[index] );
		}

		allowed = this._start( event, index );
		if ( allowed === false ) {
			return false;
		}
		this._mouseSliding = true;

		self._handleIndex = index;

		closestHandle
			.addClass( "ui-state-active" )
			.focus();
		
		offset = closestHandle.offset();
		mouseOverHandle = !$( event.target ).parents().andSelf().is( ".ui-slider-handle" );
		this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {
			left: event.pageX - offset.left - ( closestHandle.width() / 2 ),
			top: event.pageY - offset.top -
				( closestHandle.height() / 2 ) -
				( parseInt( closestHandle.css("borderTopWidth"), 10 ) || 0 ) -
				( parseInt( closestHandle.css("borderBottomWidth"), 10 ) || 0) +
				( parseInt( closestHandle.css("marginTop"), 10 ) || 0)
		};

		if ( !this.handles.hasClass( "ui-state-hover" ) ) {
			this._slide( event, index, normValue );
		}
		this._animateOff = true;
		return true;
	},

	_mouseStart: function( event ) {
		return true;
	},

	_mouseDrag: function( event ) {
		var position = { x: event.pageX, y: event.pageY },
			normValue = this._normValueFromMouse( position );
		
		this._slide( event, this._handleIndex, normValue );

		return false;
	},

	_mouseStop: function( event ) {
		this.handles.removeClass( "ui-state-active" );
		this._mouseSliding = false;

		this._stop( event, this._handleIndex );
		this._change( event, this._handleIndex );

		this._handleIndex = null;
		this._clickOffset = null;
		this._animateOff = false;

		return false;
	},
	
	_detectOrientation: function() {
		this.orientation = ( this.options.orientation === "vertical" ) ? "vertical" : "horizontal";
	},

	_normValueFromMouse: function( position ) {
		var pixelTotal,
			pixelMouse,
			percentMouse,
			valueTotal,
			valueMouse;

		if ( this.orientation === "horizontal" ) {
			pixelTotal = this.elementSize.width;
			pixelMouse = position.x - this.elementOffset.left - ( this._clickOffset ? this._clickOffset.left : 0 );
		} else {
			pixelTotal = this.elementSize.height;
			pixelMouse = position.y - this.elementOffset.top - ( this._clickOffset ? this._clickOffset.top : 0 );
		}

		percentMouse = ( pixelMouse / pixelTotal );
		if ( percentMouse > 1 ) {
			percentMouse = 1;
		}
		if ( percentMouse < 0 ) {
			percentMouse = 0;
		}
		if ( this.orientation === "vertical" ) {
			percentMouse = 1 - percentMouse;
		}

		valueTotal = this._valueMax() - this._valueMin();
		valueMouse = this._valueMin() + percentMouse * valueTotal;

		return this._trimAlignValue( valueMouse );
	},

	_start: function( event, index ) {
		var uiHash = {
			handle: this.handles[ index ],
			value: this.value()
		};
		if ( this.options.values && this.options.values.length ) {
			uiHash.value = this.values( index );
			uiHash.values = this.values();
		}
		return this._trigger( "start", event, uiHash );
	},

	_slide: function( event, index, newVal ) {
		var otherVal,
			newValues,
			allowed;

		if ( this.options.values && this.options.values.length ) {
			otherVal = this.values( index ? 0 : 1 );

			if ( ( this.options.values.length === 2 && this.options.range === true ) && 
					( ( index === 0 && newVal > otherVal) || ( index === 1 && newVal < otherVal ) )
				) {
				newVal = otherVal;
			}

			if ( newVal !== this.values( index ) ) {
				newValues = this.values();
				newValues[ index ] = newVal;
				// A slide can be canceled by returning false from the slide callback
				allowed = this._trigger( "slide", event, {
					handle: this.handles[ index ],
					value: newVal,
					values: newValues
				} );
				otherVal = this.values( index ? 0 : 1 );
				if ( allowed !== false ) {
					this.values( index, newVal, true );
				}
			}
		} else {
			if ( newVal !== this.value() ) {
				// A slide can be canceled by returning false from the slide callback
				allowed = this._trigger( "slide", event, {
					handle: this.handles[ index ],
					value: newVal
				} );
				if ( allowed !== false ) {
					this.value( newVal );
				}
			}
		}
	},

	_stop: function( event, index ) {
		var uiHash = {
			handle: this.handles[ index ],
			value: this.value()
		};
		if ( this.options.values && this.options.values.length ) {
			uiHash.value = this.values( index );
			uiHash.values = this.values();
		}

		this._trigger( "stop", event, uiHash );
	},

	_change: function( event, index ) {
		if ( !this._keySliding && !this._mouseSliding ) {
			var uiHash = {
				handle: this.handles[ index ],
				value: this.value()
			};
			if ( this.options.values && this.options.values.length ) {
				uiHash.value = this.values( index );
				uiHash.values = this.values();
			}

			this._trigger( "change", event, uiHash );
		}
	},

	value: function( newValue ) {
		if ( arguments.length ) {
			this.options.value = this._trimAlignValue( newValue );
			this._refreshValue();
			this._change( null, 0 );
			return;
		}

		return this._value();
	},

	values: function( index, newValue ) {
		var vals,
			newValues,
			i;

		if ( arguments.length > 1 ) {
			this.options.values[ index ] = this._trimAlignValue( newValue );
			this._refreshValue();
			this._change( null, index );
			return;
		}

		if ( arguments.length ) {
			if ( $.isArray( arguments[ 0 ] ) ) {
				vals = this.options.values;
				newValues = arguments[ 0 ];
				for ( i = 0; i < vals.length; i += 1 ) {
					vals[ i ] = this._trimAlignValue( newValues[ i ] );
					this._change( null, i );
				}
				this._refreshValue();
			} else {
				if ( this.options.values && this.options.values.length ) {
					return this._values( index );
				} else {
					return this.value();
				}
			}
		} else {
			return this._values();
		}
	},

	_setOption: function( key, value ) {
		var i,
			valsLength = 0;

		if ( $.isArray( this.options.values ) ) {
			valsLength = this.options.values.length;
		}

		$.Widget.prototype._setOption.apply( this, arguments );

		switch ( key ) {
			case "disabled":
				if ( value ) {
					this.handles.filter( ".ui-state-focus" ).blur();
					this.handles.removeClass( "ui-state-hover" );
					this.handles.attr( "disabled", "disabled" );
					this.element.addClass( "ui-disabled" );
				} else {
					this.handles.removeAttr( "disabled" );
					this.element.removeClass( "ui-disabled" );
				}
				break;
			case "orientation":
				this._detectOrientation();
				this.element
					.removeClass( "ui-slider-horizontal ui-slider-vertical" )
					.addClass( "ui-slider-" + this.orientation );
				this._refreshValue();
				break;
			case "value":
				this._animateOff = true;
				this._refreshValue();
				this._change( null, 0 );
				this._animateOff = false;
				break;
			case "values":
				this._animateOff = true;
				this._refreshValue();
				for ( i = 0; i < valsLength; i += 1 ) {
					this._change( null, i );
				}
				this._animateOff = false;
				break;
		}
	},

	//internal value getter
	// _value() returns value trimmed by min and max, aligned by step
	_value: function() {
		var val = this.options.value;
		val = this._trimAlignValue( val );

		return val;
	},

	//internal values getter
	// _values() returns array of values trimmed by min and max, aligned by step
	// _values( index ) returns single value trimmed by min and max, aligned by step
	_values: function( index ) {
		var val,
			vals,
			i;

		if ( arguments.length ) {
			val = this.options.values[ index ];
			val = this._trimAlignValue( val );

			return val;
		} else {
			// .slice() creates a copy of the array
			// this copy gets trimmed by min and max and then returned
			vals = this.options.values.slice();
			for ( i = 0; i < vals.length; i+= 1) {
				vals[ i ] = this._trimAlignValue( vals[ i ] );
			}

			return vals;
		}
	},
	
	// returns the step-aligned value that val is closest to, between (inclusive) min and max
	_trimAlignValue: function( val ) {
		if ( val <= this._valueMin() ) {
			return this._valueMin();
		}
		if ( val >= this._valueMax() ) {
			return this._valueMax();
		}
		var step = ( this.options.step > 0 ) ? this.options.step : 1,
			valModStep = (val - this._valueMin()) % step;
			alignValue = val - valModStep;

		if ( Math.abs(valModStep) * 2 >= step ) {
			alignValue += ( valModStep > 0 ) ? step : ( -step );
		}

		// Since JavaScript has problems with large floats, round
		// the final value to 5 digits after the decimal point (see #4124)
		return parseFloat( alignValue.toFixed(5) );
	},

	_valueMin: function() {
		return this.options.min;
	},

	_valueMax: function() {
		return this.options.max;
	},
	
	_refreshValue: function() {
		var oRange = this.options.range,
			o = this.options,
			self = this,
			animate = ( !this._animateOff ) ? o.animate : false,
			valPercent,
			_set = {},
			lastValPercent,
			value,
			valueMin,
			valueMax;

		if ( this.options.values && this.options.values.length ) {
			this.handles.each(function( i, j ) {
				valPercent = ( self.values(i) - self._valueMin() ) / ( self._valueMax() - self._valueMin() ) * 100;
				_set[ self.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
				$( this ).stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );
				if ( self.options.range === true ) {
					if ( self.orientation === "horizontal" ) {
						if ( i === 0 ) {
							self.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { left: valPercent + "%" }, o.animate );
						}
						if ( i === 1 ) {
							self.range[ animate ? "animate" : "css" ]( { width: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
						}
					} else {
						if ( i === 0 ) {
							self.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { bottom: ( valPercent ) + "%" }, o.animate );
						}
						if ( i === 1 ) {
							self.range[ animate ? "animate" : "css" ]( { height: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
						}
					}
				}
				lastValPercent = valPercent;
			});
		} else {
			value = this.value();
			valueMin = this._valueMin();
			valueMax = this._valueMax();
			valPercent = ( valueMax !== valueMin ) ?
					( value - valueMin ) / ( valueMax - valueMin ) * 100 :
					0;
			_set[ self.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
			this.handle.stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );

			if ( oRange === "min" && this.orientation === "horizontal" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { width: valPercent + "%" }, o.animate );
			}
			if ( oRange === "max" && this.orientation === "horizontal" ) {
				this.range[ animate ? "animate" : "css" ]( { width: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
			}
			if ( oRange === "min" && this.orientation === "vertical" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { height: valPercent + "%" }, o.animate );
			}
			if ( oRange === "max" && this.orientation === "vertical" ) {
				this.range[ animate ? "animate" : "css" ]( { height: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
			}
		}
	}

});

$.extend( $.ui.slider, {
	version: "1.8.14"
});

}(jQuery));
/**
 * Copyright (c) 2005 - 2010, James Auldridge
 * All rights reserved.
 *
 * Licensed under the BSD, MIT, and GPL (your choice!) Licenses:
 *  http://code.google.com/p/cookies/wiki/License
 *
 */
var jaaulde = window.jaaulde || {};
jaaulde.utils = jaaulde.utils || {};
jaaulde.utils.cookies = ( function()
{
	var resolveOptions, assembleOptionsString, parseCookies, constructor, defaultOptions = {
		expiresAt: null,
		path: '/',
		domain:  null,
		secure: false
	};
	/**
	* resolveOptions - receive an options object and ensure all options are present and valid, replacing with defaults where necessary
	*
	* @access private
	* @static
	* @parameter Object options - optional options to start with
	* @return Object complete and valid options object
	*/
	resolveOptions = function( options )
	{
		var returnValue, expireDate;

		if( typeof options !== 'object' || options === null )
		{
			returnValue = defaultOptions;
		}
		else
		{
			returnValue = {
				expiresAt: defaultOptions.expiresAt,
				path: defaultOptions.path,
				domain: defaultOptions.domain,
				secure: defaultOptions.secure
			};

			if( typeof options.expiresAt === 'object' && options.expiresAt instanceof Date )
			{
				returnValue.expiresAt = options.expiresAt;
			}
			else if( typeof options.hoursToLive === 'number' && options.hoursToLive !== 0 )
			{
				expireDate = new Date();
				expireDate.setTime( expireDate.getTime() + ( options.hoursToLive * 60 * 60 * 1000 ) );
				returnValue.expiresAt = expireDate;
			}

			if( typeof options.path === 'string' && options.path !== '' )
			{
				returnValue.path = options.path;
			}

			if( typeof options.domain === 'string' && options.domain !== '' )
			{
				returnValue.domain = options.domain;
			}

			if( options.secure === true )
			{
				returnValue.secure = options.secure;
			}
		}

		return returnValue;
		};
	/**
	* assembleOptionsString - analyze options and assemble appropriate string for setting a cookie with those options
	*
	* @access private
	* @static
	* @parameter options OBJECT - optional options to start with
	* @return STRING - complete and valid cookie setting options
	*/
	assembleOptionsString = function( options )
	{
		options = resolveOptions( options );

		return (
			( typeof options.expiresAt === 'object' && options.expiresAt instanceof Date ? '; expires=' + options.expiresAt.toGMTString() : '' ) +
			'; path=' + options.path +
			( typeof options.domain === 'string' ? '; domain=' + options.domain : '' ) +
			( options.secure === true ? '; secure' : '' )
		);
	};
	/**
	* parseCookies - retrieve document.cookie string and break it into a hash with values decoded and unserialized
	*
	* @access private
	* @static
	* @return OBJECT - hash of cookies from document.cookie
	*/
	parseCookies = function()
	{
		var cookies = {}, i, pair, name, value, separated = document.cookie.split( ';' ), unparsedValue;
		for( i = 0; i < separated.length; i = i + 1 )
		{
			pair = separated[i].split( '=' );
			name = pair[0].replace( /^\s*/, '' ).replace( /\s*$/, '' );

			try
			{
				value = decodeURIComponent( pair[1] );
			}
			catch( e1 )
			{
				value = pair[1];
			}

			if( typeof JSON === 'object' && JSON !== null && typeof JSON.parse === 'function' )
			{
				try
				{
					unparsedValue = value;
					value = JSON.parse( value );
				}
				catch( e2 )
				{
					value = unparsedValue;
				}
			}

			cookies[name] = value;
		}
		return cookies;
	};

	constructor = function(){};

	/**
	 * get - get one, several, or all cookies
	 *
	 * @access public
	 * @paramater Mixed cookieName - String:name of single cookie; Array:list of multiple cookie names; Void (no param):if you want all cookies
	 * @return Mixed - Value of cookie as set; Null:if only one cookie is requested and is not found; Object:hash of multiple or all cookies (if multiple or all requested);
	 */
	constructor.prototype.get = function( cookieName )
	{
		var returnValue, item, cookies = parseCookies();

		if( typeof cookieName === 'string' )
		{
			returnValue = ( typeof cookies[cookieName] !== 'undefined' ) ? cookies[cookieName] : null;
		}
		else if( typeof cookieName === 'object' && cookieName !== null )
		{
			returnValue = {};
			for( item in cookieName )
			{
				if( typeof cookies[cookieName[item]] !== 'undefined' )
				{
					returnValue[cookieName[item]] = cookies[cookieName[item]];
				}
				else
				{
					returnValue[cookieName[item]] = null;
				}
			}
		}
		else
		{
			returnValue = cookies;
		}

		return returnValue;
	};
	/**
	 * filter - get array of cookies whose names match the provided RegExp
	 *
	 * @access public
	 * @paramater Object RegExp - The regular expression to match against cookie names
	 * @return Mixed - Object:hash of cookies whose names match the RegExp
	 */
	constructor.prototype.filter = function( cookieNameRegExp )
	{
		var cookieName, returnValue = {}, cookies = parseCookies();

		if( typeof cookieNameRegExp === 'string' )
		{
			cookieNameRegExp = new RegExp( cookieNameRegExp );
		}

		for( cookieName in cookies )
		{
			if( cookieName.match( cookieNameRegExp ) )
			{
				returnValue[cookieName] = cookies[cookieName];
			}
		}

		return returnValue;
	};
	/**
	 * set - set or delete a cookie with desired options
	 *
	 * @access public
	 * @paramater String cookieName - name of cookie to set
	 * @paramater Mixed value - Any JS value. If not a string, will be JSON encoded; NULL to delete
	 * @paramater Object options - optional list of cookie options to specify
	 * @return void
	 */
	constructor.prototype.set = function( cookieName, value, options )
	{
		if( typeof options !== 'object' || options === null )
		{
			options = {};
		}

		if( typeof value === 'undefined' || value === null )
		{
			value = '';
			options.hoursToLive = -8760;
		}

		else if( typeof value !== 'string' )
		{
			if( typeof JSON === 'object' && JSON !== null && typeof JSON.stringify === 'function' )
			{
				value = JSON.stringify( value );
			}
			else
			{
				throw new Error( 'cookies.set() received non-string value and could not serialize.' );
			}
		}


		var optionsString = assembleOptionsString( options );

		document.cookie = cookieName + '=' + encodeURIComponent( value ) + optionsString;
	};
	/**
	 * del - delete a cookie (domain and path options must match those with which the cookie was set; this is really an alias for set() with parameters simplified for this use)
	 *
	 * @access public
	 * @paramater MIxed cookieName - String name of cookie to delete, or Bool true to delete all
	 * @paramater Object options - optional list of cookie options to specify ( path, domain )
	 * @return void
	 */
	constructor.prototype.del = function( cookieName, options )
	{
		var allCookies = {}, name;

		if( typeof options !== 'object' || options === null )
		{
			options = {};
		}

		if( typeof cookieName === 'boolean' && cookieName === true )
		{
			allCookies = this.get();
		}
		else if( typeof cookieName === 'string' )
		{
			allCookies[cookieName] = true;
		}

		for( name in allCookies )
		{
			if( typeof name === 'string' && name !== '' )
			{
				this.set( name, null, options );
			}
		}
	};
	/**
	 * test - test whether the browser is accepting cookies
	 *
	 * @access public
	 * @return Boolean
	 */
	constructor.prototype.test = function()
	{
		var returnValue = false, testName = 'cT', testValue = 'data';

		this.set( testName, testValue );

		if( this.get( testName ) === testValue )
		{
			this.del( testName );
			returnValue = true;
		}

		return returnValue;
	};
	/**
	 * setOptions - set default options for calls to cookie methods
	 *
	 * @access public
	 * @param Object options - list of cookie options to specify
	 * @return void
	 */
	constructor.prototype.setOptions = function( options )
	{
		if( typeof options !== 'object' )
		{
			options = null;
		}

		defaultOptions = resolveOptions( options );
	};

	return new constructor();
} )();

( function()
{
	if( window.jQuery )
	{
		( function( $ )
		{
			$.cookies = jaaulde.utils.cookies;

			var extensions = {
				/**
				* $( 'selector' ).cookify - set the value of an input field, or the innerHTML of an element, to a cookie by the name or id of the field or element
				*                           (field or element MUST have name or id attribute)
				*
				* @access public
				* @param options OBJECT - list of cookie options to specify
				* @return jQuery
				*/
				cookify: function( options )
				{
					return this.each( function()
					{
						var i, nameAttrs = ['name', 'id'], name, $this = $( this ), value;

						for( i in nameAttrs )
						{
							if( ! isNaN( i ) )
							{
								name = $this.attr( nameAttrs[ i ] );
								if( typeof name === 'string' && name !== '' )
								{
									if( $this.is( ':checkbox, :radio' ) )
									{
										if( $this.attr( 'checked' ) )
										{
											value = $this.val();
										}
									}
									else if( $this.is( ':input' ) )
									{
										value = $this.val();
									}
									else
									{
										value = $this.html();
									}

									if( typeof value !== 'string' || value === '' )
									{
										value = null;
									}

									$.cookies.set( name, value, options );

									break;
								}
							}
						}
					} );
				},
				/**
				* $( 'selector' ).cookieFill - set the value of an input field or the innerHTML of an element from a cookie by the name or id of the field or element
				*
				* @access public
				* @return jQuery
				*/
				cookieFill: function()
				{
					return this.each( function()
					{
						var n, getN, nameAttrs = ['name', 'id'], name, $this = $( this ), value;

						getN = function()
						{
							n = nameAttrs.pop();
							return !! n;
						};

						while( getN() )
						{
							name = $this.attr( n );
							if( typeof name === 'string' && name !== '' )
							{
								value = $.cookies.get( name );
								if( value !== null )
								{
									if( $this.is( ':checkbox, :radio' ) )
									{
										if( $this.val() === value )
										{
											$this.attr( 'checked', 'checked' );
										}
										else
										{
											$this.removeAttr( 'checked' );
										}
									}
									else if( $this.is( ':input' ) )
									{
										$this.val( value );
									}
									else
									{
										$this.html( value );
									}
								}
								
								break;
							}
						}
					} );
				},
				/**
				* $( 'selector' ).cookieBind - call cookie fill on matching elements, and bind their change events to cookify()
				*
				* @access public
				* @param options OBJECT - list of cookie options to specify
				* @return jQuery
				*/
				cookieBind: function( options )
				{
					return this.each( function()
					{
						var $this = $( this );
						$this.cookieFill().change( function()
						{
							$this.cookify( options );
						} );
					} );
				}
			};

			$.each( extensions, function( i )
			{
				$.fn[i] = this;
			} );

		} )( window.jQuery );
	}
} )();/**
 * jQuery JSON Plugin
 * version: 2.3 (2011-09-17)
 *
 * This document is licensed as free software under the terms of the
 * MIT License: http://www.opensource.org/licenses/mit-license.php
 *
 * Brantley Harris wrote this plugin. It is based somewhat on the JSON.org
 * website's http://www.json.org/json2.js, which proclaims:
 * "NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.", a sentiment that
 * I uphold.
 *
 * It is also influenced heavily by MochiKit's serializeJSON, which is
 * copyrighted 2005 by Bob Ippolito.
 */

(function( $ ) {

	var	escapeable = /["\\\x00-\x1f\x7f-\x9f]/g,
		meta = {
			'\b': '\\b',
			'\t': '\\t',
			'\n': '\\n',
			'\f': '\\f',
			'\r': '\\r',
			'"' : '\\"',
			'\\': '\\\\'
		};

	/**
	 * jQuery.toJSON
	 * Converts the given argument into a JSON respresentation.
	 *
	 * @param o {Mixed} The json-serializble *thing* to be converted
	 *
	 * If an object has a toJSON prototype, that will be used to get the representation.
	 * Non-integer/string keys are skipped in the object, as are keys that point to a
	 * function.
	 *
	 */
	$.toJSON = typeof JSON === 'object' && JSON.stringify
		? JSON.stringify
		: function( o ) {

		if ( o === null ) {
			return 'null';
		}

		var type = typeof o;

		if ( type === 'undefined' ) {
			return undefined;
		}
		if ( type === 'number' || type === 'boolean' ) {
			return '' + o;
		}
		if ( type === 'string') {
			return $.quoteString( o );
		}
		if ( type === 'object' ) {
			if ( typeof o.toJSON === 'function' ) {
				return $.toJSON( o.toJSON() );
			}
			if ( o.constructor === Date ) {
				var	month = o.getUTCMonth() + 1,
					day = o.getUTCDate(),
					year = o.getUTCFullYear(),
					hours = o.getUTCHours(),
					minutes = o.getUTCMinutes(),
					seconds = o.getUTCSeconds(),
					milli = o.getUTCMilliseconds();

				if ( month < 10 ) {
					month = '0' + month;
				}
				if ( day < 10 ) {
					day = '0' + day;
				}
				if ( hours < 10 ) {
					hours = '0' + hours;
				}
				if ( minutes < 10 ) {
					minutes = '0' + minutes;
				}
				if ( seconds < 10 ) {
					seconds = '0' + seconds;
				}
				if ( milli < 100 ) {
					milli = '0' + milli;
				}
				if ( milli < 10 ) {
					milli = '0' + milli;
				}
				return '"' + year + '-' + month + '-' + day + 'T' +
					hours + ':' + minutes + ':' + seconds +
					'.' + milli + 'Z"';
			}
			if ( o.constructor === Array ) {
				var ret = [];
				for ( var i = 0; i < o.length; i++ ) {
					ret.push( $.toJSON( o[i] ) || 'null' );
				}
				return '[' + ret.join(',') + ']';
			}
			var	name,
				val,
				pairs = [];
			for ( var k in o ) {
				type = typeof k;
				if ( type === 'number' ) {
					name = '"' + k + '"';
				} else if (type === 'string') {
					name = $.quoteString(k);
				} else {
					// Keys must be numerical or string. Skip others
					continue;
				}
				type = typeof o[k];

				if ( type === 'function' || type === 'undefined' ) {
					// Invalid values like these return undefined
					// from toJSON, however those object members
					// shouldn't be included in the JSON string at all.
					continue;
				}
				val = $.toJSON( o[k] );
				pairs.push( name + ':' + val );
			}
			return '{' + pairs.join( ',' ) + '}';
		}
	};

	/**
	 * jQuery.evalJSON
	 * Evaluates a given piece of json source.
	 *
	 * @param src {String}
	 */
	$.evalJSON = typeof JSON === 'object' && JSON.parse
		? JSON.parse
		: function( src ) {
		return eval('(' + src + ')');
	};

	/**
	 * jQuery.secureEvalJSON
	 * Evals JSON in a way that is *more* secure.
	 *
	 * @param src {String}
	 */
	$.secureEvalJSON = typeof JSON === 'object' && JSON.parse
		? JSON.parse
		: function( src ) {

		var filtered = 
			src
			.replace( /\\["\\\/bfnrtu]/g, '@' )
			.replace( /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
			.replace( /(?:^|:|,)(?:\s*\[)+/g, '');

		if ( /^[\],:{}\s]*$/.test( filtered ) ) {
			return eval( '(' + src + ')' );
		} else {
			throw new SyntaxError( 'Error parsing JSON, source is not valid.' );
		}
	};

	/**
	 * jQuery.quoteString
	 * Returns a string-repr of a string, escaping quotes intelligently.
	 * Mostly a support function for toJSON.
	 * Examples:
	 * >>> jQuery.quoteString('apple')
	 * "apple"
	 *
	 * >>> jQuery.quoteString('"Where are we going?", she asked.')
	 * "\"Where are we going?\", she asked."
	 */
	$.quoteString = function( string ) {
		if ( string.match( escapeable ) ) {
			return '"' + string.replace( escapeable, function( a ) {
				var c = meta[a];
				if ( typeof c === 'string' ) {
					return c;
				}
				c = a.charCodeAt();
				return '\\u00' + Math.floor(c / 16).toString(16) + (c % 16).toString(16);
			}) + '"';
		}
		return '"' + string + '"';
	};

})( jQuery );
// jQuery no-double-tap-zoom plugin

// Triple-licensed: Public Domain, MIT and WTFPL license - share and enjoy!

(function($) {
  var IS_IOS = /iphone|ipad/i.test(navigator.userAgent);
  $.fn.nodoubletapzoom = function(active) {
    if (IS_IOS) {
        if (active) {
            $(this).bind('touchstart', function preventZoom(e) {
                var t2 = e.timeStamp
                  , t1 = $(this).data('lastTouch') || t2
                  , dt = t2 - t1
                  , fingers = e.originalEvent.touches.length;
                $(this).data('lastTouch', t2);
                if (!dt || dt > 500 || fingers > 1) return; // not double-tap

                e.preventDefault(); // double tap - prevent the zoom
                // also synthesize click events we just swallowed up
                $(this).trigger('click').trigger('click');
              });
            
        } else {
            $(this).unbind('touchstart');
        }
    }
  };
})(jQuery);/**
 * YAML Tabs - jQuery plugin for accessible, unobtrusive tabs
 * Build to seemlessly work with the CCS-Framework YAML (yaml.de) not depending on YAML though
 * @requires jQuery v1.0.3
 *
 * http://blog.ginader.de/dev/yamltabs/index.php
 *
 * Copyright (c) 2007 Dirk Ginader (ginader.de)
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 *
 * Version: 1.1.1
 * 
 * History:
 * * 1.0 initial release
 * * 1.1 added a lot of Accessibility enhancements
 * * * rewrite to use "fn.extend" structure
 * * * added check for existing ids on the content containers to use to proper anchors in the tabs
 * * 1.1.1 changed the headline markup. thanks to Mike Davies for the hint.
 * * 1.5 thanks to Dirk Jesse, Ansgar Hein, David Maciejewski and Mike West for their input for this release
 * * * new option syncheights that syncs the heights of the tab contents when the SyncHeight plugin is available http://blog.ginader.de/dev/jquery/syncheight/index.php
 * * * fixed the hardcoded current class
 * * * new option tabsListClass to be applied to the generated list of tabs above the content so lists inside the tabscontent can be styled differently
 * * * added clearfix and tabcounter that adds a class in the schema "tabamount{number amount of tabs}" to the ul containg the tabs so one can style the tabs to fit 100% into the width
 */
/*global jQuery, window */
/*jslint browser: true, undef: true, eqeqeq: true, plusplus: true, bitwise: true, regexp: true, newcap: true, immed: true */
(function($) {
    
    $.fn.extend({
        getUniqueId: function(p){
            return p + new Date().getTime();
        },
        accessibleTabs: function(config) {
            var defaults = {
                wrapperClass: 'content', // Classname to apply to the div that is wrapped around the original Markup
                currentClass: 'current', // Classname to apply to the LI of the selected Tab
                tabhead: 'h4', // Tag or valid Query Selector of the Elements to Transform the Tabs-Navigation from (originals are removed)
                tabbody: '.tabbody', // Tag or valid Query Selector of the Elements to be treated as the Tab Body
                fxout:'hide', // can be "fadeOut", "slideUp", "hide"
                fxin:'show', // can be "fadeIn", "slideDown", "show"
                fxparallel:false, // should `fxin` and `fxout` execute at the same time?
                fxspeed: 'normal', // speed (String|Number): "slow", "normal", or "fast") or the number of milliseconds to run the animation
                currentInfoText: 'current tab: ', // text to indicate for screenreaders which tab is the current one
                currentInfoPosition: 'prepend', // Definition where to insert the Info Text. Can be either "prepend" or "append"
                currentInfoClass: 'current-info', // Class to apply to the span wrapping the CurrentInfoText
                tabsListClass:'tabs-list', // Class to apply to the generated list of tabs above the content
                syncheights:false // syncs the heights of the tabs when the SyncHeight plugin is available http://blog.ginader.de/dev/jquery/syncheight/index.php
            };
            var options = $.extend(defaults, config);
            var o = this;
            return this.each(function() {
                var el = $(this);
                var list = '';
                var tabCount = 0;

                var contentAnchor = o.getUniqueId('accessibletabscontent');
                var tabsAnchor = o.getUniqueId('accessibletabs');
                el.wrapInner('<div class="'+options.wrapperClass+'"></div>');

                el.find(options.tabhead).each(function(i){
                    var id = '';
                    if(i === 0){
                        id =' id="'+tabsAnchor+'"';
                    }
                    list += '<li><a'+id+' href="#'+contentAnchor+'">'+$(this).text()+'</a></li>';
                    $(this).remove();
                    tabCount += 1;
                });

                el.prepend('<ul class="clearfix '+options.tabsListClass+' tabamount'+tabCount+'">'+list+'</ul>');
                el.find('>.'+options.wrapperClass+'>'+options.tabbody).hide();
                el.find(options.tabbody + '.' + options.currentClass + ', ' + options.tabbody+':first').first().addClass( options.currentClass ).show().before('<'+options.tabhead+'><a tabindex="0" class="accessibletabsanchor" name="'+contentAnchor+'" id="'+contentAnchor+'">'+el.find("ul>li:first").text()+'</a></'+options.tabhead+'>');
                el.find("ul>li." + options.currentClass + ", ul>li:first").first().addClass( options.currentClass )
                .find('a')[options.currentInfoPosition]('<span class="'+options.currentInfoClass+'">'+options.currentInfoText+'</span>');

                if (options.syncheights && $.fn.syncHeight) {
                    el.find(options.tabbody).syncHeight();
                    $(window).resize(function(){ 
                        el.find(options.tabbody).syncHeight();
                    });
                }

                el.find('>ul.'+options.tabsListClass+'>li>a').each(function(i){
                    $(this).click(function(event){
                        event.preventDefault();
                        var currentTab      = el.find(options.tabbody+':visible'),
                            newTab          = el.find(options.tabbody).eq(i),
                            clickedHeader   = $( this );
                                                                            
                        el.trigger('beforeActivate', { current: currentTab, toActivate: newTab, header: clickedHeader } );
                        var tab = $( this );
                        el.find('>ul>li.'+options.currentClass).removeClass(options.currentClass)
                        .find("span."+options.currentInfoClass).remove();
                        tab.blur();
                        if ( options.fxparallel ) {
                            el.find(options.tabbody+':visible')[options.fxout](
                                options.fxspeed,
                                function () {
                                    $( this ).removeClass( options.currentClass );
                                }
                            );
                            el.find(options.tabbody).eq(i)[options.fxin](
                                options.fxspeed,
                                function () {
                                    $( this ).addClass( options.currentClass );
                                    el.trigger('afterActivate', { current: newTab, previous: currentTab, header: clickedHeader } );
                                }
                            ); 
                        } else {
                            el.find(options.tabbody+':visible')[options.fxout](
                                options.fxspeed,
                                function () {
                                    $( this ).removeClass( options.currentClass );
                                    el.find(options.tabbody).eq(i)[options.fxin](
                                        options.fxspeed,
                                        function () {
                                            $( this ).addClass( options.currentClass );
                                            el.trigger('afterActivate', { current: newTab, previous: currentTab, header: clickedHeader } );
                                        }
                                    );
                                }
                            );
                        }
                        $( '#'+contentAnchor ).text( $(this).text() ).focus();
                        tab[options.currentInfoPosition]('<span class="'+options.currentInfoClass+'">'+options.currentInfoText+'</span>')
                        .parent().addClass(options.currentClass);
                        
                    });
                });
            });
        }
    });
}(jQuery) );
/*
 * jQuery UI Datepicker 1.8.14
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Datepicker
 *
 * Depends:
 *	jquery.ui.core.js
 */
(function( $, undefined ) {

$.extend($.ui, { datepicker: { version: "1.8.14" } });

var PROP_NAME = 'datepicker';
var dpuuid = new Date().getTime();
var instActive;

/* Date picker manager.
   Use the singleton instance of this class, $.datepicker, to interact with the date picker.
   Settings for (groups of) date pickers are maintained in an instance object,
   allowing multiple different settings on the same page. */

function Datepicker() {
	this.debug = false; // Change this to true to start debugging
	this._curInst = null; // The current instance in use
	this._keyEvent = false; // If the last event was a key event
	this._disabledInputs = []; // List of date picker inputs that have been disabled
	this._datepickerShowing = false; // True if the popup picker is showing , false if not
	this._inDialog = false; // True if showing within a "dialog", false if not
	this._mainDivId = 'ui-datepicker-div'; // The ID of the main datepicker division
	this._inlineClass = 'ui-datepicker-inline'; // The name of the inline marker class
	this._appendClass = 'ui-datepicker-append'; // The name of the append marker class
	this._triggerClass = 'ui-datepicker-trigger'; // The name of the trigger marker class
	this._dialogClass = 'ui-datepicker-dialog'; // The name of the dialog marker class
	this._disableClass = 'ui-datepicker-disabled'; // The name of the disabled covering marker class
	this._unselectableClass = 'ui-datepicker-unselectable'; // The name of the unselectable cell marker class
	this._currentClass = 'ui-datepicker-current-day'; // The name of the current day marker class
	this._dayOverClass = 'ui-datepicker-days-cell-over'; // The name of the day hover marker class
	this.regional = []; // Available regional settings, indexed by language code
	this.regional[''] = { // Default regional settings
		closeText: 'Done', // Display text for close link
		prevText: 'Prev', // Display text for previous month link
		nextText: 'Next', // Display text for next month link
		currentText: 'Today', // Display text for current month link
		monthNames: ['January','February','March','April','May','June',
			'July','August','September','October','November','December'], // Names of months for drop-down and formatting
		monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], // For formatting
		dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'], // For formatting
		dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'], // For formatting
		dayNamesMin: ['Su','Mo','Tu','We','Th','Fr','Sa'], // Column headings for days starting at Sunday
		weekHeader: 'Wk', // Column header for week of the year
		dateFormat: 'mm/dd/yy', // See format options on parseDate
		firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
		isRTL: false, // True if right-to-left language, false if left-to-right
		showMonthAfterYear: false, // True if the year select precedes month, false for month then year
		yearSuffix: '' // Additional text to append to the year in the month headers
	};
	this._defaults = { // Global defaults for all the date picker instances
		showOn: 'focus', // 'focus' for popup on focus,
			// 'button' for trigger button, or 'both' for either
		showAnim: 'fadeIn', // Name of jQuery animation for popup
		showOptions: {}, // Options for enhanced animations
		defaultDate: null, // Used when field is blank: actual date,
			// +/-number for offset from today, null for today
		appendText: '', // Display text following the input box, e.g. showing the format
		buttonText: '...', // Text for trigger button
		buttonImage: '', // URL for trigger button image
		buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
		hideIfNoPrevNext: false, // True to hide next/previous month links
			// if not applicable, false to just disable them
		navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
		gotoCurrent: false, // True if today link goes back to current selection instead
		changeMonth: false, // True if month can be selected directly, false if only prev/next
		changeYear: false, // True if year can be selected directly, false if only prev/next
		yearRange: 'c-10:c+10', // Range of years to display in drop-down,
			// either relative to today's year (-nn:+nn), relative to currently displayed year
			// (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
		showOtherMonths: false, // True to show dates in other months, false to leave blank
		selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
		showWeek: false, // True to show week of the year, false to not show it
		calculateWeek: this.iso8601Week, // How to calculate the week of the year,
			// takes a Date and returns the number of the week for it
		shortYearCutoff: '+10', // Short year values < this are in the current century,
			// > this are in the previous century,
			// string value starting with '+' for current year + value
		minDate: null, // The earliest selectable date, or null for no limit
		maxDate: null, // The latest selectable date, or null for no limit
		duration: 'fast', // Duration of display/closure
		beforeShowDay: null, // Function that takes a date and returns an array with
			// [0] = true if selectable, false if not, [1] = custom CSS class name(s) or '',
			// [2] = cell title (optional), e.g. $.datepicker.noWeekends
		beforeShow: null, // Function that takes an input field and
			// returns a set of custom settings for the date picker
		onSelect: null, // Define a callback function when a date is selected
		onChangeMonthYear: null, // Define a callback function when the month or year is changed
		onClose: null, // Define a callback function when the datepicker is closed
		numberOfMonths: 1, // Number of months to show at a time
		showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
		stepMonths: 1, // Number of months to step back/forward
		stepBigMonths: 12, // Number of months to step back/forward for the big links
		altField: '', // Selector for an alternate field to store selected dates into
		altFormat: '', // The date format to use for the alternate field
		constrainInput: true, // The input is constrained by the current date format
		showButtonPanel: false, // True to show button panel, false to not show it
		autoSize: false // True to size the input for the date format, false to leave as is
	};
	$.extend(this._defaults, this.regional['']);
	this.dpDiv = bindHover($('<div id="' + this._mainDivId + '" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>'));
}

$.extend(Datepicker.prototype, {
	/* Class name added to elements to indicate already configured with a date picker. */
	markerClassName: 'hasDatepicker',
	
	//Keep track of the maximum number of rows displayed (see #7043)
	maxRows: 4,

	/* Debug logging (if enabled). */
	log: function () {
		if (this.debug)
			console.log.apply('', arguments);
	},
	
	// TODO rename to "widget" when switching to widget factory
	_widgetDatepicker: function() {
		return this.dpDiv;
	},

	/* Override the default settings for all instances of the date picker.
	   @param  settings  object - the new settings to use as defaults (anonymous object)
	   @return the manager object */
	setDefaults: function(settings) {
		extendRemove(this._defaults, settings || {});
		return this;
	},

	/* Attach the date picker to a jQuery selection.
	   @param  target    element - the target input field or division or span
	   @param  settings  object - the new settings to use for this date picker instance (anonymous) */
	_attachDatepicker: function(target, settings) {
		// check for settings on the control itself - in namespace 'date:'
		var inlineSettings = null;
		for (var attrName in this._defaults) {
			var attrValue = target.getAttribute('date:' + attrName);
			if (attrValue) {
				inlineSettings = inlineSettings || {};
				try {
					inlineSettings[attrName] = eval(attrValue);
				} catch (err) {
					inlineSettings[attrName] = attrValue;
				}
			}
		}
		var nodeName = target.nodeName.toLowerCase();
		var inline = (nodeName == 'div' || nodeName == 'span');
		if (!target.id) {
			this.uuid += 1;
			target.id = 'dp' + this.uuid;
		}
		var inst = this._newInst($(target), inline);
		inst.settings = $.extend({}, settings || {}, inlineSettings || {});
		if (nodeName == 'input') {
			this._connectDatepicker(target, inst);
		} else if (inline) {
			this._inlineDatepicker(target, inst);
		}
	},

	/* Create a new instance object. */
	_newInst: function(target, inline) {
		var id = target[0].id.replace(/([^A-Za-z0-9_-])/g, '\\\\$1'); // escape jQuery meta chars
		return {id: id, input: target, // associated target
			selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
			drawMonth: 0, drawYear: 0, // month being drawn
			inline: inline, // is datepicker inline or not
			dpDiv: (!inline ? this.dpDiv : // presentation div
			bindHover($('<div class="' + this._inlineClass + ' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>')))};
	},

	/* Attach the date picker to an input field. */
	_connectDatepicker: function(target, inst) {
		var input = $(target);
		inst.append = $([]);
		inst.trigger = $([]);
		if (input.hasClass(this.markerClassName))
			return;
		this._attachments(input, inst);
		input.addClass(this.markerClassName).keydown(this._doKeyDown).
			keypress(this._doKeyPress).keyup(this._doKeyUp).
			bind("setData.datepicker", function(event, key, value) {
				inst.settings[key] = value;
			}).bind("getData.datepicker", function(event, key) {
				return this._get(inst, key);
			});
		this._autoSize(inst);
		$.data(target, PROP_NAME, inst);
	},

	/* Make attachments based on settings. */
	_attachments: function(input, inst) {
		var appendText = this._get(inst, 'appendText');
		var isRTL = this._get(inst, 'isRTL');
		if (inst.append)
			inst.append.remove();
		if (appendText) {
			inst.append = $('<span class="' + this._appendClass + '">' + appendText + '</span>');
			input[isRTL ? 'before' : 'after'](inst.append);
		}
		input.unbind('focus', this._showDatepicker);
		if (inst.trigger)
			inst.trigger.remove();
		var showOn = this._get(inst, 'showOn');
		if (showOn == 'focus' || showOn == 'both') // pop-up date picker when in the marked field
			input.focus(this._showDatepicker);
		if (showOn == 'button' || showOn == 'both') { // pop-up date picker when button clicked
			var buttonText = this._get(inst, 'buttonText');
			var buttonImage = this._get(inst, 'buttonImage');
			inst.trigger = $(this._get(inst, 'buttonImageOnly') ?
				$('<img/>').addClass(this._triggerClass).
					attr({ src: buttonImage, alt: buttonText, title: buttonText }) :
				$('<button type="button"></button>').addClass(this._triggerClass).
					html(buttonImage == '' ? buttonText : $('<img/>').attr(
					{ src:buttonImage, alt:buttonText, title:buttonText })));
			input[isRTL ? 'before' : 'after'](inst.trigger);
			inst.trigger.click(function() {
				if ($.datepicker._datepickerShowing && $.datepicker._lastInput == input[0])
					$.datepicker._hideDatepicker();
				else
					$.datepicker._showDatepicker(input[0]);
				return false;
			});
		}
	},

	/* Apply the maximum length for the date format. */
	_autoSize: function(inst) {
		if (this._get(inst, 'autoSize') && !inst.inline) {
			var date = new Date(2009, 12 - 1, 20); // Ensure double digits
			var dateFormat = this._get(inst, 'dateFormat');
			if (dateFormat.match(/[DM]/)) {
				var findMax = function(names) {
					var max = 0;
					var maxI = 0;
					for (var i = 0; i < names.length; i++) {
						if (names[i].length > max) {
							max = names[i].length;
							maxI = i;
						}
					}
					return maxI;
				};
				date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ?
					'monthNames' : 'monthNamesShort'))));
				date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ?
					'dayNames' : 'dayNamesShort'))) + 20 - date.getDay());
			}
			inst.input.attr('size', this._formatDate(inst, date).length);
		}
	},

	/* Attach an inline date picker to a div. */
	_inlineDatepicker: function(target, inst) {
		var divSpan = $(target);
		if (divSpan.hasClass(this.markerClassName))
			return;
		divSpan.addClass(this.markerClassName).append(inst.dpDiv).
			bind("setData.datepicker", function(event, key, value){
				inst.settings[key] = value;
			}).bind("getData.datepicker", function(event, key){
				return this._get(inst, key);
			});
		$.data(target, PROP_NAME, inst);
		this._setDate(inst, this._getDefaultDate(inst), true);
		this._updateDatepicker(inst);
		this._updateAlternate(inst);
		inst.dpDiv.show();
	},

	/* Pop-up the date picker in a "dialog" box.
	   @param  input     element - ignored
	   @param  date      string or Date - the initial date to display
	   @param  onSelect  function - the function to call when a date is selected
	   @param  settings  object - update the dialog date picker instance's settings (anonymous object)
	   @param  pos       int[2] - coordinates for the dialog's position within the screen or
	                     event - with x/y coordinates or
	                     leave empty for default (screen centre)
	   @return the manager object */
	_dialogDatepicker: function(input, date, onSelect, settings, pos) {
		var inst = this._dialogInst; // internal instance
		if (!inst) {
			this.uuid += 1;
			var id = 'dp' + this.uuid;
			this._dialogInput = $('<input type="text" id="' + id +
				'" style="position: absolute; top: -100px; width: 0px; z-index: -10;"/>');
			this._dialogInput.keydown(this._doKeyDown);
			$('body').append(this._dialogInput);
			inst = this._dialogInst = this._newInst(this._dialogInput, false);
			inst.settings = {};
			$.data(this._dialogInput[0], PROP_NAME, inst);
		}
		extendRemove(inst.settings, settings || {});
		date = (date && date.constructor == Date ? this._formatDate(inst, date) : date);
		this._dialogInput.val(date);

		this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
		if (!this._pos) {
			var browserWidth = document.documentElement.clientWidth;
			var browserHeight = document.documentElement.clientHeight;
			var scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
			var scrollY = document.documentElement.scrollTop || document.body.scrollTop;
			this._pos = // should use actual width/height below
				[(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];
		}

		// move input on screen for focus, but hidden behind dialog
		this._dialogInput.css('left', (this._pos[0] + 20) + 'px').css('top', this._pos[1] + 'px');
		inst.settings.onSelect = onSelect;
		this._inDialog = true;
		this.dpDiv.addClass(this._dialogClass);
		this._showDatepicker(this._dialogInput[0]);
		if ($.blockUI)
			$.blockUI(this.dpDiv);
		$.data(this._dialogInput[0], PROP_NAME, inst);
		return this;
	},

	/* Detach a datepicker from its control.
	   @param  target    element - the target input field or division or span */
	_destroyDatepicker: function(target) {
		var $target = $(target);
		var inst = $.data(target, PROP_NAME);
		if (!$target.hasClass(this.markerClassName)) {
			return;
		}
		var nodeName = target.nodeName.toLowerCase();
		$.removeData(target, PROP_NAME);
		if (nodeName == 'input') {
			inst.append.remove();
			inst.trigger.remove();
			$target.removeClass(this.markerClassName).
				unbind('focus', this._showDatepicker).
				unbind('keydown', this._doKeyDown).
				unbind('keypress', this._doKeyPress).
				unbind('keyup', this._doKeyUp);
		} else if (nodeName == 'div' || nodeName == 'span')
			$target.removeClass(this.markerClassName).empty();
	},

	/* Enable the date picker to a jQuery selection.
	   @param  target    element - the target input field or division or span */
	_enableDatepicker: function(target) {
		var $target = $(target);
		var inst = $.data(target, PROP_NAME);
		if (!$target.hasClass(this.markerClassName)) {
			return;
		}
		var nodeName = target.nodeName.toLowerCase();
		if (nodeName == 'input') {
			target.disabled = false;
			inst.trigger.filter('button').
				each(function() { this.disabled = false; }).end().
				filter('img').css({opacity: '1.0', cursor: ''});
		}
		else if (nodeName == 'div' || nodeName == 'span') {
			var inline = $target.children('.' + this._inlineClass);
			inline.children().removeClass('ui-state-disabled');
			inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
				removeAttr("disabled");
		}
		this._disabledInputs = $.map(this._disabledInputs,
			function(value) { return (value == target ? null : value); }); // delete entry
	},

	/* Disable the date picker to a jQuery selection.
	   @param  target    element - the target input field or division or span */
	_disableDatepicker: function(target) {
		var $target = $(target);
		var inst = $.data(target, PROP_NAME);
		if (!$target.hasClass(this.markerClassName)) {
			return;
		}
		var nodeName = target.nodeName.toLowerCase();
		if (nodeName == 'input') {
			target.disabled = true;
			inst.trigger.filter('button').
				each(function() { this.disabled = true; }).end().
				filter('img').css({opacity: '0.5', cursor: 'default'});
		}
		else if (nodeName == 'div' || nodeName == 'span') {
			var inline = $target.children('.' + this._inlineClass);
			inline.children().addClass('ui-state-disabled');
			inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
				attr("disabled", "disabled");
		}
		this._disabledInputs = $.map(this._disabledInputs,
			function(value) { return (value == target ? null : value); }); // delete entry
		this._disabledInputs[this._disabledInputs.length] = target;
	},

	/* Is the first field in a jQuery collection disabled as a datepicker?
	   @param  target    element - the target input field or division or span
	   @return boolean - true if disabled, false if enabled */
	_isDisabledDatepicker: function(target) {
		if (!target) {
			return false;
		}
		for (var i = 0; i < this._disabledInputs.length; i++) {
			if (this._disabledInputs[i] == target)
				return true;
		}
		return false;
	},

	/* Retrieve the instance data for the target control.
	   @param  target  element - the target input field or division or span
	   @return  object - the associated instance data
	   @throws  error if a jQuery problem getting data */
	_getInst: function(target) {
		try {
			return $.data(target, PROP_NAME);
		}
		catch (err) {
			throw 'Missing instance data for this datepicker';
		}
	},

	/* Update or retrieve the settings for a date picker attached to an input field or division.
	   @param  target  element - the target input field or division or span
	   @param  name    object - the new settings to update or
	                   string - the name of the setting to change or retrieve,
	                   when retrieving also 'all' for all instance settings or
	                   'defaults' for all global defaults
	   @param  value   any - the new value for the setting
	                   (omit if above is an object or to retrieve a value) */
	_optionDatepicker: function(target, name, value) {
		var inst = this._getInst(target);
		if (arguments.length == 2 && typeof name == 'string') {
			return (name == 'defaults' ? $.extend({}, $.datepicker._defaults) :
				(inst ? (name == 'all' ? $.extend({}, inst.settings) :
				this._get(inst, name)) : null));
		}
		var settings = name || {};
		if (typeof name == 'string') {
			settings = {};
			settings[name] = value;
		}
		if (inst) {
			if (this._curInst == inst) {
				this._hideDatepicker();
			}
			var date = this._getDateDatepicker(target, true);
			var minDate = this._getMinMaxDate(inst, 'min');
			var maxDate = this._getMinMaxDate(inst, 'max');
			extendRemove(inst.settings, settings);
			// reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
			if (minDate !== null && settings['dateFormat'] !== undefined && settings['minDate'] === undefined)
				inst.settings.minDate = this._formatDate(inst, minDate);
			if (maxDate !== null && settings['dateFormat'] !== undefined && settings['maxDate'] === undefined)
				inst.settings.maxDate = this._formatDate(inst, maxDate);
			this._attachments($(target), inst);
			this._autoSize(inst);
			this._setDate(inst, date);
			this._updateAlternate(inst);
			this._updateDatepicker(inst);
		}
	},

	// change method deprecated
	_changeDatepicker: function(target, name, value) {
		this._optionDatepicker(target, name, value);
	},

	/* Redraw the date picker attached to an input field or division.
	   @param  target  element - the target input field or division or span */
	_refreshDatepicker: function(target) {
		var inst = this._getInst(target);
		if (inst) {
			this._updateDatepicker(inst);
		}
	},

	/* Set the dates for a jQuery selection.
	   @param  target   element - the target input field or division or span
	   @param  date     Date - the new date */
	_setDateDatepicker: function(target, date) {
		var inst = this._getInst(target);
		if (inst) {
			this._setDate(inst, date);
			this._updateDatepicker(inst);
			this._updateAlternate(inst);
		}
	},

	/* Get the date(s) for the first entry in a jQuery selection.
	   @param  target     element - the target input field or division or span
	   @param  noDefault  boolean - true if no default date is to be used
	   @return Date - the current date */
	_getDateDatepicker: function(target, noDefault) {
		var inst = this._getInst(target);
		if (inst && !inst.inline)
			this._setDateFromField(inst, noDefault);
		return (inst ? this._getDate(inst) : null);
	},

	/* Handle keystrokes. */
	_doKeyDown: function(event) {
		var inst = $.datepicker._getInst(event.target);
		var handled = true;
		var isRTL = inst.dpDiv.is('.ui-datepicker-rtl');
		inst._keyEvent = true;
		if ($.datepicker._datepickerShowing)
			switch (event.keyCode) {
				case 9: $.datepicker._hideDatepicker();
						handled = false;
						break; // hide on tab out
				case 13: var sel = $('td.' + $.datepicker._dayOverClass + ':not(.' + 
									$.datepicker._currentClass + ')', inst.dpDiv);
						if (sel[0])
							$.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
						else
							$.datepicker._hideDatepicker();
						return false; // don't submit the form
						break; // select the value on enter
				case 27: $.datepicker._hideDatepicker();
						break; // hide on escape
				case 33: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
							-$.datepicker._get(inst, 'stepBigMonths') :
							-$.datepicker._get(inst, 'stepMonths')), 'M');
						break; // previous month/year on page up/+ ctrl
				case 34: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
							+$.datepicker._get(inst, 'stepBigMonths') :
							+$.datepicker._get(inst, 'stepMonths')), 'M');
						break; // next month/year on page down/+ ctrl
				case 35: if (event.ctrlKey || event.metaKey) $.datepicker._clearDate(event.target);
						handled = event.ctrlKey || event.metaKey;
						break; // clear on ctrl or command +end
				case 36: if (event.ctrlKey || event.metaKey) $.datepicker._gotoToday(event.target);
						handled = event.ctrlKey || event.metaKey;
						break; // current on ctrl or command +home
				case 37: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), 'D');
						handled = event.ctrlKey || event.metaKey;
						// -1 day on ctrl or command +left
						if (event.originalEvent.altKey) $.datepicker._adjustDate(event.target, (event.ctrlKey ?
									-$.datepicker._get(inst, 'stepBigMonths') :
									-$.datepicker._get(inst, 'stepMonths')), 'M');
						// next month/year on alt +left on Mac
						break;
				case 38: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, -7, 'D');
						handled = event.ctrlKey || event.metaKey;
						break; // -1 week on ctrl or command +up
				case 39: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), 'D');
						handled = event.ctrlKey || event.metaKey;
						// +1 day on ctrl or command +right
						if (event.originalEvent.altKey) $.datepicker._adjustDate(event.target, (event.ctrlKey ?
									+$.datepicker._get(inst, 'stepBigMonths') :
									+$.datepicker._get(inst, 'stepMonths')), 'M');
						// next month/year on alt +right
						break;
				case 40: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, +7, 'D');
						handled = event.ctrlKey || event.metaKey;
						break; // +1 week on ctrl or command +down
				default: handled = false;
			}
		else if (event.keyCode == 36 && event.ctrlKey) // display the date picker on ctrl+home
			$.datepicker._showDatepicker(this);
		else {
			handled = false;
		}
		if (handled) {
			event.preventDefault();
			event.stopPropagation();
		}
	},

	/* Filter entered characters - based on date format. */
	_doKeyPress: function(event) {
		var inst = $.datepicker._getInst(event.target);
		if ($.datepicker._get(inst, 'constrainInput')) {
			var chars = $.datepicker._possibleChars($.datepicker._get(inst, 'dateFormat'));
			var chr = String.fromCharCode(event.charCode == undefined ? event.keyCode : event.charCode);
			return event.ctrlKey || event.metaKey || (chr < ' ' || !chars || chars.indexOf(chr) > -1);
		}
	},

	/* Synchronise manual entry and field/alternate field. */
	_doKeyUp: function(event) {
		var inst = $.datepicker._getInst(event.target);
		if (inst.input.val() != inst.lastVal) {
			try {
				var date = $.datepicker.parseDate($.datepicker._get(inst, 'dateFormat'),
					(inst.input ? inst.input.val() : null),
					$.datepicker._getFormatConfig(inst));
				if (date) { // only if valid
					$.datepicker._setDateFromField(inst);
					$.datepicker._updateAlternate(inst);
					$.datepicker._updateDatepicker(inst);
				}
			}
			catch (event) {
				$.datepicker.log(event);
			}
		}
		return true;
	},

	/* Pop-up the date picker for a given input field.
	   @param  input  element - the input field attached to the date picker or
	                  event - if triggered by focus */
	_showDatepicker: function(input) {
		input = input.target || input;
		if (input.nodeName.toLowerCase() != 'input') // find from button/image trigger
			input = $('input', input.parentNode)[0];
		if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput == input) // already here
			return;
		var inst = $.datepicker._getInst(input);
		if ($.datepicker._curInst && $.datepicker._curInst != inst) {
			if ( $.datepicker._datepickerShowing ) {
				$.datepicker._triggerOnClose($.datepicker._curInst);
			}
			$.datepicker._curInst.dpDiv.stop(true, true);
		}
		var beforeShow = $.datepicker._get(inst, 'beforeShow');
		extendRemove(inst.settings, (beforeShow ? beforeShow.apply(input, [input, inst]) : {}));
		inst.lastVal = null;
		$.datepicker._lastInput = input;
		$.datepicker._setDateFromField(inst);
		if ($.datepicker._inDialog) // hide cursor
			input.value = '';
		if (!$.datepicker._pos) { // position below input
			$.datepicker._pos = $.datepicker._findPos(input);
			$.datepicker._pos[1] += input.offsetHeight; // add the height
		}
		var isFixed = false;
		$(input).parents().each(function() {
			isFixed |= $(this).css('position') == 'fixed';
			return !isFixed;
		});
		if (isFixed && $.browser.opera) { // correction for Opera when fixed and scrolled
			$.datepicker._pos[0] -= document.documentElement.scrollLeft;
			$.datepicker._pos[1] -= document.documentElement.scrollTop;
		}
		var offset = {left: $.datepicker._pos[0], top: $.datepicker._pos[1]};
		$.datepicker._pos = null;
		//to avoid flashes on Firefox
		inst.dpDiv.empty();
		// determine sizing offscreen
		inst.dpDiv.css({position: 'absolute', display: 'block', top: '-1000px'});
		$.datepicker._updateDatepicker(inst);
		// fix width for dynamic number of date pickers
		// and adjust position before showing
		offset = $.datepicker._checkOffset(inst, offset, isFixed);
		inst.dpDiv.css({position: ($.datepicker._inDialog && $.blockUI ?
			'static' : (isFixed ? 'fixed' : 'absolute')), display: 'none',
			left: offset.left + 'px', top: offset.top + 'px'});
		if (!inst.inline) {
			var showAnim = $.datepicker._get(inst, 'showAnim');
			var duration = $.datepicker._get(inst, 'duration');
			var postProcess = function() {
				var cover = inst.dpDiv.find('iframe.ui-datepicker-cover'); // IE6- only
				if( !! cover.length ){
					var borders = $.datepicker._getBorders(inst.dpDiv);
					cover.css({left: -borders[0], top: -borders[1],
						width: inst.dpDiv.outerWidth(), height: inst.dpDiv.outerHeight()});
				}
			};
			inst.dpDiv.zIndex($(input).zIndex()+1);
			$.datepicker._datepickerShowing = true;
			if ($.effects && $.effects[showAnim])
				inst.dpDiv.show(showAnim, $.datepicker._get(inst, 'showOptions'), duration, postProcess);
			else
				inst.dpDiv[showAnim || 'show']((showAnim ? duration : null), postProcess);
			if (!showAnim || !duration)
				postProcess();
			if (inst.input.is(':visible') && !inst.input.is(':disabled'))
				inst.input.focus();
			$.datepicker._curInst = inst;
		}
	},

	/* Generate the date picker content. */
	_updateDatepicker: function(inst) {
		var self = this;
		self.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
		var borders = $.datepicker._getBorders(inst.dpDiv);
		instActive = inst; // for delegate hover events
		inst.dpDiv.empty().append(this._generateHTML(inst));
		var cover = inst.dpDiv.find('iframe.ui-datepicker-cover'); // IE6- only
		if( !!cover.length ){ //avoid call to outerXXXX() when not in IE6
			cover.css({left: -borders[0], top: -borders[1], width: inst.dpDiv.outerWidth(), height: inst.dpDiv.outerHeight()})
		}
		inst.dpDiv.find('.' + this._dayOverClass + ' a').mouseover();
		var numMonths = this._getNumberOfMonths(inst);
		var cols = numMonths[1];
		var width = 17;
		inst.dpDiv.removeClass('ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4').width('');
		if (cols > 1)
			inst.dpDiv.addClass('ui-datepicker-multi-' + cols).css('width', (width * cols) + 'em');
		inst.dpDiv[(numMonths[0] != 1 || numMonths[1] != 1 ? 'add' : 'remove') +
			'Class']('ui-datepicker-multi');
		inst.dpDiv[(this._get(inst, 'isRTL') ? 'add' : 'remove') +
			'Class']('ui-datepicker-rtl');
		if (inst == $.datepicker._curInst && $.datepicker._datepickerShowing && inst.input &&
				// #6694 - don't focus the input if it's already focused
				// this breaks the change event in IE
				inst.input.is(':visible') && !inst.input.is(':disabled') && inst.input[0] != document.activeElement)
			inst.input.focus();
		// deffered render of the years select (to avoid flashes on Firefox) 
		if( inst.yearshtml ){
			var origyearshtml = inst.yearshtml;
			setTimeout(function(){
				//assure that inst.yearshtml didn't change.
				if( origyearshtml === inst.yearshtml && inst.yearshtml ){
					inst.dpDiv.find('select.ui-datepicker-year:first').replaceWith(inst.yearshtml);
				}
				origyearshtml = inst.yearshtml = null;
			}, 0);
		}
	},

	/* Retrieve the size of left and top borders for an element.
	   @param  elem  (jQuery object) the element of interest
	   @return  (number[2]) the left and top borders */
	_getBorders: function(elem) {
		var convert = function(value) {
			return {thin: 1, medium: 2, thick: 3}[value] || value;
		};
		return [parseFloat(convert(elem.css('border-left-width'))),
			parseFloat(convert(elem.css('border-top-width')))];
	},

	/* Check positioning to remain on screen. */
	_checkOffset: function(inst, offset, isFixed) {
		var dpWidth = inst.dpDiv.outerWidth();
		var dpHeight = inst.dpDiv.outerHeight();
		var inputWidth = inst.input ? inst.input.outerWidth() : 0;
		var inputHeight = inst.input ? inst.input.outerHeight() : 0;
		var viewWidth = document.documentElement.clientWidth + $(document).scrollLeft();
		var viewHeight = document.documentElement.clientHeight + $(document).scrollTop();

		offset.left -= (this._get(inst, 'isRTL') ? (dpWidth - inputWidth) : 0);
		offset.left -= (isFixed && offset.left == inst.input.offset().left) ? $(document).scrollLeft() : 0;
		offset.top -= (isFixed && offset.top == (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;

		// now check if datepicker is showing outside window viewport - move to a better place if so.
		offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?
			Math.abs(offset.left + dpWidth - viewWidth) : 0);
		offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
			Math.abs(dpHeight + inputHeight) : 0);

		return offset;
	},

	/* Find an object's position on the screen. */
	_findPos: function(obj) {
		var inst = this._getInst(obj);
		var isRTL = this._get(inst, 'isRTL');
        while (obj && (obj.type == 'hidden' || obj.nodeType != 1 || $.expr.filters.hidden(obj))) {
            obj = obj[isRTL ? 'previousSibling' : 'nextSibling'];
        }
        var position = $(obj).offset();
	    return [position.left, position.top];
	},

	/* Trigger custom callback of onClose. */
	_triggerOnClose: function(inst) {
		var onClose = this._get(inst, 'onClose');
		if (onClose)
			onClose.apply((inst.input ? inst.input[0] : null),
						  [(inst.input ? inst.input.val() : ''), inst]);
	},

	/* Hide the date picker from view.
	   @param  input  element - the input field attached to the date picker */
	_hideDatepicker: function(input) {
		var inst = this._curInst;
		if (!inst || (input && inst != $.data(input, PROP_NAME)))
			return;
		if (this._datepickerShowing) {
			var showAnim = this._get(inst, 'showAnim');
			var duration = this._get(inst, 'duration');
			var postProcess = function() {
				$.datepicker._tidyDialog(inst);
				this._curInst = null;
			};
			if ($.effects && $.effects[showAnim])
				inst.dpDiv.hide(showAnim, $.datepicker._get(inst, 'showOptions'), duration, postProcess);
			else
				inst.dpDiv[(showAnim == 'slideDown' ? 'slideUp' :
					(showAnim == 'fadeIn' ? 'fadeOut' : 'hide'))]((showAnim ? duration : null), postProcess);
			if (!showAnim)
				postProcess();
			$.datepicker._triggerOnClose(inst);
			this._datepickerShowing = false;
			this._lastInput = null;
			if (this._inDialog) {
				this._dialogInput.css({ position: 'absolute', left: '0', top: '-100px' });
				if ($.blockUI) {
					$.unblockUI();
					$('body').append(this.dpDiv);
				}
			}
			this._inDialog = false;
		}
	},

	/* Tidy up after a dialog display. */
	_tidyDialog: function(inst) {
		inst.dpDiv.removeClass(this._dialogClass).unbind('.ui-datepicker-calendar');
	},

	/* Close date picker if clicked elsewhere. */
	_checkExternalClick: function(event) {
		if (!$.datepicker._curInst)
			return;
		var $target = $(event.target);
		if ($target[0].id != $.datepicker._mainDivId &&
				$target.parents('#' + $.datepicker._mainDivId).length == 0 &&
				!$target.hasClass($.datepicker.markerClassName) &&
				!$target.hasClass($.datepicker._triggerClass) &&
				$.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI))
			$.datepicker._hideDatepicker();
	},

	/* Adjust one of the date sub-fields. */
	_adjustDate: function(id, offset, period) {
		var target = $(id);
		var inst = this._getInst(target[0]);
		if (this._isDisabledDatepicker(target[0])) {
			return;
		}
		this._adjustInstDate(inst, offset +
			(period == 'M' ? this._get(inst, 'showCurrentAtPos') : 0), // undo positioning
			period);
		this._updateDatepicker(inst);
	},

	/* Action for current link. */
	_gotoToday: function(id) {
		var target = $(id);
		var inst = this._getInst(target[0]);
		if (this._get(inst, 'gotoCurrent') && inst.currentDay) {
			inst.selectedDay = inst.currentDay;
			inst.drawMonth = inst.selectedMonth = inst.currentMonth;
			inst.drawYear = inst.selectedYear = inst.currentYear;
		}
		else {
			var date = new Date();
			inst.selectedDay = date.getDate();
			inst.drawMonth = inst.selectedMonth = date.getMonth();
			inst.drawYear = inst.selectedYear = date.getFullYear();
		}
		this._notifyChange(inst);
		this._adjustDate(target);
	},

	/* Action for selecting a new month/year. */
	_selectMonthYear: function(id, select, period) {
		var target = $(id);
		var inst = this._getInst(target[0]);
		inst._selectingMonthYear = false;
		inst['selected' + (period == 'M' ? 'Month' : 'Year')] =
		inst['draw' + (period == 'M' ? 'Month' : 'Year')] =
			parseInt(select.options[select.selectedIndex].value,10);
		this._notifyChange(inst);
		this._adjustDate(target);
	},

	/* Restore input focus after not changing month/year. */
	_clickMonthYear: function(id) {
		var target = $(id);
		var inst = this._getInst(target[0]);
		if (inst.input && inst._selectingMonthYear) {
			setTimeout(function() {
				inst.input.focus();
			}, 0);
		}
		inst._selectingMonthYear = !inst._selectingMonthYear;
	},

	/* Action for selecting a day. */
	_selectDay: function(id, month, year, td) {
		var target = $(id);
		if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
			return;
		}
		var inst = this._getInst(target[0]);
		inst.selectedDay = inst.currentDay = $('a', td).html();
		inst.selectedMonth = inst.currentMonth = month;
		inst.selectedYear = inst.currentYear = year;
		this._selectDate(id, this._formatDate(inst,
			inst.currentDay, inst.currentMonth, inst.currentYear));
	},

	/* Erase the input field and hide the date picker. */
	_clearDate: function(id) {
		var target = $(id);
		var inst = this._getInst(target[0]);
		this._selectDate(target, '');
	},

	/* Update the input field with the selected date. */
	_selectDate: function(id, dateStr) {
		var target = $(id);
		var inst = this._getInst(target[0]);
		dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
		if (inst.input)
			inst.input.val(dateStr);
		this._updateAlternate(inst);
		var onSelect = this._get(inst, 'onSelect');
		if (onSelect)
			onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);  // trigger custom callback
		else if (inst.input)
			inst.input.trigger('change'); // fire the change event
		if (inst.inline)
			this._updateDatepicker(inst);
		else {
			this._hideDatepicker();
			this._lastInput = inst.input[0];
			if (typeof(inst.input[0]) != 'object')
				inst.input.focus(); // restore focus
			this._lastInput = null;
		}
	},

	/* Update any alternate field to synchronise with the main field. */
	_updateAlternate: function(inst) {
		var altField = this._get(inst, 'altField');
		if (altField) { // update alternate field too
			var altFormat = this._get(inst, 'altFormat') || this._get(inst, 'dateFormat');
			var date = this._getDate(inst);
			var dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
			$(altField).each(function() { $(this).val(dateStr); });
		}
	},

	/* Set as beforeShowDay function to prevent selection of weekends.
	   @param  date  Date - the date to customise
	   @return [boolean, string] - is this date selectable?, what is its CSS class? */
	noWeekends: function(date) {
		var day = date.getDay();
		return [(day > 0 && day < 6), ''];
	},

	/* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
	   @param  date  Date - the date to get the week for
	   @return  number - the number of the week within the year that contains this date */
	iso8601Week: function(date) {
		var checkDate = new Date(date.getTime());
		// Find Thursday of this week starting on Monday
		checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
		var time = checkDate.getTime();
		checkDate.setMonth(0); // Compare with Jan 1
		checkDate.setDate(1);
		return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
	},

	/* Parse a string value into a date object.
	   See formatDate below for the possible formats.

	   @param  format    string - the expected format of the date
	   @param  value     string - the date in the above format
	   @param  settings  Object - attributes include:
	                     shortYearCutoff  number - the cutoff year for determining the century (optional)
	                     dayNamesShort    string[7] - abbreviated names of the days from Sunday (optional)
	                     dayNames         string[7] - names of the days from Sunday (optional)
	                     monthNamesShort  string[12] - abbreviated names of the months (optional)
	                     monthNames       string[12] - names of the months (optional)
	   @return  Date - the extracted date value or null if value is blank */
	parseDate: function (format, value, settings) {
		if (format == null || value == null)
			throw 'Invalid arguments';
		value = (typeof value == 'object' ? value.toString() : value + '');
		if (value == '')
			return null;
		var shortYearCutoff = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff;
		shortYearCutoff = (typeof shortYearCutoff != 'string' ? shortYearCutoff :
				new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
		var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
		var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
		var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
		var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
		var year = -1;
		var month = -1;
		var day = -1;
		var doy = -1;
		var literal = false;
		// Check whether a format character is doubled
		var lookAhead = function(match) {
			var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
			if (matches)
				iFormat++;
			return matches;
		};
		// Extract a number from the string value
		var getNumber = function(match) {
			var isDoubled = lookAhead(match);
			var size = (match == '@' ? 14 : (match == '!' ? 20 :
				(match == 'y' && isDoubled ? 4 : (match == 'o' ? 3 : 2))));
			var digits = new RegExp('^\\d{1,' + size + '}');
			var num = value.substring(iValue).match(digits);
			if (!num)
				throw 'Missing number at position ' + iValue;
			iValue += num[0].length;
			return parseInt(num[0], 10);
		};
		// Extract a name from the string value and convert to an index
		var getName = function(match, shortNames, longNames) {
			var names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {
				return [ [k, v] ];
			}).sort(function (a, b) {
				return -(a[1].length - b[1].length);
			});
			var index = -1;
			$.each(names, function (i, pair) {
				var name = pair[1];
				if (value.substr(iValue, name.length).toLowerCase() == name.toLowerCase()) {
					index = pair[0];
					iValue += name.length;
					return false;
				}
			});
			if (index != -1)
				return index + 1;
			else
				throw 'Unknown name at position ' + iValue;
		};
		// Confirm that a literal character matches the string value
		var checkLiteral = function() {
			if (value.charAt(iValue) != format.charAt(iFormat))
				throw 'Unexpected literal at position ' + iValue;
			iValue++;
		};
		var iValue = 0;
		for (var iFormat = 0; iFormat < format.length; iFormat++) {
			if (literal)
				if (format.charAt(iFormat) == "'" && !lookAhead("'"))
					literal = false;
				else
					checkLiteral();
			else
				switch (format.charAt(iFormat)) {
					case 'd':
						day = getNumber('d');
						break;
					case 'D':
						getName('D', dayNamesShort, dayNames);
						break;
					case 'o':
						doy = getNumber('o');
						break;
					case 'm':
						month = getNumber('m');
						break;
					case 'M':
						month = getName('M', monthNamesShort, monthNames);
						break;
					case 'y':
						year = getNumber('y');
						break;
					case '@':
						var date = new Date(getNumber('@'));
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case '!':
						var date = new Date((getNumber('!') - this._ticksTo1970) / 10000);
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case "'":
						if (lookAhead("'"))
							checkLiteral();
						else
							literal = true;
						break;
					default:
						checkLiteral();
				}
		}
		if (iValue < value.length){
			throw "Extra/unparsed characters found in date: " + value.substring(iValue);
		}
		if (year == -1)
			year = new Date().getFullYear();
		else if (year < 100)
			year += new Date().getFullYear() - new Date().getFullYear() % 100 +
				(year <= shortYearCutoff ? 0 : -100);
		if (doy > -1) {
			month = 1;
			day = doy;
			do {
				var dim = this._getDaysInMonth(year, month - 1);
				if (day <= dim)
					break;
				month++;
				day -= dim;
			} while (true);
		}
		var date = this._daylightSavingAdjust(new Date(year, month - 1, day));
		if (date.getFullYear() != year || date.getMonth() + 1 != month || date.getDate() != day)
			throw 'Invalid date'; // E.g. 31/02/00
		return date;
	},

	/* Standard date formats. */
	ATOM: 'yy-mm-dd', // RFC 3339 (ISO 8601)
	COOKIE: 'D, dd M yy',
	ISO_8601: 'yy-mm-dd',
	RFC_822: 'D, d M y',
	RFC_850: 'DD, dd-M-y',
	RFC_1036: 'D, d M y',
	RFC_1123: 'D, d M yy',
	RFC_2822: 'D, d M yy',
	RSS: 'D, d M y', // RFC 822
	TICKS: '!',
	TIMESTAMP: '@',
	W3C: 'yy-mm-dd', // ISO 8601

	_ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +
		Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),

	/* Format a date object into a string value.
	   The format can be combinations of the following:
	   d  - day of month (no leading zero)
	   dd - day of month (two digit)
	   o  - day of year (no leading zeros)
	   oo - day of year (three digit)
	   D  - day name short
	   DD - day name long
	   m  - month of year (no leading zero)
	   mm - month of year (two digit)
	   M  - month name short
	   MM - month name long
	   y  - year (two digit)
	   yy - year (four digit)
	   @ - Unix timestamp (ms since 01/01/1970)
	   ! - Windows ticks (100ns since 01/01/0001)
	   '...' - literal text
	   '' - single quote

	   @param  format    string - the desired format of the date
	   @param  date      Date - the date value to format
	   @param  settings  Object - attributes include:
	                     dayNamesShort    string[7] - abbreviated names of the days from Sunday (optional)
	                     dayNames         string[7] - names of the days from Sunday (optional)
	                     monthNamesShort  string[12] - abbreviated names of the months (optional)
	                     monthNames       string[12] - names of the months (optional)
	   @return  string - the date in the above format */
	formatDate: function (format, date, settings) {
		if (!date)
			return '';
		var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
		var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
		var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
		var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
		// Check whether a format character is doubled
		var lookAhead = function(match) {
			var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
			if (matches)
				iFormat++;
			return matches;
		};
		// Format a number, with leading zero if necessary
		var formatNumber = function(match, value, len) {
			var num = '' + value;
			if (lookAhead(match))
				while (num.length < len)
					num = '0' + num;
			return num;
		};
		// Format a name, short or long as requested
		var formatName = function(match, value, shortNames, longNames) {
			return (lookAhead(match) ? longNames[value] : shortNames[value]);
		};
		var output = '';
		var literal = false;
		if (date)
			for (var iFormat = 0; iFormat < format.length; iFormat++) {
				if (literal)
					if (format.charAt(iFormat) == "'" && !lookAhead("'"))
						literal = false;
					else
						output += format.charAt(iFormat);
				else
					switch (format.charAt(iFormat)) {
						case 'd':
							output += formatNumber('d', date.getDate(), 2);
							break;
						case 'D':
							output += formatName('D', date.getDay(), dayNamesShort, dayNames);
							break;
						case 'o':
							output += formatNumber('o',
								Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
							break;
						case 'm':
							output += formatNumber('m', date.getMonth() + 1, 2);
							break;
						case 'M':
							output += formatName('M', date.getMonth(), monthNamesShort, monthNames);
							break;
						case 'y':
							output += (lookAhead('y') ? date.getFullYear() :
								(date.getYear() % 100 < 10 ? '0' : '') + date.getYear() % 100);
							break;
						case '@':
							output += date.getTime();
							break;
						case '!':
							output += date.getTime() * 10000 + this._ticksTo1970;
							break;
						case "'":
							if (lookAhead("'"))
								output += "'";
							else
								literal = true;
							break;
						default:
							output += format.charAt(iFormat);
					}
			}
		return output;
	},

	/* Extract all possible characters from the date format. */
	_possibleChars: function (format) {
		var chars = '';
		var literal = false;
		// Check whether a format character is doubled
		var lookAhead = function(match) {
			var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
			if (matches)
				iFormat++;
			return matches;
		};
		for (var iFormat = 0; iFormat < format.length; iFormat++)
			if (literal)
				if (format.charAt(iFormat) == "'" && !lookAhead("'"))
					literal = false;
				else
					chars += format.charAt(iFormat);
			else
				switch (format.charAt(iFormat)) {
					case 'd': case 'm': case 'y': case '@':
						chars += '0123456789';
						break;
					case 'D': case 'M':
						return null; // Accept anything
					case "'":
						if (lookAhead("'"))
							chars += "'";
						else
							literal = true;
						break;
					default:
						chars += format.charAt(iFormat);
				}
		return chars;
	},

	/* Get a setting value, defaulting if necessary. */
	_get: function(inst, name) {
		return inst.settings[name] !== undefined ?
			inst.settings[name] : this._defaults[name];
	},

	/* Parse existing date and initialise date picker. */
	_setDateFromField: function(inst, noDefault) {
		if (inst.input.val() == inst.lastVal) {
			return;
		}
		var dateFormat = this._get(inst, 'dateFormat');
		var dates = inst.lastVal = inst.input ? inst.input.val() : null;
		var date, defaultDate;
		date = defaultDate = this._getDefaultDate(inst);
		var settings = this._getFormatConfig(inst);
		try {
			date = this.parseDate(dateFormat, dates, settings) || defaultDate;
		} catch (event) {
			this.log(event);
			dates = (noDefault ? '' : dates);
		}
		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		inst.currentDay = (dates ? date.getDate() : 0);
		inst.currentMonth = (dates ? date.getMonth() : 0);
		inst.currentYear = (dates ? date.getFullYear() : 0);
		this._adjustInstDate(inst);
	},

	/* Retrieve the default date shown on opening. */
	_getDefaultDate: function(inst) {
		return this._restrictMinMax(inst,
			this._determineDate(inst, this._get(inst, 'defaultDate'), new Date()));
	},

	/* A date may be specified as an exact value or a relative one. */
	_determineDate: function(inst, date, defaultDate) {
		var offsetNumeric = function(offset) {
			var date = new Date();
			date.setDate(date.getDate() + offset);
			return date;
		};
		var offsetString = function(offset) {
			try {
				return $.datepicker.parseDate($.datepicker._get(inst, 'dateFormat'),
					offset, $.datepicker._getFormatConfig(inst));
			}
			catch (e) {
				// Ignore
			}
			var date = (offset.toLowerCase().match(/^c/) ?
				$.datepicker._getDate(inst) : null) || new Date();
			var year = date.getFullYear();
			var month = date.getMonth();
			var day = date.getDate();
			var pattern = /([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g;
			var matches = pattern.exec(offset);
			while (matches) {
				switch (matches[2] || 'd') {
					case 'd' : case 'D' :
						day += parseInt(matches[1],10); break;
					case 'w' : case 'W' :
						day += parseInt(matches[1],10) * 7; break;
					case 'm' : case 'M' :
						month += parseInt(matches[1],10);
						day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
						break;
					case 'y': case 'Y' :
						year += parseInt(matches[1],10);
						day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
						break;
				}
				matches = pattern.exec(offset);
			}
			return new Date(year, month, day);
		};
		var newDate = (date == null || date === '' ? defaultDate : (typeof date == 'string' ? offsetString(date) :
			(typeof date == 'number' ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));
		newDate = (newDate && newDate.toString() == 'Invalid Date' ? defaultDate : newDate);
		if (newDate) {
			newDate.setHours(0);
			newDate.setMinutes(0);
			newDate.setSeconds(0);
			newDate.setMilliseconds(0);
		}
		return this._daylightSavingAdjust(newDate);
	},

	/* Handle switch to/from daylight saving.
	   Hours may be non-zero on daylight saving cut-over:
	   > 12 when midnight changeover, but then cannot generate
	   midnight datetime, so jump to 1AM, otherwise reset.
	   @param  date  (Date) the date to check
	   @return  (Date) the corrected date */
	_daylightSavingAdjust: function(date) {
		if (!date) return null;
		date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
		return date;
	},

	/* Set the date(s) directly. */
	_setDate: function(inst, date, noChange) {
		var clear = !date;
		var origMonth = inst.selectedMonth;
		var origYear = inst.selectedYear;
		var newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));
		inst.selectedDay = inst.currentDay = newDate.getDate();
		inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
		inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
		if ((origMonth != inst.selectedMonth || origYear != inst.selectedYear) && !noChange)
			this._notifyChange(inst);
		this._adjustInstDate(inst);
		if (inst.input) {
			inst.input.val(clear ? '' : this._formatDate(inst));
		}
	},

	/* Retrieve the date(s) directly. */
	_getDate: function(inst) {
		var startDate = (!inst.currentYear || (inst.input && inst.input.val() == '') ? null :
			this._daylightSavingAdjust(new Date(
			inst.currentYear, inst.currentMonth, inst.currentDay)));
			return startDate;
	},

	/* Generate the HTML for the current state of the date picker. */
	_generateHTML: function(inst) {
		var today = new Date();
		today = this._daylightSavingAdjust(
			new Date(today.getFullYear(), today.getMonth(), today.getDate())); // clear time
		var isRTL = this._get(inst, 'isRTL');
		var showButtonPanel = this._get(inst, 'showButtonPanel');
		var hideIfNoPrevNext = this._get(inst, 'hideIfNoPrevNext');
		var navigationAsDateFormat = this._get(inst, 'navigationAsDateFormat');
		var numMonths = this._getNumberOfMonths(inst);
		var showCurrentAtPos = this._get(inst, 'showCurrentAtPos');
		var stepMonths = this._get(inst, 'stepMonths');
		var isMultiMonth = (numMonths[0] != 1 || numMonths[1] != 1);
		var currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :
			new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
		var minDate = this._getMinMaxDate(inst, 'min');
		var maxDate = this._getMinMaxDate(inst, 'max');
		var drawMonth = inst.drawMonth - showCurrentAtPos;
		var drawYear = inst.drawYear;
		if (drawMonth < 0) {
			drawMonth += 12;
			drawYear--;
		}
		if (maxDate) {
			var maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),
				maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));
			maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
			while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
				drawMonth--;
				if (drawMonth < 0) {
					drawMonth = 11;
					drawYear--;
				}
			}
		}
		inst.drawMonth = drawMonth;
		inst.drawYear = drawYear;
		var prevText = this._get(inst, 'prevText');
		prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,
			this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),
			this._getFormatConfig(inst)));
		var prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?
			'<a class="ui-datepicker-prev ui-corner-all" onclick="DP_jQuery_' + dpuuid +
			'.datepicker._adjustDate(\'#' + inst.id + '\', -' + stepMonths + ', \'M\');"' +
			' title="' + prevText + '"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'e' : 'w') + '">' + prevText + '</span></a>' :
			(hideIfNoPrevNext ? '' : '<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="'+ prevText +'"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'e' : 'w') + '">' + prevText + '</span></a>'));
		var nextText = this._get(inst, 'nextText');
		nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,
			this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),
			this._getFormatConfig(inst)));
		var next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?
			'<a class="ui-datepicker-next ui-corner-all" onclick="DP_jQuery_' + dpuuid +
			'.datepicker._adjustDate(\'#' + inst.id + '\', +' + stepMonths + ', \'M\');"' +
			' title="' + nextText + '"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'w' : 'e') + '">' + nextText + '</span></a>' :
			(hideIfNoPrevNext ? '' : '<a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="'+ nextText + '"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'w' : 'e') + '">' + nextText + '</span></a>'));
		var currentText = this._get(inst, 'currentText');
		var gotoDate = (this._get(inst, 'gotoCurrent') && inst.currentDay ? currentDate : today);
		currentText = (!navigationAsDateFormat ? currentText :
			this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));
		var controls = (!inst.inline ? '<button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" onclick="DP_jQuery_' + dpuuid +
			'.datepicker._hideDatepicker();">' + this._get(inst, 'closeText') + '</button>' : '');
		var buttonPanel = (showButtonPanel) ? '<div class="ui-datepicker-buttonpane ui-widget-content">' + (isRTL ? controls : '') +
			(this._isInRange(inst, gotoDate) ? '<button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" onclick="DP_jQuery_' + dpuuid +
			'.datepicker._gotoToday(\'#' + inst.id + '\');"' +
			'>' + currentText + '</button>' : '') + (isRTL ? '' : controls) + '</div>' : '';
		var firstDay = parseInt(this._get(inst, 'firstDay'),10);
		firstDay = (isNaN(firstDay) ? 0 : firstDay);
		var showWeek = this._get(inst, 'showWeek');
		var dayNames = this._get(inst, 'dayNames');
		var dayNamesShort = this._get(inst, 'dayNamesShort');
		var dayNamesMin = this._get(inst, 'dayNamesMin');
		var monthNames = this._get(inst, 'monthNames');
		var monthNamesShort = this._get(inst, 'monthNamesShort');
		var beforeShowDay = this._get(inst, 'beforeShowDay');
		var showOtherMonths = this._get(inst, 'showOtherMonths');
		var selectOtherMonths = this._get(inst, 'selectOtherMonths');
		var calculateWeek = this._get(inst, 'calculateWeek') || this.iso8601Week;
		var defaultDate = this._getDefaultDate(inst);
		var html = '';
		for (var row = 0; row < numMonths[0]; row++) {
			var group = '';
			this.maxRows = 4;
			for (var col = 0; col < numMonths[1]; col++) {
				var selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
				var cornerClass = ' ui-corner-all';
				var calender = '';
				if (isMultiMonth) {
					calender += '<div class="ui-datepicker-group';
					if (numMonths[1] > 1)
						switch (col) {
							case 0: calender += ' ui-datepicker-group-first';
								cornerClass = ' ui-corner-' + (isRTL ? 'right' : 'left'); break;
							case numMonths[1]-1: calender += ' ui-datepicker-group-last';
								cornerClass = ' ui-corner-' + (isRTL ? 'left' : 'right'); break;
							default: calender += ' ui-datepicker-group-middle'; cornerClass = ''; break;
						}
					calender += '">';
				}
				calender += '<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix' + cornerClass + '">' +
					(/all|left/.test(cornerClass) && row == 0 ? (isRTL ? next : prev) : '') +
					(/all|right/.test(cornerClass) && row == 0 ? (isRTL ? prev : next) : '') +
					this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,
					row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers
					'</div><table class="ui-datepicker-calendar"><thead>' +
					'<tr>';
				var thead = (showWeek ? '<th class="ui-datepicker-week-col">' + this._get(inst, 'weekHeader') + '</th>' : '');
				for (var dow = 0; dow < 7; dow++) { // days of the week
					var day = (dow + firstDay) % 7;
					thead += '<th' + ((dow + firstDay + 6) % 7 >= 5 ? ' class="ui-datepicker-week-end"' : '') + '>' +
						'<span title="' + dayNames[day] + '">' + dayNamesMin[day] + '</span></th>';
				}
				calender += thead + '</tr></thead><tbody>';
				var daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
				if (drawYear == inst.selectedYear && drawMonth == inst.selectedMonth)
					inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
				var leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
				var curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate
				var numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)
				this.maxRows = numRows;
				var printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
				for (var dRow = 0; dRow < numRows; dRow++) { // create date picker rows
					calender += '<tr>';
					var tbody = (!showWeek ? '' : '<td class="ui-datepicker-week-col">' +
						this._get(inst, 'calculateWeek')(printDate) + '</td>');
					for (var dow = 0; dow < 7; dow++) { // create date picker days
						var daySettings = (beforeShowDay ?
							beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, '']);
						var otherMonth = (printDate.getMonth() != drawMonth);
						var unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||
							(minDate && printDate < minDate) || (maxDate && printDate > maxDate);
						tbody += '<td class="' +
							((dow + firstDay + 6) % 7 >= 5 ? ' ui-datepicker-week-end' : '') + // highlight weekends
							(otherMonth ? ' ui-datepicker-other-month' : '') + // highlight days from other months
							((printDate.getTime() == selectedDate.getTime() && drawMonth == inst.selectedMonth && inst._keyEvent) || // user pressed key
							(defaultDate.getTime() == printDate.getTime() && defaultDate.getTime() == selectedDate.getTime()) ?
							// or defaultDate is current printedDate and defaultDate is selectedDate
							' ' + this._dayOverClass : '') + // highlight selected day
							(unselectable ? ' ' + this._unselectableClass + ' ui-state-disabled': '') +  // highlight unselectable days
							(otherMonth && !showOtherMonths ? '' : ' ' + daySettings[1] + // highlight custom dates
							(printDate.getTime() == currentDate.getTime() ? ' ' + this._currentClass : '') + // highlight selected day
							(printDate.getTime() == today.getTime() ? ' ui-datepicker-today' : '')) + '"' + // highlight today (if different)
							((!otherMonth || showOtherMonths) && daySettings[2] ? ' title="' + daySettings[2] + '"' : '') + // cell title
							(unselectable ? '' : ' onclick="DP_jQuery_' + dpuuid + '.datepicker._selectDay(\'#' +
							inst.id + '\',' + printDate.getMonth() + ',' + printDate.getFullYear() + ', this);return false;"') + '>' + // actions
							(otherMonth && !showOtherMonths ? '&#xa0;' : // display for other months
							(unselectable ? '<span class="ui-state-default">' + printDate.getDate() + '</span>' : '<a class="ui-state-default' +
							(printDate.getTime() == today.getTime() ? ' ui-state-highlight' : '') +
							(printDate.getTime() == currentDate.getTime() ? ' ui-state-active' : '') + // highlight selected day
							(otherMonth ? ' ui-priority-secondary' : '') + // distinguish dates from other months
							'" href="#">' + printDate.getDate() + '</a>')) + '</td>'; // display selectable date
						printDate.setDate(printDate.getDate() + 1);
						printDate = this._daylightSavingAdjust(printDate);
					}
					calender += tbody + '</tr>';
				}
				drawMonth++;
				if (drawMonth > 11) {
					drawMonth = 0;
					drawYear++;
				}
				calender += '</tbody></table>' + (isMultiMonth ? '</div>' + 
							((numMonths[0] > 0 && col == numMonths[1]-1) ? '<div class="ui-datepicker-row-break"></div>' : '') : '');
				group += calender;
			}
			html += group;
		}
		html += buttonPanel + ($.browser.msie && parseInt($.browser.version,10) < 7 && !inst.inline ?
			'<iframe src="javascript:false;" class="ui-datepicker-cover" frameborder="0"></iframe>' : '');
		inst._keyEvent = false;
		return html;
	},

	/* Generate the month and year header. */
	_generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate,
			secondary, monthNames, monthNamesShort) {
		var changeMonth = this._get(inst, 'changeMonth');
		var changeYear = this._get(inst, 'changeYear');
		var showMonthAfterYear = this._get(inst, 'showMonthAfterYear');
		var html = '<div class="ui-datepicker-title">';
		var monthHtml = '';
		// month selection
		if (secondary || !changeMonth)
			monthHtml += '<span class="ui-datepicker-month">' + monthNames[drawMonth] + '</span>';
		else {
			var inMinYear = (minDate && minDate.getFullYear() == drawYear);
			var inMaxYear = (maxDate && maxDate.getFullYear() == drawYear);
			monthHtml += '<select class="ui-datepicker-month" ' +
				'onchange="DP_jQuery_' + dpuuid + '.datepicker._selectMonthYear(\'#' + inst.id + '\', this, \'M\');" ' +
				'onclick="DP_jQuery_' + dpuuid + '.datepicker._clickMonthYear(\'#' + inst.id + '\');"' +
			 	'>';
			for (var month = 0; month < 12; month++) {
				if ((!inMinYear || month >= minDate.getMonth()) &&
						(!inMaxYear || month <= maxDate.getMonth()))
					monthHtml += '<option value="' + month + '"' +
						(month == drawMonth ? ' selected="selected"' : '') +
						'>' + monthNamesShort[month] + '</option>';
			}
			monthHtml += '</select>';
		}
		if (!showMonthAfterYear)
			html += monthHtml + (secondary || !(changeMonth && changeYear) ? '&#xa0;' : '');
		// year selection
		if ( !inst.yearshtml ) {
			inst.yearshtml = '';
			if (secondary || !changeYear)
				html += '<span class="ui-datepicker-year">' + drawYear + '</span>';
			else {
				// determine range of years to display
				var years = this._get(inst, 'yearRange').split(':');
				var thisYear = new Date().getFullYear();
				var determineYear = function(value) {
					var year = (value.match(/c[+-].*/) ? drawYear + parseInt(value.substring(1), 10) :
						(value.match(/[+-].*/) ? thisYear + parseInt(value, 10) :
						parseInt(value, 10)));
					return (isNaN(year) ? thisYear : year);
				};
				var year = determineYear(years[0]);
				var endYear = Math.max(year, determineYear(years[1] || ''));
				year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
				endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
				inst.yearshtml += '<select class="ui-datepicker-year" ' +
					'onchange="DP_jQuery_' + dpuuid + '.datepicker._selectMonthYear(\'#' + inst.id + '\', this, \'Y\');" ' +
					'onclick="DP_jQuery_' + dpuuid + '.datepicker._clickMonthYear(\'#' + inst.id + '\');"' +
					'>';
				for (; year <= endYear; year++) {
					inst.yearshtml += '<option value="' + year + '"' +
						(year == drawYear ? ' selected="selected"' : '') +
						'>' + year + '</option>';
				}
				inst.yearshtml += '</select>';
				
				html += inst.yearshtml;
				inst.yearshtml = null;
			}
		}
		html += this._get(inst, 'yearSuffix');
		if (showMonthAfterYear)
			html += (secondary || !(changeMonth && changeYear) ? '&#xa0;' : '') + monthHtml;
		html += '</div>'; // Close datepicker_header
		return html;
	},

	/* Adjust one of the date sub-fields. */
	_adjustInstDate: function(inst, offset, period) {
		var year = inst.drawYear + (period == 'Y' ? offset : 0);
		var month = inst.drawMonth + (period == 'M' ? offset : 0);
		var day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) +
			(period == 'D' ? offset : 0);
		var date = this._restrictMinMax(inst,
			this._daylightSavingAdjust(new Date(year, month, day)));
		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		if (period == 'M' || period == 'Y')
			this._notifyChange(inst);
	},

	/* Ensure a date is within any min/max bounds. */
	_restrictMinMax: function(inst, date) {
		var minDate = this._getMinMaxDate(inst, 'min');
		var maxDate = this._getMinMaxDate(inst, 'max');
		var newDate = (minDate && date < minDate ? minDate : date);
		newDate = (maxDate && newDate > maxDate ? maxDate : newDate);
		return newDate;
	},

	/* Notify change of month/year. */
	_notifyChange: function(inst) {
		var onChange = this._get(inst, 'onChangeMonthYear');
		if (onChange)
			onChange.apply((inst.input ? inst.input[0] : null),
				[inst.selectedYear, inst.selectedMonth + 1, inst]);
	},

	/* Determine the number of months to show. */
	_getNumberOfMonths: function(inst) {
		var numMonths = this._get(inst, 'numberOfMonths');
		return (numMonths == null ? [1, 1] : (typeof numMonths == 'number' ? [1, numMonths] : numMonths));
	},

	/* Determine the current maximum date - ensure no time components are set. */
	_getMinMaxDate: function(inst, minMax) {
		return this._determineDate(inst, this._get(inst, minMax + 'Date'), null);
	},

	/* Find the number of days in a given month. */
	_getDaysInMonth: function(year, month) {
		return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
	},

	/* Find the day of the week of the first of a month. */
	_getFirstDayOfMonth: function(year, month) {
		return new Date(year, month, 1).getDay();
	},

	/* Determines if we should allow a "next/prev" month display change. */
	_canAdjustMonth: function(inst, offset, curYear, curMonth) {
		var numMonths = this._getNumberOfMonths(inst);
		var date = this._daylightSavingAdjust(new Date(curYear,
			curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));
		if (offset < 0)
			date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
		return this._isInRange(inst, date);
	},

	/* Is the given date in the accepted range? */
	_isInRange: function(inst, date) {
		var minDate = this._getMinMaxDate(inst, 'min');
		var maxDate = this._getMinMaxDate(inst, 'max');
		return ((!minDate || date.getTime() >= minDate.getTime()) &&
			(!maxDate || date.getTime() <= maxDate.getTime()));
	},

	/* Provide the configuration settings for formatting/parsing. */
	_getFormatConfig: function(inst) {
		var shortYearCutoff = this._get(inst, 'shortYearCutoff');
		shortYearCutoff = (typeof shortYearCutoff != 'string' ? shortYearCutoff :
			new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
		return {shortYearCutoff: shortYearCutoff,
			dayNamesShort: this._get(inst, 'dayNamesShort'), dayNames: this._get(inst, 'dayNames'),
			monthNamesShort: this._get(inst, 'monthNamesShort'), monthNames: this._get(inst, 'monthNames')};
	},

	/* Format the given date for display. */
	_formatDate: function(inst, day, month, year) {
		if (!day) {
			inst.currentDay = inst.selectedDay;
			inst.currentMonth = inst.selectedMonth;
			inst.currentYear = inst.selectedYear;
		}
		var date = (day ? (typeof day == 'object' ? day :
			this._daylightSavingAdjust(new Date(year, month, day))) :
			this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
		return this.formatDate(this._get(inst, 'dateFormat'), date, this._getFormatConfig(inst));
	}
});

/*
 * Bind hover events for datepicker elements.
 * Done via delegate so the binding only occurs once in the lifetime of the parent div.
 * Global instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
 */ 
function bindHover(dpDiv) {
	var selector = 'button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a';
	return dpDiv.bind('mouseout', function(event) {
			var elem = $( event.target ).closest( selector );
			if ( !elem.length ) {
				return;
			}
			elem.removeClass( "ui-state-hover ui-datepicker-prev-hover ui-datepicker-next-hover" );
		})
		.bind('mouseover', function(event) {
			var elem = $( event.target ).closest( selector );
			if ($.datepicker._isDisabledDatepicker( instActive.inline ? dpDiv.parent()[0] : instActive.input[0]) ||
					!elem.length ) {
				return;
			}
			elem.parents('.ui-datepicker-calendar').find('a').removeClass('ui-state-hover');
			elem.addClass('ui-state-hover');
			if (elem.hasClass('ui-datepicker-prev')) elem.addClass('ui-datepicker-prev-hover');
			if (elem.hasClass('ui-datepicker-next')) elem.addClass('ui-datepicker-next-hover');
		});
}

/* jQuery extend now ignores nulls! */
function extendRemove(target, props) {
	$.extend(target, props);
	for (var name in props)
		if (props[name] == null || props[name] == undefined)
			target[name] = props[name];
	return target;
};

/* Determine whether an object is an array. */
function isArray(a) {
	return (a && (($.browser.safari && typeof a == 'object' && a.length) ||
		(a.constructor && a.constructor.toString().match(/\Array\(\)/))));
};

/* Invoke the datepicker functionality.
   @param  options  string - a command, optionally followed by additional parameters or
                    Object - settings for attaching new datepicker functionality
   @return  jQuery object */
$.fn.datepicker = function(options){
	
	/* Verify an empty collection wasn't passed - Fixes #6976 */
	if ( !this.length ) {
		return this;
	}
	
	/* Initialise the date picker. */
	if (!$.datepicker.initialized) {
		$(document).mousedown($.datepicker._checkExternalClick).
			find('body').append($.datepicker.dpDiv);
		$.datepicker.initialized = true;
	}

	var otherArgs = Array.prototype.slice.call(arguments, 1);
	if (typeof options == 'string' && (options == 'isDisabled' || options == 'getDate' || options == 'widget'))
		return $.datepicker['_' + options + 'Datepicker'].
			apply($.datepicker, [this[0]].concat(otherArgs));
	if (options == 'option' && arguments.length == 2 && typeof arguments[1] == 'string')
		return $.datepicker['_' + options + 'Datepicker'].
			apply($.datepicker, [this[0]].concat(otherArgs));
	return this.each(function() {
		typeof options == 'string' ?
			$.datepicker['_' + options + 'Datepicker'].
				apply($.datepicker, [this].concat(otherArgs)) :
			$.datepicker._attachDatepicker(this, options);
	});
};

$.datepicker = new Datepicker(); // singleton instance
$.datepicker.initialized = false;
$.datepicker.uuid = new Date().getTime();
$.datepicker.version = "1.8.14";

// Workaround for #4055
// Add another global to avoid noConflict issues with inline event handlers
window['DP_jQuery_' + dpuuid] = $;

})(jQuery);
/*
 * zClip :: jQuery ZeroClipboard v1.1.1
 * http://steamdev.com/zclip
 *
 * Copyright 2011, SteamDev
 * Released under the MIT license.
 * http://www.opensource.org/licenses/mit-license.php
 *
 * Date: Wed Jun 01, 2011
 */


(function ($) {

    $.fn.zclip = function (params) {

        if (typeof params == "object" && !params.length) {

            var settings = $.extend({

                path: 'ZeroClipboard.swf',
                copy: null,
                beforeCopy: null,
                afterCopy: null,
                clickAfter: true,
                setHandCursor: true,
                setCSSEffects: true

            }, params);
			

            return this.each(function () {

                var o = $(this);

                if (o.is(':visible') && (typeof settings.copy == 'string' || $.isFunction(settings.copy))) {

                    ZeroClipboard.setMoviePath(settings.path);
                    var clip = new ZeroClipboard.Client();
                    
                    if($.isFunction(settings.copy)){
                    	o.bind('zClip_copy',settings.copy);
                    }
                    if($.isFunction(settings.beforeCopy)){
                    	o.bind('zClip_beforeCopy',settings.beforeCopy);
                    }
                    if($.isFunction(settings.afterCopy)){
                    	o.bind('zClip_afterCopy',settings.afterCopy);
                    }                    

                    clip.setHandCursor(settings.setHandCursor);
                    clip.setCSSEffects(settings.setCSSEffects);
                    clip.addEventListener('mouseOver', function (client) {
                        o.trigger('mouseenter');
                    });
                    clip.addEventListener('mouseOut', function (client) {
                        o.trigger('mouseleave');
                    });
                    clip.addEventListener('mouseDown', function (client) {

                        o.trigger('mousedown');
                        
			if(!$.isFunction(settings.copy)){
			   clip.setText(settings.copy);
			} else {
			   clip.setText(o.triggerHandler('zClip_copy'));
			}                        
                        
                        if ($.isFunction(settings.beforeCopy)) {
                            o.trigger('zClip_beforeCopy');                            
                        }

                    });

                    clip.addEventListener('complete', function (client, text) {

                        if ($.isFunction(settings.afterCopy)) {
                            
                            o.trigger('zClip_afterCopy');

                        } else {
                            if (text.length > 500) {
                                text = text.substr(0, 500) + "...\n\n(" + (text.length - 500) + " characters not shown)";
                            }
							
			    o.removeClass('hover');
                            alert("Copied text to clipboard:\n\n " + text);
                        }

                        if (settings.clickAfter) {
                            o.trigger('click');
                        }

                    });

					
                    clip.glue(o[0], o.parent()[0]);
					
		    $(window).bind('load resize',function(){clip.reposition();});
					

                }

            });

        } else if (typeof params == "string") {

            return this.each(function () {

                var o = $(this);

                params = params.toLowerCase();
                var zclipId = o.data('zclipId');
                var clipElm = $('#' + zclipId + '.zclip');

                if (params == "remove") {

                    clipElm.remove();
                    o.removeClass('active hover');

                } else if (params == "hide") {

                    clipElm.hide();
                    o.removeClass('active hover');

                } else if (params == "show") {

                    clipElm.show();

                }

            });

        }

    }	
	
	

})(jQuery);







// ZeroClipboard
// Simple Set Clipboard System
// Author: Joseph Huckaby
var ZeroClipboard = {

    version: "1.0.7",
    clients: {},
    // registered upload clients on page, indexed by id
    moviePath: 'ZeroClipboard.swf',
    // URL to movie
    nextId: 1,
    // ID of next movie
    $: function (thingy) {
        // simple DOM lookup utility function
        if (typeof(thingy) == 'string') thingy = document.getElementById(thingy);
        if (!thingy.addClass) {
            // extend element with a few useful methods
            thingy.hide = function () {
                this.style.display = 'none';
            };
            thingy.show = function () {
                this.style.display = '';
            };
            thingy.addClass = function (name) {
                this.removeClass(name);
                this.className += ' ' + name;
            };
            thingy.removeClass = function (name) {
                var classes = this.className.split(/\s+/);
                var idx = -1;
                for (var k = 0; k < classes.length; k++) {
                    if (classes[k] == name) {
                        idx = k;
                        k = classes.length;
                    }
                }
                if (idx > -1) {
                    classes.splice(idx, 1);
                    this.className = classes.join(' ');
                }
                return this;
            };
            thingy.hasClass = function (name) {
                return !!this.className.match(new RegExp("\\s*" + name + "\\s*"));
            };
        }
        return thingy;
    },

    setMoviePath: function (path) {
        // set path to ZeroClipboard.swf
        this.moviePath = path;
    },

    dispatch: function (id, eventName, args) {
        // receive event from flash movie, send to client		
        var client = this.clients[id];
        if (client) {
            client.receiveEvent(eventName, args);
        }
    },

    register: function (id, client) {
        // register new client to receive events
        this.clients[id] = client;
    },

    getDOMObjectPosition: function (obj, stopObj) {
        // get absolute coordinates for dom element
        var info = {
            left: 0,
            top: 0,
            width: obj.width ? obj.width : obj.offsetWidth,
            height: obj.height ? obj.height : obj.offsetHeight
        };

        if (obj && (obj != stopObj)) {
			info.left += obj.offsetLeft;
            info.top += obj.offsetTop;
        }

        return info;
    },

    Client: function (elem) {
        // constructor for new simple upload client
        this.handlers = {};

        // unique ID
        this.id = ZeroClipboard.nextId++;
        this.movieId = 'ZeroClipboardMovie_' + this.id;

        // register client with singleton to receive flash events
        ZeroClipboard.register(this.id, this);

        // create movie
        if (elem) this.glue(elem);
    }
};

ZeroClipboard.Client.prototype = {

    id: 0,
    // unique ID for us
    ready: false,
    // whether movie is ready to receive events or not
    movie: null,
    // reference to movie object
    clipText: '',
    // text to copy to clipboard
    handCursorEnabled: true,
    // whether to show hand cursor, or default pointer cursor
    cssEffects: true,
    // enable CSS mouse effects on dom container
    handlers: null,
    // user event handlers
    glue: function (elem, appendElem, stylesToAdd) {
        // glue to DOM element
        // elem can be ID or actual DOM element object
        this.domElement = ZeroClipboard.$(elem);

        // float just above object, or zIndex 99 if dom element isn't set
        var zIndex = 99;
        if (this.domElement.style.zIndex) {
            zIndex = parseInt(this.domElement.style.zIndex, 10) + 1;
        }

        if (typeof(appendElem) == 'string') {
            appendElem = ZeroClipboard.$(appendElem);
        } else if (typeof(appendElem) == 'undefined') {
            appendElem = document.getElementsByTagName('body')[0];
        }

        // find X/Y position of domElement
        var box = ZeroClipboard.getDOMObjectPosition(this.domElement, appendElem);

        // create floating DIV above element
        this.div = document.createElement('div');
        this.div.className = "zclip";
        this.div.id = "zclip-" + this.movieId;

        // Tom: This script assumes jQuery is set to be $, which it isn't in our case.
        SDE.$(this.domElement).data('zclipId', 'zclip-' + this.movieId);
        var style = this.div.style;
        style.position = 'absolute';
        style.left = '' + box.left + 'px';
        style.top = '' + box.top + 'px';
        style.width = '' + box.width + 'px';
        style.height = '' + box.height + 'px';
        style.zIndex = zIndex;

        if (typeof(stylesToAdd) == 'object') {
            for (addedStyle in stylesToAdd) {
                style[addedStyle] = stylesToAdd[addedStyle];
            }
        }

        // style.backgroundColor = '#f00'; // debug
        appendElem.appendChild(this.div);

        this.div.innerHTML = this.getHTML(box.width, box.height);
    },

    getHTML: function (width, height) {
        // return HTML for movie
        var html = '';
        var flashvars = 'id=' + this.id + '&width=' + width + '&height=' + height;

        if (navigator.userAgent.match(/MSIE/)) {
            // IE gets an OBJECT tag
            var protocol = location.href.match(/^https/i) ? 'https://' : 'http://';
            html += '<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="' + protocol + 'download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0" width="' + width + '" height="' + height + '" id="' + this.movieId + '" align="middle"><param name="allowScriptAccess" value="always" /><param name="allowFullScreen" value="false" /><param name="movie" value="' + ZeroClipboard.moviePath + '" /><param name="loop" value="false" /><param name="menu" value="false" /><param name="quality" value="best" /><param name="bgcolor" value="#ffffff" /><param name="flashvars" value="' + flashvars + '"/><param name="wmode" value="transparent"/></object>';
        } else {
            // all other browsers get an EMBED tag
            html += '<embed id="' + this.movieId + '" src="' + ZeroClipboard.moviePath + '" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="' + width + '" height="' + height + '" name="' + this.movieId + '" align="middle" allowScriptAccess="always" allowFullScreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="' + flashvars + '" wmode="transparent" />';
        }
        return html;
    },

    hide: function () {
        // temporarily hide floater offscreen
        if (this.div) {
            this.div.style.left = '-2000px';
        }
    },

    show: function () {
        // show ourselves after a call to hide()
        this.reposition();
    },

    destroy: function () {
        // destroy control and floater
        if (this.domElement && this.div) {
            this.hide();
            this.div.innerHTML = '';

            var body = document.getElementsByTagName('body')[0];
            try {
                body.removeChild(this.div);
            } catch (e) {;
            }

            this.domElement = null;
            this.div = null;
        }
    },

    reposition: function (elem) {
        // reposition our floating div, optionally to new container
        // warning: container CANNOT change size, only position
        if (elem) {
            this.domElement = ZeroClipboard.$(elem);
            if (!this.domElement) this.hide();
        }

        if (this.domElement && this.div) {
            var box = ZeroClipboard.getDOMObjectPosition(this.domElement);
            var style = this.div.style;
            style.left = '' + box.left + 'px';
            style.top = '' + box.top + 'px';
        }
    },

    setText: function (newText) {
        // set text to be copied to clipboard
        this.clipText = newText;
        if (this.ready) {
            this.movie.setText(newText);
        }
    },

    addEventListener: function (eventName, func) {
        // add user event listener for event
        // event types: load, queueStart, fileStart, fileComplete, queueComplete, progress, error, cancel
        eventName = eventName.toString().toLowerCase().replace(/^on/, '');
        if (!this.handlers[eventName]) {
            this.handlers[eventName] = [];
        }
        this.handlers[eventName].push(func);
    },

    setHandCursor: function (enabled) {
        // enable hand cursor (true), or default arrow cursor (false)
        this.handCursorEnabled = enabled;
        if (this.ready) {
            this.movie.setHandCursor(enabled);
        }
    },

    setCSSEffects: function (enabled) {
        // enable or disable CSS effects on DOM container
        this.cssEffects = !! enabled;
    },

    receiveEvent: function (eventName, args) {
        // receive event from flash
        eventName = eventName.toString().toLowerCase().replace(/^on/, '');

        // special behavior for certain events
        switch (eventName) {
        case 'load':
            // movie claims it is ready, but in IE this isn't always the case...
            // bug fix: Cannot extend EMBED DOM elements in Firefox, must use traditional function
            this.movie = document.getElementById(this.movieId);
            if (!this.movie) {
                var self = this;
                setTimeout(function () {
                    self.receiveEvent('load', null);
                }, 1);
                return;
            }

            // firefox on pc needs a "kick" in order to set these in certain cases
            if (!this.ready && navigator.userAgent.match(/Firefox/) && navigator.userAgent.match(/Windows/)) {
                var self = this;
                setTimeout(function () {
                    self.receiveEvent('load', null);
                }, 100);
                this.ready = true;
                return;
            }

            this.ready = true;
            try {
                this.movie.setText(this.clipText);
            } catch (e) {}
            try {
                this.movie.setHandCursor(this.handCursorEnabled);
            } catch (e) {}
            break;

        case 'mouseover':
            if (this.domElement && this.cssEffects) {
                this.domElement.addClass('hover');
                if (this.recoverActive) {
                    this.domElement.addClass('active');
                }


            }


            break;

        case 'mouseout':
            if (this.domElement && this.cssEffects) {
                this.recoverActive = false;
                if (this.domElement.hasClass('active')) {
                    this.domElement.removeClass('active');
                    this.recoverActive = true;
                }
                this.domElement.removeClass('hover');

            }
            break;

        case 'mousedown':
            if (this.domElement && this.cssEffects) {
                this.domElement.addClass('active');
            }
            break;

        case 'mouseup':
            if (this.domElement && this.cssEffects) {
                this.domElement.removeClass('active');
                this.recoverActive = false;
            }
            break;
        } // switch eventName
        if (this.handlers[eventName]) {
            for (var idx = 0, len = this.handlers[eventName].length; idx < len; idx++) {
                var func = this.handlers[eventName][idx];

                if (typeof(func) == 'function') {
                    // actual function reference
                    func(this, args);
                } else if ((typeof(func) == 'object') && (func.length == 2)) {
                    // PHP style object + method, i.e. [myObject, 'myMethod']
                    func[0][func[1]](this, args);
                } else if (typeof(func) == 'string') {
                    // name of function
                    window[func](this, args);
                }
            } // foreach event handler defined
        } // user defined handler for event
    }

};	

/*dangling: false */
/*global jQuery, swfobject, tracking, _, window, document */
/**
 *  The SDE object is the single global object (that should be) created by the
 *  code written for Sueddeutsche.de.  It acts as a namespace for the various
 *  helper functions, classes, and modules that we write, and ought be included
 *  everywhere on the site.
 *
 *  @module SDE
 *  @title  SDE Global Object
 */
var SDE = SDE || {};

/**
 *  Merge two objects, creating a new object containing all the
 *  properties of both.
 *
 *  @method mergeObjects
 *  @static
 *
 *  @param  {Object}    obj1    The first object.
 *  @param  {Object}    obj2    The second object.
 *  @param  {Boolean}   overwrite   If true, properties of the second object
 *                                  will overwrite the properties of the first.
 *                                  If false, properties of the first will not
 *                                  be overwritten.  Defaults to `true`.
 *
 *  @return {Object}    The new, merged object
 */
SDE.mergeObjects = function (obj1, obj2, overwrite) {
    var obj = {}, key;

    overwrite = overwrite === undefined ? true : overwrite;

    for (key in obj1) {
        if (obj1.hasOwnProperty(key)) {
            obj[key] = obj1[key];
        }
    }
    for (key in obj2) {
        if (obj2.hasOwnProperty(key) && (obj[key] === undefined || overwrite)) {
            obj[key] = obj2[key];
        }
    }
    return obj;
};

/**
 *  Generate a (more or less) unique ID
 *
 *  @method uid
 *  @static
 *  @param  {Number}   length  The length of the UID.  Defaults to 16 characters.
 *
 *  @return {String}    The generated ID.
 */
SDE.uid = function (length) {
    var uid = '', i;

    if (!length || length <= 0) {
        length = 16;
    }

    for (i = 0; i < length; i = i + 1) {
        uid += String.fromCharCode(Math.floor(Math.random() * 26) + 97);
    }
    return uid;
};

/**
 *  Returns the requested namespace under SDE, creating it if necessary.
 *  Copied almost completely from YUI, both in concept and implementation.
 *
 *  <pre><code>
 *      SDE.namespace( 'spiele' );      // returns a reference to `SDE.spiele`
 *      SDE.namespace( 'SDE.spiele' );  // same as above
 *      SDE.namespace( 'spiele.duel' ); // also works with multiple packages
 *  </code></pre>
 *
 *  @method namespace
 *  @static
 *
 *  @param  {String}    n   The namespace to (potentially) create and return
 *  @return {Object}    A reference to the requested namespace object
 */
SDE.namespace = function (n) {
    var obj = SDE, i = (n[0] === 'SDE') ? 1 : 0;

    n = n.split('.');
    for (i; i < n.length; i = i + 1) {
        obj[n[i]] = obj[n[i]] || {};
        obj = obj[n[i]];
    }
    return obj;
};

/**
 *  Extend an object by inheriting it's prototype from one constructor
 *  to another.  Cloning the implementation from Google's Closure library
 *  but with a name that I think makes more sense.
 *
 *  @link   http://closure-library.googlecode.com/svn/docs/closure_goog_base.js.html#goog.inherits
 *
 *  @method extend
 *  @static
 *
 *  @param  {Object}    parentObj   The object to be extended.
 *  @param  {Object}    childObj    The object extending `parentObj`.
 */
SDE.extend = function (parentObj, childObj) {
    /** @constructor */
    function Temp() {}
    Temp.prototype = parentObj.prototype;
    childObj.superClass_ = parentObj.prototype;
    childObj.prototype = new Temp();
    /** @override */
    childObj.prototype.constructor = childObj;
};

if (window.jQuery) {
    /**
     *  jQuery is folded into the SDE namespace, and 'noConflict'ed.
     *  References to 'SDE.$' will, therefore, always refer to a jQuery
     *  object of the proper version, regardless of the third-party scripts
     *  that get included on the site.
     *
     *  @property   $
     *  @type       jQuery
     */
    SDE.$ = jQuery;
    SDE.$(document).ready(function () {
        jQuery.noConflict(true);
    });
}

if (window._) {
    /**
     * LoDash (an optimised Underscore.js) is included as well, using noConflict.
     *
     * @property    _
     * @type        Object
     */
    SDE._ = _.noConflict();
}

if (window.swfobject) {
    /**
     *  SWFObject 2.2 is folded into the SDE namespace, and removed from the
     *  global namespace.
     *
     *  @property   swfobject
     *  @type       Object
     */
    SDE.swfobject = swfobject;
    swfobject.noConflict();
}

if (window.tracking) {
    /**
     *  LinkTracking library, folded into the SDE namespace, and removed from the
     *  global namespace.
     *
     *  @property   tracking
     *  @type       Object
     */
    SDE.tracking = tracking;
    tracking.noConflict();
}

// Finally, define the init-namespace
SDE.init = SDE.init || function () {
};/*global SDE, console, window */
(function () {
    /**
     *  Logging functions (Really nothing more than a wrapper around
     *  the bits of `console` that I find most useful. Logging is disabled
     *  in production unless in debug mode, and certain types of
     *  logging can be turned off via `#no[type]` hashes appended to the URL.
     *  The system understands:
     *
     *  *   `noinfo`:   Disables `info` log messages.
     *  *   `nowarn`:   Disables `warning` log messages.
     *  *   `noerror`:  Disables `error` log messages.
     *  *   `sdedebug`: Overrides the `SDE.is_production` property to force
     *                  debug logging, even on live machines.
     *  Usage:
     *
     *      SDE.log( 'OMG!  This is an object: %o', object );  // Aliased to `SDE.log.info`
     *
     *
     *  @author     Mike West <Mike.West@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @requires   SDE
     *  @class      SDE.log
     *  @static
     */
    SDE.namespace('log');

    /**
     *  Determines if the current session has the ability to log the requested
     *  type of message, and if the environment allows logging (e.g. not
     *  production).
     *
     *  Additionally, examines the current URL's hash value.  If the hash
     *  contains `sdedebug`, logging will be enabled
     *
     *  @method _loggable
     *  @static
     *  @protected
     *
     *  @param  {String}    method  The logging method to test.
     */
    function _loggable(method) {
        var isLogAllowed    = window.location.host.match(/localhost/) || window.location.search.match(/sdedebug=true/),
            isMethodAllowed = !window.location.hash.match('no' + method);
        try {
            return isLogAllowed && isMethodAllowed && console && console[method] && console[method].apply;
        } catch (e) {
            return false;
        }

    }

    /**
     *  Log an informational message to the console. Accepts an arbitrary number of arguments, `printf` style.
     *
     *  @method info
     *  @public
     *  @static
     */
    function _info() {
        SDE.log.history.push({ type: 'info', args: arguments });
        return _loggable('info') && (console.info.apply(console, arguments) === 'undefined');
    }

    /**
     *  Log a warning to the console. Accepts an arbitrary number of arguments, `printf` style.
     *
     *  @method warn
     *  @public
     *  @static
     */
    function _warn() {
        SDE.log.history.push({ type: 'warn', args: arguments });
        return _loggable('warn') && (console.warn.apply(console, arguments) === 'undefined');
    }

    /**
     *  Log an error to the console. Accepts an arbitrary number of arguments, `printf` style.
     *
     *  @method error
     *  @public
     *  @static
     */
    function _error() {
        SDE.log.history.push({ type: 'error', args: arguments });
        return _loggable('error') && (console.error.apply(console, arguments) === 'undefined');
    }

    /**
     *  Start a logging group. Accepts an arbitrary number of arguments, `printf` style.
     *
     *  @method group
     *  @public
     *  @static
     */
    function _group() {
        SDE.log.history.push({ type: 'group', args: arguments });
        return _loggable('group') && (console.group.apply(console, arguments) === 'undefined');
    }

    /**
     *  End a logging group. Accepts an arbitrary number of arguments, `printf` style.
     *
     *  @method groupEnd
     *  @public
     *  @static
     */
    function _groupEnd() {
        SDE.log.history.push({ type: 'groupEnd', args: arguments });
        return _loggable('groupEnd') && (console.groupEnd.apply(console, arguments) === 'undefined');
    }

    SDE.log = function () {
        SDE.log.info.apply(SDE.log.info, arguments);
    };

    /**
     *  Regardless of whether or not logging is enabled via the browser's
     *  `console` object, logged messages are stored in `SDE.log.history`
     *  as a simple array of log objects in the form:
     *
     *      [
     *          {
     *              type:       '[info/log/warn/error]',
     *              arguments:  [ arg1, arg2, arg3, etc. ]
     *          },
     *          ...
     *      ]
     *
     *  This allows you to (somehow) inspect the log regardless of
     *  situation.
     *
     *  @property   history
     *  @type       Array
     *  @default    []
     */
    SDE.log.history = [];

    // Set up public aliases:
    SDE.log.info = _info;
    SDE.log.warn = _warn;
    SDE.log.warning = _warn;        // Aliasing `warning` to `warn`, as I've typed it ~10 times now.  :)
    SDE.log.error = _error;
    SDE.log.group = _group;
    SDE.log.groupEnd = _groupEnd;
}());
/*global SDE, document */
/**
 *  Initialization events/bindings
 *
 *  @module     init
 *  @requires   SDE
 *  @class      SDE.init
 *  @static
 */
(function () {

    SDE.namespace('init');
    SDE.init = function () {
    };

    SDE.namespace('events.ContentReady');
    SDE.events.ContentReady = {
        /**
         *  Triggered when the Cinemasearch-Modul is ready for initalization.
         *
         *  @event  SDE.events.ContentReady.cinemasearch
         *  @see    .../src/js/init/cinemasearch.js
         */
        'cinemasearch': 'SDE_events_ContentReady_cinemasearch',

        /**
         *  Triggered when the Commenst are ready for initalization.
         *
         *  @event  SDE.events.ContentReady.comments
         *  @see    .../src/js/init/comments.js
         */
        'comments': 'SDE_events_ContentReady_comments',

        /**
         *  Triggered when the Eventcalendar Search-Modul is ready for initalization.
         *
         *  @event  SDE.events.ContentReady.eventcalendar
         *  @see    .../src/js/init/eventcalendar.js
         */
        'eventcalendar': 'SDE_events_ContentReady_eventcalendar',

        '_': '_'
    };

    /**
     *  The element on which events will be triggered.
     *
     *  @property   eventTriggeree_
     *  @private
     *  @static
     */
    var eventTriggeree_ = SDE.$(document.createElement('div'));

    /**
     *  Bind a handler to an init event.
     *
     *  @method bind
     *  @static
     *
     *  @param  e       {String}    The event to be bound
     *  @param  handler {Function}  The event's callback
     */
    SDE.init.bind = function _bindInitEvent(e, handler) {
        SDE.log('Binding handler to `%s`', e);
        eventTriggeree_.bind(
            e,
            function (e, data) {
                handler(e, data);
                SDE.log.groupEnd();
            }
        );
    };

    /**
     *  Trigger an init event.
     *
     *  @method trigger
     *  @static
     *
     *  @param  e       {String}    The event to trigger
     *  @param  data    {Object}     Data to pass to the event's callback
     */
    SDE.init.trigger = function _triggerInitEvent(e, data) {
        if (eventTriggeree_.data('events')[e]) {
            SDE.log.group('Triggering handler for `%s`', e);
            if (data) {
                SDE.log('Data provided: %o', data);
            }
            eventTriggeree_.trigger(e, [ data ]);
        } else {
            SDE.log.warn('Triggering handler for `%s`, but no handlers exist.  Data: %o', e, data);
        }
    };
}());
/*global SDE, document */
(function () {

    /**
     * Initialiser for widgets, capable of dealing with widgets with constructors, and widgets
     * with init-functions.
     * @param {String} widgetName The name of the widget to initialise
     * @param {Object} params The parameters to use in the initialisation
     * @return {Object} an initialised widget.
     */
    function initWidget(widgetName, params) {
        var Constructor = SDE.widget[widgetName].init || SDE.widget[widgetName];

        return new Constructor(params);
    }

    /**
     * This function is responsible for finding all nodes that want to be initialised,
     * and, based on the configuration in the 'data-bind' attribute, initialise them.
     * It can also initialise widgets for a given node.
     *
     * The format of the data-bind attribute is 'functionName {"jsonKey": "jsonValue"}' for
     * functions, and 'widget.WidgetName {"jsonKey": "jsonValue"}' for widgets.
     *
     * Note that the parameters have to be correctly formatted JSON, not JS-objects.
     */
    function initNodes() {
        var nodes = SDE.$('[data-bind]');

        nodes.each(function () {
            var node = SDE.$(this),
                attributes = node.attr('data-bind'),
                fnObj = SDE.utils.parameterParser(attributes),
                fn = fnObj.fn,
                params = fnObj.params,
                widgetName;

            SDE.log.group('Initialising with attributes "' + attributes + '"');

            params.node = params.node || node;

            // data-bind='eventName {"param1": "value1" ...}'
            if (fn.match(/^widget/i)) {
                /*jslint regexp: false */
                /*jshint regexp: false */
                widgetName = fn.replace(/^widget\.(.*)/i, '$1');
                if (SDE.widget[widgetName]) {
                    try {
                        initWidget(widgetName, params);
                    } catch (err) {
                        SDE.log.error('Could not initialise widget ' + widgetName + ': ' + err);
                    }

                }
            } else if (fn && SDE.init[fn]) {
                try {
                    SDE.init[fn](params);
                } catch (err2) {
                    SDE.log.error('Could not execute init ' + fn + ': ' + err2);
                }
            }

            SDE.log.groupEnd();
        });
    }

    /**
     * Sorter for functions, that checks to see if a priority (0- .., where 0 is top) has been set, and uses that
     * as a sort-value. If no priority is set, it defaults to 5.
     * @param item {Object|Function} The thing to look at
     * @param item.priority {Number} The priority.
     * @return {Number} priority
     */
    function prioritySorter(item) {
        return (SDE._.isObject(item) && item.priority) ? item.priority : 5;
    }

    /**
     * Returns an iterator function for the given array.
     * @param fnList    {Array}
     * @return {Function}
     */
    function buildIterator(fnList) {
        return function () {
            var sortedList = SDE._.sortBy(fnList, prioritySorter);
            SDE._.each(sortedList, function (fn) {
                if (SDE._.isObject(fn) && fn.fn) {
                    fn.fn();
                } else if (SDE._.isFunction(fn)) {
                    fn();
                }
            });
        };
    }

    SDE.init.headerFns = [];
    SDE.init.topFns = [];
    SDE.init.readyFns = [
        {fn: initNodes, priority: 6}
    ];

    SDE.init.initHeader = buildIterator(SDE.init.headerFns);
    SDE.init.initTop = buildIterator(SDE.init.topFns);

    SDE.$(document).on('ready', function () {
        if (SDE.init.readyFns.length) {
            buildIterator(SDE.init.readyFns)();
        }
    });
}());/*global SDE, window, fontdetect, TypeHelpers, navigator, setTimeout, document */
(function () {
    /**
     * Initialisation functions that are common to all site types (mobile, www, app).
     *  @author     Thomas Andersson <Thomas.Andersson@netlight.com>
     *  @version    $Id$
     */

    var antiAdBlockDetection,
        browserDetection,
        clickFunction,
        fontDetection;

    /*
     *  Every <button> element with css-class 'imagelabel' become clickhandlers,
     *  but the location changes only when the attribute 'data-href' is set.
     */
    clickFunction = function () {

        SDE.$('.imagelabel').click(function (e) {
            var element = SDE.$(this),
                target = element.attr('data-href'),
                link = element.closest('a');

            // In app mode, let the event bubble to the nearest
            // anchor tag, and set the target of that anchor to
            // that of the button. This is to avoid illegally
            // having nested a-tags, and a-tags are required for
            // the apps to get real click-events.
            if (element.attr('data-isapp') === 'true') {
                if (link.length > 0) {
                    link.attr('href', target);
                    link.attr('data-pagetype', element.attr('data-pagetype'));
                    link.attr('data-id', element.attr('data-id'));
                }
            } else {
                if (target) {
                    e.preventDefault();
                    if (element.attr('data-pagetype') === 'EXTERNAL') {
                        window.open(target, '_blank');
                    } else {
                        window.location.href = target;
                    }
                }
            }
        });

    };

    /*
     * Init for the browser detection
     *
     * Check which browser and system on user's client. We need it for
     * tracking them.
     */

    browserDetection = {

        init: function () {
            var browser = this.search(this.dataBrowser),
                system = this.search(this.dataSystem);
            return browser + '.' + system;
        },

        search: function (data) {
            var i, uagent;
            for (i = 0; i < data.length; i = i + 1) {
                uagent = navigator.userAgent.toLowerCase();
                if (uagent) {
                    if (uagent.indexOf(data[i].subString) !== -1) {
                        return data[i].identity;
                    }
                }
            }

            return 'other';
        },

        dataBrowser: [
            {
                subString: 'chrome',
                identity:  'chrome'
            },
            {
                subString: 'firefox',
                identity:  'firefox'
            },
            {
                subString: 'msie',
                identity:  'internet-explorer'
            },
            {
                subString: 'safari',
                identity:  'safari'
            },
            {
                subString: 'opera',
                identity:  'opera'
            }
        ],
        dataSystem:  [
            {
                subString: 'mac',
                identity:  'macintosh'
            },
            {
                subString: 'linux',
                identity:  'linux'
            },
            {
                subString: 'windows nt 5.1',
                identity:  'windows-xp'
            },
            {
                subString: 'windows nt 5.2',
                identity:  'windows-xp'
            },
            {
                subString: 'windows nt 6.0',
                identity:  'windows-vista'
            },
            {
                subString: 'windows nt 6.1',
                identity:  'windows-7'
            },
            {
                subString: 'windows nt 6.2',
                identity:  'windows-8'
            },
            {
                subString: 'iphone',
                identity:  'ios-mobile'
            },
            {
                subString: 'ipod',
                identity:  'ios-mobile'
            },
            {
                subString: 'ipad',
                identity:  'ios-tablet'
            },
            {
                subString: 'android',
                identity:  'android-mobile'
            }
        ]
    };

    /*
     * Init for the font detection
     *
     * Initializes the fontdetect to check if user's client has an active
     * "clear type" and if the device can load our (main)font.
     * That will be 'SZSansRegular'. If the device won't load them, so we fall back
     * to 'Arial' and set a CSS class in <body> tag.
     *
     * First we check if "clear type" is active (or not, because only chrome on windows xp
     * will be return false); then we check if new fonts can be
     * loaded ...
     */

    fontDetection = function () {

        var trackingname = '',
            cookievalue = '';

        if (TypeHelpers.insertClasses()) {
            // User has active "clear type". So we try to get new SZ fonts.
            fontdetect.onFontLoaded('SZSansRegular',
                function () {
                    SDE.$('#fontdetectHelper').remove();
                },
                function () {
                    document.documentElement.className += ' noSZfonts';
                    SDE.$('#fontdetectHelper').remove();
                },
                { msTimeout: 3000 });
        }

        setTimeout(function () {
            if (SDE.$('html').hasClass('noFontSmooth')) {
                trackingname = 'noaliasing.fallbackfonts.';
                cookievalue = 'fallback';
            } else if (SDE.$('html').hasClass('noSZfonts')) {
                trackingname = 'aliasing.fallbackfonts.';
                cookievalue = 'fallback';
            } else {
                trackingname = 'aliasing.newfonts.';
                cookievalue = 'newfonts';
            }
            // Set tracking
            SDE.advertisement.SiteStat.track('fonttracking.' + trackingname + browserDetection.init());
            // Set cookie that we have detect fonts
            SDE.$.cookies.set('sde_fontCheck', cookievalue);
        }, 3500);
    };

    /**
     * Init Anti-Ad-Block Campaign
     *
     * When ads will blocked, we show a darken information at top of our site, and animate
     * user to set our site on adblocker's whitelist.
     */

    antiAdBlockDetection = function () {

        if (window.sde_ab && navigator.userAgent.toLowerCase().search('ipad') === -1) {
        /*
            var html =
                '<div>' +
                '  <div>' +
                '    <span>Stefan Plöchinger, Chefredakteur Süddeutsche.de</span>' +
                '    <p>Liebe Leserin, lieber Leser,</p>' +
                '    <p>' +
                '      ich freue mich, dass Sie Süddeutsche.de lesen. Leider benutzen Sie einen Adblocker, der uns Probleme ' +
                '      macht - wir finanzieren unseren Journalismus im Internet vor allem durch Anzeigenerlöse und sind essentiell ' +
                '      darauf angewiesen. <b>Ich bitte Sie daher, Ihren Adblocker zumindest für unsere Seite zu deaktivieren.</b>' +
                '    </p>' +
                '    <p>' +
                '      Wieso und wie, will ich Ihnen gerne erklären.<br>' +
                '      Es geht ganz einfach. <a href="http://www.sueddeutsche.de/sde-ab-kampagne">Mehr erfahren ...</a>' +
                '    </p>' +
                '  </div>' +
                '</div>';

            SDE.$('body').prepend(html);

            // track when message will shown
            SDE.advertisement.SiteStat.track('anti-ab-kampagne.' + browserDetection.init());
         */
        }
    };

    if (SDE.init) {
        if (SDE._.isArray(SDE.init.topFns)) {
            if (!SDE.$.cookies.get('sde_fontCheck')) {
                SDE.init.topFns.push(fontDetection);
            } else if (SDE.$.cookies.get('sde_fontCheck') === 'fallback') {
                document.documentElement.className += ' noSZfonts';
            }
        }

        if (SDE._.isArray(SDE.init.topFns)) {
            SDE.init.topFns.push(antiAdBlockDetection);
        }

        if (SDE._.isArray(SDE.init.readyFns)) {
            SDE.init.readyFns.push(clickFunction);
        }
    }

}());/*global SDE */
/**
 *  Utilities useful across the Sueddeutsche.de website live in this
 *  namespace, generally as subclasses.
 *
 *  @namespace  SDE
 *  @module     utils
 *  @static
 *
 *  @title  SDE Utility Functions
 */
(function () {
    SDE.namespace('utils');

    /**
     * Parses a given string for a function-name and a JSON-object with parameters. The expected form
     * is "fnName {"param1":"value1" ..}" or "widget.widgetName {"param1":"value1" ..}".
     *
     * @param functionString - The string to parse
     * @return {Object} The parsed result, {"fn": "fnName", "params": {"param1", "value1"}}
     */
    SDE.utils.parameterParser = function (functionString) {
        /*jslint regexp: false */
        /*jshint regexp: false */
        var fn = functionString.replace(/^([\w\.]+)([\s\S]*.*)?/, '$1'),
            params = functionString.replace(/^([\w\.]+)\s*(\{.*\})?/, '$2') || '{}';

        try {
            params = SDE.$.evalJSON(params);
        } catch (e) {
            SDE.log.error('Could not parse parameters for init "' + fn + '"');
            params = {};
        }

        return {
            fn:     fn,
            params: params
        };
    };

    /**
     *  Validate a given email address: @TODO: move this to `utils`.
     *  Borrowed the code from the [jQuery validation plugin][1], which
     *  in turn borrowed it from [Scott Gonzalez][2].
     *
     *  [1]:    http://ajax.microsoft.com/ajax/jquery.validate/1.7/jquery.validate.js
     *  [2]:    http://projects.scottsplayground.com/email_address_validation/
     *
     *  I'm not even going to pretend that I've walked through the regex
     *  myself: I'm blindly trusting that it works.  :)
     *
     *  @method isValidEmail
     *  @protected
     *
     *  @param  {String}    email   The string to validate
     *
     *  @return {Boolean}
     */

    /*jslint regexp: true */
    SDE.utils.isValidEmail = function (email) {
        var elist,
            i,
            returnVal = false;
        if (email.search(/,/) !== -1) {
            elist = email.split(',');
            for (i = 0; i < elist.length; i = i + 1) {
                if ((/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i).test(SDE.$.trim(elist[i]))) {
                    SDE.log('Valid email adress ' + elist[i]);
                    returnVal = true;
                } else {
                    SDE.log('Invalid email address ' + elist[i]);
                    returnVal = false;
                    break;
                }
            }
        } else {
            returnVal = (/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i).test(email);
        }
        return returnVal;
    };

}());



/*global SDE */
(function () {
    /**
     *  A library-neutral configuration management class, used within other
     *  components to deal with options specified when creating objects.
     *
     *  <pre><code>
     *      var defaults    = { 'param1': 1, 'param2': null },
     *          userconf    = { 'param2': 3, 'x': 100 },
     *          config      = new SDE.utils.Config( defaults, userconf );
     *
     *      config.get( 'param1' ); // 1
     *      config.get( 'param2' ); // 3
     *      config.get( 'x' );      // undefined (it wasn't in `defaults`)
     *  </code></pre>
     *
     *  @author     Mike West <Mike.West@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace      SDE.utils
     *  @class          Config
     *  @constructor
     *
     *  @param  {Object}    base     The components's default configuration, a
     *                               simple object literal containing key value
     *                               pairs of expected configuration options.
     *  @param  {Object}    userconf The user's configuration.
     */
    SDE.namespace('utils.Config');

    SDE.utils.Config = function (base, userconf) {
        this._config = {};
        if (!userconf) {
            userconf = {};
        }

        var key;
        for (key in base) {
            if (base.hasOwnProperty(key)) {
                if (userconf[key] !== undefined) {
                    this._config[key] = userconf[key];
                } else if (userconf.get && (userconf.get(key) !== undefined)) {
                    this._config[key] = userconf.get(key);
                } else {
                    this._config[key] = base[key];
                }
            }
        }
    };

    SDE.utils.Config.prototype = {
        /**
         *  Returns a config value, or `undefined` if the key doesn't exist.
         *
         *  @method get
         *  @param  {String}    key The key to lookup in the config table.
         *  @return {Object}    Returns the value for the specified key, or `undefined`
         */
        get: function (key) {
            return this._config[key];
        },

        /**
         *  Sets a config value
         *
         *  @method set
         *  @param  {String}    key     The key to set.
         *  @param  {Object}    value   The value to set.
         */
        set: function (key, value) {
            this._config[key] = value;
        }

    };
}());
/*global SDE, window, swfobject */
(function () {

    /**
     *  Helper functions for embedding flash objects via <code>SWFObject</code>
     *
     *  @author     Mike West <Mike.West@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace      SDE.utils
     *  @class          SWF
     *  @static
     *
     *  @requires       SDE
     */

    SDE.namespace('utils.SWF');

    /**
     *  The location of the "expressInstall" flash file that SWFObject will
     *  load if the user's flash version is out of date ("out of date" being
     *  any version less than `SDE.utils.SWF.baselineVersion`.
     *
     *  @property   expressInstall
     *  @type       String
     *  @default    '/staticassets/other/expressInstall.swf'
     */

    SDE.utils.SWF.expressInstall = '/staticassets/other/expressInstall.swf';

    /**
     *  The minimum version of Flash necessary for a client to play
     *  flash on SDE sites.
     *
     *  @property   baselineVersion
     *  @type       String
     *  @default    '9.0.0'
     */

    SDE.utils.SWF.baselineVersion = '9.0.0';

    /**
     *  Embed an SWF.
     *
     *  <pre><code>
     *      SDE.utils.SWF.embed( {
     *          'swf':          obj.attr( 'href' ),
     *          'height':       height,
     *          'width':        width,
     *          'toReplace':    id,
     *          'vars':         config.get( 'vars' ),
     *          'params':       {},
     *          'attributes':   {}
     *      } );
     *  </code></pre>
     *
     *  @method embed
     *  @param  {Object}    userConfig  A configuration object specifying how exactly
     *                              some SWF should be embedded.
     *  @return if there is no flash in the correct version this method will return false, otherwise true
     */
    SDE.utils.SWF.embed = function (userConfig) {

        SDE.log('Embedding an SWF: userConfig:%o', userConfig);
        var baseConfig = {
                /**
                 *  The SWF to load (SWFObject)
                 *
                 *  @config     SWF
                 *  @type       {String}
                 *  @default    null
                 */
                'swf':        null,
                /**
                 *  The Video to load (HTML5)
                 *
                 *  @config     video
                 *  @type       {String}
                 *  @default    null
                 */
                'video':      null,
                /**
                 *  The SWF's width
                 *
                 *  @config     width
                 *  @type       {Number}
                 *  @default    null
                 */
                'width':      null,
                /**
                 *  The SWF's height
                 *
                 *  @config     height
                 *  @type       {Number}
                 *  @default    null
                 */
                'height':     null,
                /**
                 *  The ID of the DOM element to replace with the
                 *  flash object
                 *
                 *  @config     toReplace
                 *  @type       {String}
                 *  @default    null
                 */
                'toReplace':  null,
                /**
                 *  Image which is the default when user cannot play video in SWF/MP4
                 *
                 *  @config     image
                 *  @type       {String}
                 *  @default    null
                 */
                'image':      null,
                /**
                 *  The values to pass into the flash object as vars
                 *
                 *  @config     vars
                 *  @type       {Object}
                 *  @default    {}
                 */
                'vars':       {},
                /**
                 *  The values to pass into the flash object as params
                 *
                 *  @config     params
                 *  @type       {Object}
                 *  @default    {}
                 */
                'params':     {},
                /**
                 *  The values to pass into the flash object as attributes
                 *
                 *  @config     attributes
                 *  @type       {Object}
                 *  @default    {}
                 */
                'attributes': {}
            },
            baseParams = {
                'quality':           'high',
                'allowScriptAccess': 'always',
                'allowFullScreen':   'true',
                'wmode':             'transparent',
                'scale':             'showall',
                'devicefont':        'false',
                'bgcolor':           '#ffffff'
            },
            param,
            config;

        for (param in baseParams) {
            if (baseParams.hasOwnProperty(param) && !userConfig.params[param]) {
                userConfig.params[param] = baseParams[param];
            }
        }

        userConfig.params.width = userConfig.width;
        userConfig.params.height = userConfig.height;

        config = new SDE.utils.Config(baseConfig, userConfig);

        SDE.log('Embed Flash Object: Show Flash');

        return SDE.swfobject.embedSWF(
            config.get('swf'),
            config.get('toReplace'),
            config.get('width'),
            config.get('height'),
            SDE.utils.SWF.baselineVersion,
            SDE.utils.SWF.expressInstall,
            config.get('vars'),
            config.get('params'),
            config.get('attributes')
        );
    };
}());
/*global SDE, window, videoData, sasmobile, navigator, document, setTimeout */
(function () {

    /**
     *  The Video widget handles loading of html5player.
     *
     *  <pre><code>
     *      ( {
     *          'video'      : "[PATH TO VIDEO IN MP4 FORMAT]",
     *          'width'      : "[WIDTH OF VIDEO]",
     *          'height'     : "[HEIGHT OF VIDEO]",
     *          'toReplace'  : "[ELEMENT WHICH WILL BE REPLACED BY VIDEO TAG]",
     *          'image'      : "[PATH TO ALTERNATIVE IMAGE]",
     *          'cookie'     : "[NAME OF COOKIE]"
     *      } );
     *  </code></pre>
     *
     *  @author     Jochen Duerr <jochen.duerr@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace  SDE
     *  @class      utils.VideoWithHtml5
     *
     *  @constructor
     *  @param  {Element}    domObj  The DOM object in which the tab is rooted
     *  @param  {Config}     conf    The Videos' config object.
     *
     *  @requires SDE
     */

    SDE.namespace('utils.VideoWithHtml5');

    /**
     * Config which describes all values which we initial need.
     *
     * @property baseConfig
     * @private
     * @final
     * @static
     */

    var baseConfig = {

        /**
         * Path to mp4 video
         *
         * @config video
         * @type {String}
         * @default null
         */
        'video': null,

        /**
         * Standard width of video
         *
         * @config width
         * @type {Number}
         * @default null
         */
        'width': null,

        /**
         * Standard height of video
         *
         * @config height
         * @type {Number}
         * @default null
         */
        'height': null,

        /**
         * Id of element which will be replaced
         *
         * @config toReplace
         * @type {String}
         * @default null
         */
        'toReplace': null,

        /**
         * Path to preview image
         *
         * @config image
         * @type {String}
         * @default null
         */
        'image': null,

        /**
         * Name of playercookie which describes selected size [min|max]
         *
         * @config cookie
         * @type {String}
         * @default null
         */
        'cookie': null,

        /**
         * A list of browser which can play mp4 in <video> element
         *
         * @config browser
         * @type {Array}
         * @default null
         */
        'browser': [ 'msie', 'safari', 'chrome' ]
    };

    /**
     * Checks if user's browser a supported browser
     * for html5 <video>
     *
     * @method checkBrowserCompatibility
     * @param {Array} browser
     * @return {Boolean}
     */

    function checkBrowserCompatibility(browser) {
        var agent = navigator.userAgent.toLowerCase(),
            i;
        for (i = 0; i < browser.length; i = i + 1) {
            if (agent.indexOf(browser[i]) > -1) {
                return true;
            }
        }
        return false;
    }
    // checkBrowserCompatibility

    SDE.utils.VideoWithHtml5 = {

        /**
         * Init for HTML5 player
         *
         * @method init
         * @param {Object}   userConfig
         * @param {String}   mode
         */

        init: function (userConfig, mode) {
            SDE.log.group('Video: Embedding HTML5');

            var config = SDE.mergeObjects(baseConfig, userConfig, true),
                conf,
                videoFrame,
                videoControls,
                resizeButton,
                szlinkButton,
                replayVideo,
                embedForm,
                embedLayer,
                url = document.location,
                embedUrl = url.pathname.substr(1).split('/'),
                uagent = navigator.userAgent.toLowerCase(),
                ios = false,
                android = false;

            SDE.log('Embedding an HTML5: baseConfig:%o', config);

            conf = new SDE.utils.Config(config);

            if (checkBrowserCompatibility(conf.get('browser'))) {

                // create HTML for video
                videoFrame =
                    '<div class="mwplayer_interface mv-player">' +
                    '  <video id="%ID%" %WIDTH% %HEIGHT% tabindex="0" poster="%IMAGE%">' +
                    '    <source src="%MP4%" />' +
                    '    <a href="%MP4%"><img src="%IMAGE%" alt=""></a>' +
                    '  </video>' +
                    '</div>';

                // create HTML for controls
                videoControls =
                    '<div class="ui-state-default ui-widget-header ui-helper-clearfix control-bar mwplayer_controls cid-%ID%">' +
                    '  %SZLINK%' +
                    '  <div class="rButton fullscreen-btn">' +
                    '    <span class="ui-icon"></span>' +
                    '  </div>' +
                    '  %RESIZE%' +
                    '  <div class="rButton social-btn">' +
                    '    <span class="ui-icon"></span>' +
                    '    <ul class="links">' +
                    '      <li class="facebook">Facebook</li>' +
                    '      <li class="twitter">Twitter</li>' +
                    '      <li class="google">Google+</li>' +
                    '      <li class="embed">Einbetten</li>' +
                    '    </ul>' +
                    '  </div>' +
                    '  <div class="ui-state-default ui-corner-all ui-isetCollapsePlayercon_link lButton play-btn">' +
                    '    <span class="ui-icon pause"></span>' +
                    '  </div>' +
                    '  <div class="ui-state-default ui-corner-all rButton volume_control">' +
                    '    <span class="ui-icon volume-on"></span>' +
                    '    <div class="vol_container ui-corner-all">' +
                    '      <div class="volume-slider ui-slider ui-slider-vertical ui-widget ui-widget-content ui-corner-all">' +
                    '        <a href="#" class="ui-slider-handle ui-state-default ui-corner-all" style="bottom: 50%;"></a>' +
                    '      </div>' +
                    '    </div>' +
                    '  </div>' +
                    '  <div class="ui-widget time-disp">0:00/0:00</div>' +
                    '  <div class="play_head ui-slider ui-slider-horizontal ui-widget ui-widget-content ui-corner-all progress-bar" style="position: absolute; left: 33px;">' +
                    '    <div class="ui-slider-range ui-slider-range-min ui-widget-header played" style="width: 0%; z-index: 2;"></div>' +
                    '    <div class="ui-slider-range ui-slider-range-min ui-widget-header buffer"></div>' +
                    '  </div>' +
                    '</div>' +
                    '<div class="mwplayer_loading lid-%ID%">' +
                    '  <img src="http://polpix.sueddeutsche.de/staticassets/img/nohash/loading.gif" width="220" height="19" alt="Video is loading ... please wait!">' +
                    '</div>';

                resizeButton =
                    '  <div class="rButton maximize-btn">' +
                    '    <span class="ui-icon" title="Video maximieren"></span>' +
                    '  </div>' +
                    '  <div class="rButton minimize-btn">' +
                    '    <span class="ui-icon" title="Video minimieren"></span>' +
                    '  </div>';

                szlinkButton =
                    '  <div class="rButton szlink-btn">' +
                    '    <span class="ui-icon" title="Video auf Süddeutsche.de ansehen."></span>' +
                    '  </div>';

                // Create HTML for replay video
                replayVideo =
                    '<div class="mwplayer_replay rid-%ID%">' +
                    '  <div class="replay_background">' +
                    '    <img src="%IMAGE%">' +
                    '  </div>' +
                    '  <div class="replay_opacity"></div>' +
                    '  <div class="replay_button">' +
                    '    <button>Erneut abspielen</button>' +
                    '  </div>' +
                    '</div>';

                // Create HTML for emebd form (shows a form where user can copy embed code)
                embedForm =
                    '<div class="mwplayer_embedform">' +
                    '  <form name="embedcode">' +
                    '    <ul>' +
                    '      <li>Einbetten</li>' +
                    '      <li><label for="mwplayer_width">Breite</label> <input type="text" name="width" ' +
                                'value="" maxlength="4" id="mwplayer_width"> px</li>' +
                    '      <li><label for="mwplayer_height">Höhe</label> <input type="text" name="height" ' +
                                'value="" maxlength="4" id="mwplayer_height"> px</li>' +
                    '    </ul>' +
                    '    <textarea readonly="readonly"><iframe src="%SOURCE%" width="640" height="359" ' +
                            'frameborder="0" scrolling="no" allowfullscreen></iframe></textarea>' +
                    '    <p>Code für die Einbindung des Videos kopieren und einfügen.</p>' +
                    '  </form>' +
                    '  <span class="close">X</span>' +
                    '</div>';

                // Create HTML for embed layer (shows layer with titel and source only in embed video)
                embedLayer =
                    '<div class="mwplayer_embedlayer">' +
                    '  <h1><a href="%URL%" target="_parent"><strong>%OVERLINE%</strong> %TITLE%</a></h1>' +
                    '  <em>%SOURCE%</em>' +
                    '</div>';

                // Replace placeholders
                videoFrame = videoFrame
                    .replace('%ID%', conf.get('toReplace'))
                    .replace('%WIDTH%', (mode !== 'embed' ? 'width="' + conf.get('width') + '"' : 'width="100%"'))
                    .replace('%HEIGHT%', (mode !== 'embed' ? 'height="' + conf.get('height') + '"' : ''))
                    .replace(/%MP4%/g, conf.get('video'))
                    //.replace(/%MP4%/g, 'http://pix.sueddeutsche.de/video_fs/sde/B/5/B55E3A02-E9AE-42DA-82B1-C5A22D675726.mp4')
                    .replace(/%IMAGE%/g, conf.get('image'));

                videoControls = videoControls
                    .replace(/%ID%/g, conf.get('toReplace'))
                    .replace('%RESIZE%', (mode === 'video' ? resizeButton : ''))
                    .replace('%SZLINK%', (mode === 'embed' ? szlinkButton : ''));

                replayVideo = replayVideo
                    .replace('%IMAGE%', conf.get('image'))
                    .replace('%ID%', conf.get('toReplace'));

                embedForm = embedForm
                    .replace('%SOURCE%', url.origin + '/sdews/embeddedpage/' + embedUrl[1]);

                if (mode === 'embed' && videoData) {
                    embedLayer = embedLayer
                        .replace('%URL%', videoData.videoArticleUrl)
                        .replace('%OVERLINE%', videoData.overline)
                        .replace('%TITLE%', videoData.title)
                        .replace('%SOURCE%', videoData.source);
                }

                // For mobile mode we need an other proceeding
                if (uagent.search('iphone') !== -1 || uagent.search('ipod') !== -1) {
                    ios = true;
                } else if (uagent.search('android') !== -1) {
                    android = true;
                }

                // Add <video> element into the site
                SDE.$('#' + conf.get('toReplace')).replaceWith(videoFrame);

                if (!ios && !android) {
                    // Add <video> controls into the site
                    SDE.$('#' + conf.get('toReplace')).after(replayVideo).after(videoControls).after(embedForm);
                }

                // Init video
                /*jslint vars: true */
                var html5video = SDE.$('#' + conf.get('toReplace')).get(0),
                    clickFunction,
                    playAndroid;

                if (ios || android) {

                    //Working with native js here as I need a video object in order to call play
                    clickFunction = function () {
                        html5video.volume = 0.5;
                        html5video.play();
                        // Initiate IQ tracking
                        var sas_pageid = SDE.$('figcaption').attr('sas_pageid');
                        var sas_formatid = SDE.$('figcaption').attr('sas_formatId');
                        var sas_target = '';
                        sasmobile(sas_pageid, sas_formatid, sas_target);
                    };

                    //In case of android show the play button. For iphones it appears autmatically
                    if (ios) {
                        html5video.addEventListener('click', clickFunction, false);
                    } else if (android) {
                        playAndroid = SDE.$('.mwplayer_interface.mv-player, .enrichment.video .body').addClass('androidPlay');
                        playAndroid.append('<button class="imagelabel">Video</button>');
                        playAndroid.on('click', clickFunction);
                    }
                } else {

                    // Init loading animation
                    SDE.$('.mwplayer_loading.lid-' + conf.get('toReplace')).fadeIn(500);

                    // Init video event handlers
                    var videoEventObj = SDE.$('#' + conf.get('toReplace')),
                        id = conf.get('toReplace'),
                        completeloaded = false;

                    videoEventObj.on('loadedmetadata', function () {
                        // for iPad we fix the control bars
                        if (uagent.search('ipad') > -1) {
                            SDE.$('.cid-' + id).addClass('ipad-controls');
                            SDE.advertisement.util.HTML5VideoAds(html5video);
                        }
                        else {
                            SDE.$('.mv-player').hover(function () {
                                SDE.$('.cid-' + id).stop().animate({ 'bottom': 0 }, 500);
                            }, function () {
                                if (!html5video.ended) {
                                    SDE.$('.cid-' + id).stop().animate({ 'bottom': -32 }, 500);
                                }
                            });
                        }
                    });

                    videoEventObj.on('canplay', function () {
                        SDE.$('.mwplayer_loading.lid-' + id).fadeOut(100);
                    });

                    videoEventObj.on('canplaythrough', function () {
                        completeloaded = true;
                    });

                    videoEventObj.on('ended', function () {
                        // 1. We change Playbutton
                        SDE.$('.cid-' + id + ' .play-btn span').removeClass('pause');
                        // 2. We collapse player
                        if (mode !== 'embed') {
                            SDE.widget.Video.setCollapsePlayer(id, 'close', 'html5', '');
                        } else {
                            window.location.reload();
                        }
                        // 3. We fixed control bar
                        SDE.$('.cid-' + id).css('bottom', '0');
                    });

                    videoEventObj.on('seeking', function () {
                        if (!completeloaded) {
                            SDE.$('.mwplayer_loading.lid-' + id).fadeIn(200);
                        }
                    });

                    videoEventObj.on('waiting', function () {
                        SDE.$('.mwplayer_loading.lid-' + id).fadeIn(200);
                    });

                    // Init controls
                    SDE.utils.VideoWithHtml5.playpause(html5video, conf.get('toReplace'));
                    SDE.utils.VideoWithHtml5.progress(html5video, conf.get('toReplace'), conf.get('cookie'));
                    SDE.utils.VideoWithHtml5.volume(html5video, conf.get('toReplace'));

                    if (mode === 'video') {
                        SDE.utils.VideoWithHtml5.minimize(conf.get('toReplace'));
                        SDE.utils.VideoWithHtml5.maximize(conf.get('toReplace'));
                    }

                    SDE.utils.VideoWithHtml5.sociallinks(conf.get('toReplace'));
                    SDE.utils.VideoWithHtml5.embedForm(conf.get('toReplace'));
                    SDE.utils.VideoWithHtml5.fullscreen(html5video);

                    if (mode === 'embed') {
                        SDE.utils.VideoWithHtml5.szlink(conf.get('toReplace'));
                        SDE.utils.VideoWithHtml5.embedLayer(html5video, conf.get('toReplace'), embedLayer);
                    }

                    // Show HTML5 video ads - but not on the iPad, cos it's buggy
                    if (uagent.search('ipad') === -1) {
                        SDE.advertisement.util.HTML5VideoAds(html5video);
                    }
                }
            }

            SDE.log.groupEnd();
        },
        // init

        /**
         * Handle play and pause event
         *
         * @param {Object}   obj
         * @param {String}   id
         */

        playpause: function (obj, id, shouldPlay) {

            var playButton = '.cid-' + id + ' .play-btn span';

            obj.play();

            SDE.$(playButton).on('click', function () {
                if (obj.paused) {
                    obj.play();
                    SDE.$(playButton).addClass('pause');
                } else {
                    obj.pause();
                    SDE.$(playButton).removeClass('pause');
                }
            });

        },
        // play

        /**
         * Handle and modify progress- and buffer-bar in realtime
         *
         * @param {Object} obj the video element
         * @param {id} id the id
         */

        progress: function (obj, id) {

            var maxWidth = SDE.$('.cid-' + id + ' .play_head').outerWidth(),
                bufferWidth = 0,
                bufferBar = '.cid-' + id + ' .buffer',
                progressWidth = 0,
                progressBar = '.cid-' + id + ' .played',
                progressTime = '',
                displayTime = '.cid-' + id + ' .time-disp',
                getDisplayTime;

            /**
             * Method which returns time to display in progress bar
             *
             * @param {Object} sec
             */

            getDisplayTime = function (sec) {
                var showMin = Math.floor(sec / 60),
                    showSec = Math.floor(sec % 60);
                return showSec < 10 ? showMin + ':0' + showSec : showMin + ':' + showSec;
            };

            // Change displayed time and running progressbar
            SDE.$(obj).on('timeupdate', function () {
                // We must permanently check if user changes the size of videoplayer. In "minimize" mode
                // the progressbar has a width of 324px and in "maximize" mode we have a width of 624px. 
                maxWidth = SDE.$('.cid-' + id + ' .play_head').outerWidth();

                // Buffer
                if (obj.buffered.end(0) < obj.duration) {
                    setTimeout(function () {
                        bufferWidth = Math.floor(maxWidth * obj.buffered.end(0) / obj.duration);
                        SDE.$(bufferBar).css('width', bufferWidth + 'px');
                    }, 250);
                } else {
                    SDE.$(bufferBar).css('width', maxWidth + 'px');
                }

                // Progressbar
                progressWidth = Math.floor(maxWidth * (obj.currentTime / obj.duration));
                SDE.$(progressBar).css('width', progressWidth + 'px');

                // Display time
                progressTime = getDisplayTime(obj.currentTime) + ' / ' + getDisplayTime(obj.duration);
                SDE.$(displayTime).html(progressTime);
            });

            // Jump to a selected point in timeline
            SDE.$('.control-bar.cid-' + id + ' div.play_head').on('click', function (e) {
                // 1. Herausbekommen, wie viele Pixel vom linken Rand des Fortschrittsbalkens entfernt der User geklickt hat.
                var clickX = e.clientX - SDE.$(this).offset().left,
                // 2. Berechnen, welchem Zeitpunkt des Videos die Position auf der Zeitleiste entspricht.
                    newTime = clickX * (obj.duration / maxWidth);
                // 3. Das Video auf die berechnete Zeit (in Sekunden) einstellen.
                obj.currentTime = newTime;
            });
        },
        // progress

        /**
         * Handle volume bar
         * Notice: In iPad we cannot modify volume via javascript. User can do this only with native device button's
         *
         * @param {Object}   obj the <video> element
         * @param {String}   id
         */

        volume: function (obj, id) {

            var volButton = '.cid-' + id + ' .volume_control span',
                volumeControl = '.cid-' + id + ' .volume_control',
                volumeContainer = '.cid-' + id + ' .vol_container',
                volumeCookie = 'sde_player_volume';

            // if ipad we hide volume-slider
            if (navigator.platform === 'iPad') {
                SDE.$(volumeContainer).remove();
            }
            // Check if user has cookie with volume, otherwise we
            // set cookie to remember when user reload the site

            if (SDE.$.cookies.test() && SDE.$.cookies.get(volumeCookie)) {
                obj.volume = SDE.$.cookies.get(volumeCookie);
            } else {
                obj.volume = 0.5;
                SDE.$.cookies.set(volumeCookie, obj.volume);
            }

            // Switch volume on/off
            SDE.$(volButton).on('click', function () {
                if (SDE.$(volButton).css('background-position') !== '-20px -161px') {
                    SDE.$(volButton).css('background-position', '-20px -161px');
                    obj.volume = 0.0;
                } else {
                    SDE.$(volButton).css('background-position', '-20px -218px');
                    obj.volume = 0.5;
                }
            });

            // for ipad we hide the complete slider functionality
            if (navigator.platform !== 'iPad') {
                // Slider
                SDE.$('.cid-' + id + ' .volume-slider').slider({
                    orientation: 'vertical',
                    range:       'min',
                    min:         0,
                    max:         1,
                    value:       0.5,
                    step:        0.01,
                    slide:       function (e, ui) {
                        obj.volume = ui.value;

                        var vol = obj.volume.toFixed(1);
                        SDE.$.cookies.set(volumeCookie, vol);

                        if (vol < 0.1) {
                            SDE.$(volButton).css('background-position', '-20px -161px');
                        } else if (vol < 0.4) {
                            SDE.$(volButton).css('background-position', '-19px -189px');
                        } else if (vol > 0.6) {
                            SDE.$(volButton).css('background-position', '-20px -249px');
                        } else {
                            SDE.$(volButton).css('background-position', '-20px -218px');
                        }
                    }
                });

                // Slider hide/visible
                SDE.$(volumeControl).on('mouseover', function () {
                    SDE.$(volumeContainer).css('display', 'block');
                });

                SDE.$(volumeControl).on('mouseout', function () {
                    SDE.$(volumeContainer).css('display', 'none');
                });
            }

        },
        // volume

        /**
         * Set clickhandler for minimize button, to minimize video in site's content
         */

        minimize: function (id) {
            SDE.$('.cid-' + id + ' .minimize-btn span').click(function () {
                SDE.widget.Video.setResizePlayer(id, 'minimize', 'html5');
            });
        },
        // minimize

        /**
         * Set clickhandler for maximize button, to maximize video in site's content
         */

        maximize: function (id) {
            SDE.$('.cid-' + id + ' .maximize-btn span').click(function () {
                SDE.widget.Video.setResizePlayer(id, 'maximize', 'html5');
            });
        },
        // maximize

        /**
         * Eventhandler to open "sociallinks toolbox" and handle the different events
         *
         * @param {String}   id
         */

        sociallinks: function (id) {

            var socialLinks = '.cid-' + id + ' .social-btn .links',
                socialButton = '.cid-' + id + ' .social-btn span',
                arr = [ 'facebook', 'twitter', 'google', 'embed' ];

            // First we set clickhandler to different sharing platforms
            SDE.$.each(arr, function (key, value) {
                SDE.$(socialLinks + ' .' + value).on('click', function () {
                    if (value !== 'embed') {
                        SDE.widget.Video.setSocialLinks(id, 'html5', value);
                    } else {
                        SDE.$('.mwplayer_embedform').fadeIn('fast');
                    }
                    SDE.$(socialLinks).fadeOut('fast').removeClass('show');
                });
            });

            // Set clickhandler to open/close toolbox
            SDE.$(socialButton).on('click', function () {
                if (SDE.$(socialLinks).hasClass('show')) {
                    SDE.$(socialLinks).fadeOut('fast').removeClass('show');
                } else {
                    SDE.$(socialLinks).fadeIn('slow').addClass('show');
                }
            });

        },
        // sociallinks

        /**
         * Eventhandler to handle "embed"-functionallity
         *
         * @param {Object} id
         */

        embedForm: function (id) {

            // Eventhandler to show "embed screen" when user click's in context menue.
            // see SDE.utils.VideoWithHtml5.sociallinks()

            // Eventhandler to hide "embed screen" when user click's the "x" in the top-right-corner  
            SDE.$('.mwplayer_embedform .close').on('click', function () {
                SDE.$('.mwplayer_embedform').fadeOut('fast');
            });

            // Eventhandler to select "embed code" in textarea's value to copy them.
            SDE.$('.mwplayer_embedform textarea').on('click', function () {
                this.select();
            });

            var getSnippet = function () {
                    return SDE.$('.mwplayer_embedform textarea').val();
                },
                setSnippet = function (snippet) {
                    return SDE.$('.mwplayer_embedform textarea').val(snippet);
                },
                getRatio = function (value, direction) {
                    var ratio;
                    if (direction === 'width') {
                        ratio = Math.round((value / 16) * 9);
                    } else if (direction === 'height') {
                        ratio = Math.round((value / 9) * 16);
                    }

                    return ratio;
                };

            // Eventhandler to allow dynamicly changes in input fields for width and height 
            SDE.$('#mwplayer_width, #mwplayer_height').keyup(function () {
                var formName = SDE.$(this).attr('name'),
                    value = SDE.$(this).val(),
                    ratio = getRatio(value, formName),
                    minWidth = 320, //640
                    minHeight = 179, //359
                    newWidth = formName === 'width' ? value : ratio,
                    newHeight = formName === 'width' ? ratio : value,
                    snippet = getSnippet();

                if (value.length > 2 && value.length < 5 && value > minWidth && value > minHeight) {
                    setSnippet(snippet.replace(/width=\"[0-9]{3,4}\" height=\"[0-9]{3,4}\"/g, 'width="' + newWidth + '" height="' + newHeight + '"'));
                } else {
                    setSnippet(snippet.replace(/width=\"[0-9]{3,4}\" height=\"[0-9]{3,4}\"/g, 'width="' + minWidth + '" height="' + minHeight + '"'));
                }

                SDE.$((formName === 'width' ? '#mwplayer_height' : '#mwplayer_width')).val(ratio || '');

            }).keyup();

        },
        // embedForm

        /**
         * Handle visibility for embed layer
         *
         * @param {Object} obj
         * @param {Object} id
         * @param {Object} snippet
         */

        embedLayer: function (obj, id, snippet) {

            // Add embed layer into site
            SDE.$('#' + id).after(snippet);

            var layerElem = SDE.$('#' + id + ' + .mwplayer_embedlayer'),
                layerHeight = SDE.$(layerElem).outerHeight(true);

            // After 600 ms we move the layer outside when video played
            SDE.$(layerElem).delay(600).animate({ 'top': (-1) * layerHeight }, 500);

            // Set handler to embed layer to handle hover effect
            if (navigator.platform !== 'iPad') {
                SDE.$('.mv-player').hover(function () {
                    SDE.$(layerElem).stop().animate({ 'top': 0 }, 500);
                }, function () {
                    if (!obj.ended) {
                        SDE.$(layerElem).stop().animate({ 'top': (-1) * layerHeight }, 500);
                    }
                });
            }

        },
        // embedLayer

        /**
         * Handle fullscreen button
         * Source: http://johndyer.name/native-fullscreen-javascript-api-plus-jquery-plugin/
         *
         * @param {Object} obj the <video> element
         */

        fullscreen: function (obj) {

            SDE.$('.fullscreen-btn > span').on('click', function () {
                if (SDE.$.isFunction(obj.webkitEnterFullscreen)) {
                    obj.webkitEnterFullscreen();
                } else if (SDE.$.isFunction(obj.mozRequestFullScreen)) {
                    obj.mozRequestFullScreen();
                } else {
                    SDE.$('.fullscreen-btn > span').css('background-position', '0 50px');
                }
            });

        },
        // fullscreen

        /**
         * Handle link to full video article in embeded player
         */

        szlink: function (id) {

            SDE.$('.cid-' + id + ' .szlink-btn span').on('click', function () {
                //window.parent.location.href = window.location.protocol + '//' + window.location.host + videoData.videoArticleUrl;
                window.parent.location.href = videoData.videoArticleUrl;
            });

        }
        // szlink

    };

}());
/*global SDE, window: false */
(function () {

    SDE.namespace('utils.ImageLoader');

    var sizeMap = {
        '240': {
            //FOUR_THREE
            '208x156': '173x130',
            //SIXTEEN_NINE
            '204x115': '173x130',
            '280x158': '263x148',
            '300x168': '263x148',
            '460x259': '280x158',
            '560x315': '280x158',
            '900x506': '280x158'
        },
        '320': {
            //FOUR_THREE
            '208x156': '173x130',
            //SIXTEEN_NINE
            '204x115': '173x130',
            '280x158': '173x130',
            '300x168': '173x130',
            '560x315': '460x259',
            '900x506': '460x259'
        },
        '480': {
            //SIXTEEN_NINE
            '300x168': '280x158'
        }
    },

        /**
         *  The base config
         *
         *  @property   _baseConfig
         *  @type       {Object}
         *  @static
         *  @protected
         */
        _baseConfig = {
            /**
             *  The class used to signify that an image
             *  is yet to be loaded.
             *
             *  @config     preloadClass
             *  @type       {String}
             */
            'preloadClass': 'preload',

            /**
             * The attribute to look for when searching
             * for image source data.
             *
             *  @config     sourceAttribute
             *  @type       {String}
             */
            'sourceAttribute': 'data-src',

            /**
             *  Stores whether the page to load images in is
             *  shown in app-mode.
             *
             *  @config    isApp
             *  @type    boolean
             */
            'isApp': 'false'
        };

    /**
     * Description: ...
     *
     * @method getSize
     */

    function _getSize() {
        var size = {};
        if (window.screen.width <= 240) {
            size = sizeMap['240'];
        } else if (window.screen.width > 240 && window.screen.width <= 320) {
            size = sizeMap['320'];
        } else if (window.screen.width > 320 && window.screen.width <= 480) {
            size = sizeMap['480'];
        }

        return size;
    }

    /**
     * Description: ...
     *
     * @method loadNode
     * @param {Object} node
     */

    function _loadNode(node) {
        /*jslint regexp: false */
        /*jshint regexp: false */
        var preloadClass = this.config.get('preloadClass'),
            dataAttribute = this.config.get('sourceAttribute'),
            src = node.attr(dataAttribute),
            currentFormat = src.replace(/^.*derivatives\/(.*?)\/.*$/, '$1'),
            linkNode;

        // don't do this when we're in app mode

        if (!this.config.get('isApp')) {
            if (this._size[currentFormat]) {
                src = src.replace(currentFormat, this._size[currentFormat]);
            }
        }

        node.load(function () {
            SDE.$(this).removeAttr(dataAttribute);
            SDE.$(this).removeClass(preloadClass);
        });

        node.attr('src', src);
        linkNode = node.closest('a');

        if (linkNode.length > 0) {
            // Force a redraw -- this will ensure that all text looks the way it should.
            linkNode.get(0).style.webkitTransform = 'scale(1)';
        }
    }

    /**
     * Description: ...
     *
     * @method loadIMage
     * @param {Object} imgSrc
     */

    function _loadImage(imgSrc) {

        var sourceAttribute = this.config.get('sourceAttribute'),
            loader = this;

        SDE.$('img[' + sourceAttribute + '="' + imgSrc + '"]').each(function () {
            _loadNode.apply(loader, [SDE.$(this)]);
        });
    }

    /**
     * Used in App-Mode: call _loadImage(imgSrc) for each image
     * in the image list (separated by a comma ",")
     */
    function _loadImagesFromArrayString(imgSrcArr) {
        var splitArr = imgSrcArr.split('|'),
            loader = this;
        SDE.$.each(splitArr, function (index, item) {
            loader.loadImage(item);
        });
    }

    /**
     * Load all images available on this page.
     *
     * @method loadImages
     */

    function _loadImages() {
        SDE.log.group('loadImages');

        var preloadClass = this.config.get('preloadClass'),
            sourceAttribute = this.config.get('sourceAttribute'),
            loader = this;

        SDE.$('img[' + sourceAttribute + ']').each(function () {
            var node = SDE.$(this);

            node.addClass(preloadClass);
            _loadNode.apply(loader, [node]);
        });
    }

    /**
     * Description: ...
     *
     * @property   config
     * @type       {Object}
     */

    SDE.utils.ImageLoader = function (userConfig) {
        SDE.log.group('ImageLoader');
        SDE.log('Constructor, userConfig:%o, baseConfig:%o', userConfig, this._baseConfig);

        this.config = new SDE.utils.Config(_baseConfig, userConfig);

        this._size = _getSize();
        SDE.log.groupEnd();
    };

    SDE.utils.ImageLoader.prototype.loadImages = _loadImages;
    SDE.utils.ImageLoader.prototype.loadImage = _loadImage;
    SDE.utils.ImageLoader.prototype.loadImagesFromArrayString = _loadImagesFromArrayString;
}());
/*global SDE, navigator */
/**
 *
 *  @namespace  SDE
 *  @module     utils
 *  @static
 *
 *  @title  SDE Utility Functions for detecting devices
 */
(function () {
    SDE.namespace('utils.DeviceDetection');

    SDE.utils.DeviceDetection = (function () {
        var osVersion,
            device,
            deviceType,
            userAgent;

        if (/sdemobile-app/i.test(navigator.userAgent)) {
            device = 'sdeapp';
            osVersion = 'sdeapp';
            deviceType = 'sdeapp';
        } else {
            device = (navigator.userAgent).match(/Android|iPhone|iPad|iPod/i);
            if (/Android/i.test(device)) {

                if (!/mobile/i.test(navigator.userAgent)) {
                    deviceType = 'tablet';
                } else {
                    deviceType = 'phone';
                }

                osVersion = (navigator.userAgent).match(/Android\s+([\d\.]+)/i);
                osVersion = osVersion[0];
                osVersion = osVersion.replace('Android ', '');

            } else if (/iPhone/i.test(device)) {

                deviceType = 'phone';

                osVersion = (navigator.userAgent).match(/OS\s+([\d\_]+)/i);
                osVersion = osVersion[0];
                osVersion = osVersion.replace(/_/g, '.');
                osVersion = osVersion.replace('OS ', '');

            } else if (/iPad/i.test(device)) {

                deviceType = 'tablet';

                osVersion = (navigator.userAgent).match(/OS\s+([\d\_]+)/i);
                osVersion = osVersion[0];
                osVersion = osVersion.replace(/_/g, '.');
                osVersion = osVersion.replace('OS ', '');
            }
        }

        userAgent = navigator.userAgent;

        return {
            'isSmartphoneOrTablet': /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent),
            'device':               device || ['unknown'],
            'osVersion':            osVersion,
            'userAgent':            userAgent,
            'deviceType':           deviceType
        };
    }());

}());
/*global SDE */
/**
 *  We love advertisement, oh yes we do!  It's our favourite thing ever!
 *
 *  @module advertisement
 *  @title  SDE Ad Support
 */
(function () {
    SDE.namespace('advertisement');
}());
/*global SDE, window, Image */
(function () {
    /**
     * SiteStat provides click-tracking functionality. For us, this means that we
     * can assign certain elements click-functionality that sends a tracking beacon
     * when a user clicks on it.
     *
     *  @author     Thomas Andersson <Thomas.Andersson@netlight.de>
     *  @version    $Id$
     *
     *  @requires   SDE
     *  @namespace  SDE.advertisment
     *  @class      SiteStat
     *  @static
     */
    SDE.namespace('advertisement.SiteStat');

    /**
     * Set tracking pixel
     *
     * @param {Object} name     name of the clicktracking
     * @param {Object} type     type of clicktracking
     * @param {Object} targetUrl   link target (only if we have an 'a' tag as element node)
     * @param {Object} target   the target of the link, i.e. _blank
     */

    SDE.advertisement.SiteStat.track = function (name, type, targetUrl, target) {

        var baseUrl = 'http://de.sitestat.com/sueddeutsche/sueddeutsche/s?%NAME%&ns_type=%TYPE%&ns_action=view&ns__t=%DATE%',
            img = new Image(),
            ns_type = type || 'clickin',
            trackingUrl;

        trackingUrl = baseUrl
            .replace(/%NAME%/, name)
            .replace(/%DATE%/, (new Date()).getTime())
            .replace(/%TYPE%/, ns_type);

        img.onload = function () {
            if (targetUrl) {
                if (target) {
                    window.open(targetUrl, target);
                } else {
                    window.location = targetUrl;
                }
            }
        };

        img.src = trackingUrl;

    };

    var init = function () {
        var trackItems = SDE.$('[data-linktrack]');

        trackItems.each(function () {
            var node = SDE.$(this),
                fnObj = SDE.utils.parameterParser(node.attr('data-linktrack')),
                names = [fnObj.fn],
                params = fnObj.params,
                shouldTrackHover = params.shouldTrackHover,
                type = params.type || 'clickin',
                deferPrefix = params.deferPrefix;

            if (params && params.additionalNames) {
                names = SDE._.union(names, params.additionalNames);
            }

            // Allow tracking of clicks
            node.click(function (e) {
                var targetUrl = node.attr('href'),
                    target = node.attr('target'),
                    prefix = deferPrefix ? node.attr(deferPrefix) + '.' : '';
                if (targetUrl) {
                    e.preventDefault();
                }

                SDE._.each(names, function (name) {
                    var url = (name === names[names.length - 1]) ? targetUrl : null;
                    SDE.advertisement.SiteStat.track(prefix + name, type, url, target);
                });
            });

            // Allow tracking of hovering over an element too
            if (shouldTrackHover) {
                node.mouseenter(function () {
                    var prefix = deferPrefix ? node.attr(deferPrefix) + '.' : '';
                    SDE._.each(names, function (name) {
                        SDE.advertisement.SiteStat.track(prefix + name, type);
                    });

                });
            }
        });
    };

    if (SDE.init && SDE._.isArray(SDE.init.readyFns)) {
        SDE.init.readyFns.push({fn: init, priority: 1});
    }
}());
/*global SDE */
/**
 *  Reusable widget namespace for Sueddeutsche.de
 *
 *  @module widget
 *  @title  SDE Widgets
 */
(function () {
    SDE.namespace('widget');
}());
/*global SDE */
(function () {

    /**
     *  The PanelControl isn't a widget per-se, rather a base upon which a
     *  family of widgets can be built.  It handles the creation of a generic
     *  dropdown-style widget, creating a button to trigger the display of an
     *  arbitrary element on the page, generation of the proper ARIA roles, and
     *  the base event system upon which the visual changes can be hung.
     *
     *  In short, it does everything necessary from a backend perspective, and
     *  relies on some other class to handle the frontend visual changes via
     *  triggered events.
     *
     *  @author     Mike West <Mike.West@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace  SDE.widget
     *  @class      PanelControl
     *  @constructor
     *
     *  @param  {Object}        config  A configuration object (optional)
     *
     *  @requires   SDE
     */

    SDE.namespace('widget.PanelControl');

    SDE.namespace('events.PanelControl');

    SDE.events.PanelControl = {

        /**
         *  Triggered _before_ the content's visibility is toggled,
         *  returning a data object with the following properties:
         *
         *  @event  SDE.events.PanelControl.prechange
         *  @param  {jQuery}    button  jQuery collection containing the widget's
         *                              toggle button (generally a `button`)
         *  @param  {jQuery}    panel   jQuery collection containing the widget's
         *                              panel (generally a `div`).
         *  @param  {Boolean}   visible Widget's current visibility status
         */
        'prechange': 'SDE_events_PanelControl_prechange',

        /**
         *  Triggered _after_ the content's visibility is toggled,
         *  returning a data object with the following properties:
         *
         *  @event  SDE.events.PanelControl.onchange
         *  @param  {jQuery}    button  jQuery collection containing the widget's
         *                              clicked toggle button (generally a `button`)
         *  @param  {jQuery}    panel   jQuery collection containing the widget's
         *                              panel (generally a `div`).
         *  @param  {Boolean}   visible Widget's current visibility status
         */
        'onchange': 'SDE_events_PanelControl_onchange',

        /**
         *  Triggered _before_ the content's visibility is shown,
         *  returning a data object with the following properties:
         *
         *  @event  SDE.events.PanelControl.preshow
         *  @param  {jQuery}    button  jQuery collection containing the widget's
         *                              clicked toggle button (generally a `button`)
         *  @param  {jQuery}    panel   jQuery collection containing the widget's
         *                              panel (generally a `div`).
         *  @param  {Boolean}   visible Widget's current visibility status
         */
        'preshow': 'SDE_events_PanelControl_preshow',

        /**
         *  Triggered _after_ the content's visibility is shown,
         *  returning a data object with the following properties:
         *
         *  @event  SDE.events.PanelControl.onshow
         *  @param  {jQuery}    button  jQuery collection containing the widget's
         *                              clicked toggle button (generally a `button`)
         *  @param  {jQuery}    panel   jQuery collection containing the widget's
         *                              panel (generally a `div`).
         *  @param  {Boolean}   visible Widget's current visibility status
         */
        'onshow': 'SDE_events_PanelControl_onshow',

        /**
         *  Triggered _before_ the content's visibility is hidden,
         *  returning a data object with the following properties:
         *
         *  @event  SDE.events.PanelControl.prehide
         *  @param  {jQuery}    button  jQuery collection containing the widget's
         *                              clicked toggle button (generally a `button`)
         *  @param  {jQuery}    panel   jQuery collection containing the widget's
         *                              panel (generally a `div`).
         *  @param  {Boolean}   visible Widget's current visibility status
         */
        'prehide': 'SDE_events_PanelControl_prehide',

        /**
         *  Triggered _after_ the content's visibility is hidden,
         *  returning a data object with the following properties:
         *
         *  @event  SDE.events.PanelControl.onhide
         *  @param  {jQuery}    button  jQuery collection containing the widget's
         *                              clicked toggle button (generally a `button`)
         *  @param  {jQuery}    panel   jQuery collection containing the widget's
         *                              panel (generally a `div`).
         *  @param  {Boolean}   visible Widget's current visibility status
         */
        'onhide': 'SDE_events_PanelControl_onhide',

        /**
         *  Triggered when a user clicks on the widget's toggle button.
         *
         *  @event  SDE.events.PanelControl.onnavclick
         *  @param  {jQuery}    button  jQuery collection containing the widget's
         *                              clicked toggle button (generally a `button`)
         *  @param  {jQuery}    panel   jQuery collection containing the widget's
         *                              panel (generally a `div`).
         *  @param  {Event}     event   The click event that triggered this event.
         */
        'onnavclick': 'SDE_events_PanelControl_onnavclick'
    };

    /**
     *  PanelControl base configuration
     *  @property   _baseConfig
     *  @protected
     *  @static
     */

    var _baseConfig = {
        /**
         *  The selector that matches the widgets on the page
         *  that trigger the PanelControl widget's display.
         *
         *  @config     toggle
         *  @type       {String}
         *  @default    null
         */
        'toggle': null,

        /**
         *  The selector that matches the panel on the page
         *  that PanelControl ought control.
         *
         *  @config     panel
         *  @type       {String|jQuery|Element}
         *  @default    null
         */
        'panel': null,

        /**
         *  By default, a "Close" button will not be added automatically
         *  to the element displayed to the user.  Set this to `true`
         *  to disable that behavior.
         *
         *  @config     closeButton
         *  @type       {Boolean}
         *  @default    true
         */
        'closeButton': false,

        /**
         *  Should `focus` be managed by PanelController (true)
         *  or will you manage it yourself (false)?
         *
         *  @config     managedFocus
         *  @type       {Boolean}
         *  @default    true
         */
        'managedFocus': true,

        /**
         *  The user interaction required to display the widget.
         *  This defaults to 'click', but could certainly also
         *  be something like `mouseenter`.
         *
         *  @config     showInteraction
         *  @type       {String}
         *  @default    'click'
         */
        'interaction': 'click'
    };

    /**
     *  Hide the widget's panel
     *
     *  @method hide
     *  @public
     */

    function _hide() {
        SDE.log('PanelControl: Called `hide`');
        SDE.log('this:%o, this.visible:%o', this, this.visible);

        // when panel closed remove class 'panelopened' to toggle, so we can set
        // arrow image via CSS to open ...
        this.button.children().removeClass('panelopened');

        if (this.visible) {

            this.panel.trigger(
                SDE.events.PanelControl.prehide,
                {
                    'panel':   this.panel,
                    'button':  this.button,
                    'visible': this.visible
                }
            );

            this.panel.attr('aria-hidden', 'true');
            this.visible = false;
            this.button.removeClass('visible');

            this.panel.trigger(
                SDE.events.PanelControl.onhide,
                {
                    'panel':   this.panel,
                    'button':  this.button,
                    'visible': this.visible
                }
            );

            // If panel will hide and the hiding element is the loginbox, we must check
            // cookies, because user can now be logged in.
            if (this.button.attr('id') === 'logintoggle') {
                SDE.log.info('Check, after closing Lightbox, if user is logged in');
                // we reload the complete site
                /*global window: false */
                window.location.reload();
            }

        }
    }

    /**
     *  Show the widget's panel
     *
     *  @method show
     *  @public
     */

    function _show(clicked) {
        SDE.log.group('PanelControl: Called `show`');
        SDE.log('this:%o, this.visible:%o', this, this.visible);

        // when panel opened set class "panelopened" to toggle, so we can set
        // arrow image via CSS to close ...
        this.button.children().addClass('panelopened');

        if (!this.panel[0].parentNode || this.panel[0].parentNode.nodeName !== 'BODY') {
            SDE.log('`panel` isn\'t yet a child of `body`: Appending to document\'s body');
            this.panel.appendTo('body');
        }

        if (!this.visible) {
            this.panel.trigger(
                SDE.events.PanelControl.preshow,
                {
                    'panel':   this.panel,
                    'button':  clicked || this.button,
                    'visible': this.visible
                }
            );
            this.panel.attr('aria-hidden', 'false');
            this.visible = true;
            this.button.addClass('visible');
            if (this.managedFocus) {
                this.panel.focus();
            }

            this.panel.trigger(
                SDE.events.PanelControl.onshow,
                {
                    'panel':   this.panel,
                    'button':  clicked || this.button,
                    'visible': this.visible
                }
            );
        }
        SDE.log.groupEnd();
    }

    /**
     *  Toggle the visibility of the widget's panel.
     *
     *  @method toggle
     *  @public
     */

    function _toggle(clicked) {
        SDE.log.group('PanelControl: Called `toggle`');
        SDE.log('this:%o, this.visible:%o', this, this.visible);

        //  1.  Trigger the `prechange` event.
        this.panel.trigger(
            SDE.events.PanelControl.prechange,
            {
                'panel':   this.panel,
                'button':  clicked || this.button,
                'visible': this.visible
            }
        );

        //  2.  Hide/Show, as appropriate.
        if (this.visible) {
            this.hide(clicked);
        } else {
            this.show(clicked);
        }

        //  3.  Trigger the `onchange` event.
        this.panel.trigger(
            SDE.events.PanelControl.onchange,
            {
                'panel':   this.panel,
                'button':  clicked || this.button,
                'visible': this.visible
            }
        );

        SDE.log.groupEnd();
    }

    SDE.widget.PanelControl = function (userConfig) {
        SDE.log.group('PanelControl');
        SDE.log('Constructor, userConfig:%o, baseConfig:%o', userConfig, this._baseConfig);

        // For use in closures.
        var basename,
            config,
            panelcontrol = this;

        if (!userConfig) {
            SDE.log.error('`PanelControl`: Instantiated without configuration.');
            return;
        }
        this.config = new SDE.utils.Config(_baseConfig, userConfig);
        config = this.config;
        if (!config.get('panel')) {
            SDE.log.error('`PanelControl`: `panel` is a required configuration option.  ' +
                'Please check that it is set correctly.  You provided: ', userConfig);
            return;
        }

        /**
         *  Unique basename for ARIA IDs.
         *  @property   basename
         *  @type       String
         */
        this.basename = SDE.uid();

        /**
         *  Cached reference to the DOMElement that's being toggled
         *  by the control
         *
         *  @property   panel
         *  @type       jQuery
         */
        this.panel = SDE.$(config.get('panel'));

        if (this.panel.attr('id')) {
            this.basename = this.panel.attr('id');
        }
        basename = this.basename;

        /**
         *  Is the panel currently visible?
         *  @property   visible
         *  @type       Boolean
         */
        this.visible = false;

        //  3.  Label each of the `item`s in the form `{basename}`
        this.panel
            .each(function () {
                SDE.$(this)
                    .attr({
                        'id':              basename,
                        'role':            'dialog',
                        'aria-labelledby': SDE.$(this).attr('aria-labelledby') || (basename + '_toggle'),
                        'aria-hidden':     'true',
                        'tabindex':        '-1'    // -1 tabindex to allow focus
                    });
            });

        //  4.  Define handler for clicks on the toggle element that we'll
        //      build in a moment.
        function _handle_toggle_click(e) {
            e.preventDefault();
            var clicked = SDE.$(e.target);
            panelcontrol.panel.trigger(
                SDE.events.PanelControl.onnavclick,
                {
                    'panel':  panelcontrol.panel,
                    'button': clicked,
                    'event':  e
                }
            );
            panelcontrol.toggle(clicked);

            return false;
        }

        if (config.get('toggle')) {
            //  4.  Use the provided `toggle` element as `this.button`
            /**
             *  Cached reference to the button that toggles
             *  the control's visibility.
             *  @property   button
             *  @type       jQuery
             */
            this.button = SDE.$(config.get('toggle'))
                .attr({ 'role': 'tablist' })
                .bind(config.get('interaction'), _handle_toggle_click);

        } else {
            //  4.  Generate a list of navigation elements, and bind a click
            //      handler to deal with user interaction.
            this.button = SDE.$('<button />')
                .text(this.basename)
                .attr({
                    'id':   this.basename + '_toggle',
                    'role': 'tablist'
                })
                .bind(config.get('interaction'), _handle_toggle_click);

            //  5.  Replace the panel with the button
            this.panel
                .replaceWith(this.button);
        }
        if (this.config.get('closeButton')) {
            this.panel.append(
                '<button class="close">Schlie&szlig;en</button>'
            );
            this.closeButton = this.panel.find('button.close');
            this.closeButton.bind('click', SDE.$.proxy(this, 'hide'));
        }
        //  6. Fix idiotic IE6/7 positioning issue.
        SDE.$(this.button.hide().show());

        /**
         *  Is `focus` being managed by the controller?
         *  @property   managedFocus
         *  @type       Boolean
         */
        this.managedFocus = !!config.get('managedFocus');

        SDE.log.groupEnd();
    };
    SDE.widget.PanelControl.prototype.toggle = _toggle;
    SDE.widget.PanelControl.prototype.show = _show;
    SDE.widget.PanelControl.prototype.hide = _hide;
    SDE.widget.PanelControl.prototype._baseConfig = _baseConfig;
}());
/*global SDE */
(function () {

    /**
     *  Extends `PanelControl`, used for widgets that toggle a panel
     *  of content on and off.  The panel will fade in directly below
     *  the toggling button, either aligned with it's left edge, or
     *  with it's right edge if there's not enough room to display it
     *  correctly.
     *
     *  @author     Mike West <Mike.West@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace      SDE.widget
     *  @class          DropdownControl
     *  @extends        SDE.widget.PanelControl
     *  @constructor
     *
     *  @param  {Object}    userConfig  The configuration object containing the
     *                                  various settings necessary for displaying
     *                                  a DropdownControl widget.
     *
     *  @requires   SDE, SDE.utils.Config, SDE.widget.PanelControl
     */

    SDE.namespace('widget.DropdownControl');

    SDE.widget.DropdownControl = function (userConfig) {
        SDE.log.group('DropdownControl');
        SDE.log('Constructor, userConfig:%o', userConfig);

        //  0.  Set up alias for use inside closures.
        var controller = this,
            userOffset;
        if (SDE.$(userConfig.panel).length === 0) {
            SDE.log.warn('Constructor, `panel` matched no elements, exiting.');
            SDE.log.groupEnd();
            return;
        }

        // 0.5. Add extra offset if required
        userConfig.offset = userConfig.offset || {};
        userOffset = {
            top:  userConfig.offset.top || 0,
            left: userConfig.offset.left || 0
        };

        //  1.  Instantiate the `PanelControl` from which this inherits:
        SDE.widget.PanelControl.prototype.constructor.call(this, userConfig);

        //  2.  Hide the panel.
        this.panel.hide();

        //  3.  Set up even handlers to modify the visual style
        //      of `this.panel` in response to `onshow` and
        //      `onhide` events from `PanelControl`
        this.panel.bind(
            SDE.events.PanelControl.onshow,
            function (e, data) {
                var offset = data.button.offset();
                offset.top += data.button.outerHeight() - 1 + userOffset.top;
                offset.left += userOffset.left;
                if (offset.left + data.panel.outerWidth() > SDE.$('#sueddeutsche').outerWidth()) {
                    // If aligning the panel to the left side of the clicked button
                    // would overflow the page's body, then align it to the right
                    // edge of the clicked button
                    offset.left -= (data.panel.outerWidth() - data.button.outerWidth());
                }
                offset.top = parseInt(offset.top, 10);
                offset.left = parseInt(offset.left, 10);
                SDE.log('DropdownControl: Showing %o with offset %o, e:%o, data:%o', data.panel, offset, e, data);
                data.panel
                    .css(offset)
                    .fadeIn('slow');
            }
        ).bind(
            SDE.events.PanelControl.onhide,
            function () {
                controller.panel.fadeOut('fast');
            }
        );
        SDE.log.groupEnd();
    };

    SDE.extend(SDE.widget.PanelControl, SDE.widget.DropdownControl);
}());
/*global SDE */
(function () {

    /**
     *  LightboxControl uses `PanelControl` and `Overlay` to put together a
     *  lightbox effect that dims the site, and fades in a specified DOM
     *  Element after centering it on the screen.
     *
     *  @author     Mike West <Mike.West@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace  SDE.widget
     *  @class      LightboxControl
     *  @extends    SDE.widget.PanelControl
     *  @constructor
     *
     *  @requires   SDE, SDE.util.Config, SDE.widget.Overlay, SDE.widget.PanelControl
     */

    SDE.namespace('widget.LightboxControl');

    SDE.namespace('events.LightboxControl');

    SDE.events.LightboxControl = {
        /**
         *  Triggered _after_ the content's visibility is finished,
         *  transitioning from transparent to opaque.
         *
         *  @event  SDE.events.LightboxControl.onvisible
         *  @param  {jQuery}    button  jQuery collection containing the widget's
         *                              toggle button (generally a `button`)
         *  @param  {jQuery}    panel   jQuery collection containing the widget's
         *                              panel (generally a `div`).
         */
        'onvisible': 'SDE_events_LightboxControl_onvisible'
    };

    /**
     *  LightboxControl's base config
     *
     *  @property _baseConfig
     *  @private
     *  @final
     *  @static
     */

    var _baseConfig = SDE.mergeObjects(
        {
            /**
             *  Pressing `esc` while focused anywhere in the container
             *  should close the ligthbox.  Set this to `false` to
             *  disable that behavior.
             *
             *  @config     escToClose
             *  @type       {Boolean}
             *  @default    true
             */
            'escToClose': true,

            /**
             *  By default, clicking anywhere in the `container`
             *  element will close the element.  Set this to `false`
             *  to disable that behavior.
             *
             *  @config     clickToClose
             *  @type       {Boolean}
             *  @default    true
             */
            'clickToClose': true,

            /**
             *  By default, clicking anywhere outside the `container`
             *  element will close the element.  Set this to `false`
             *  to disable that behavior.
             *
             *  @config     clickOutsideToClose
             *  @type       {Boolean}
             *  @default    true
             */
            'clickOutsideToClose': true,

            /**
             *  Control focus manually?  This will be passed through to
             *  `PanelControl`.  LightboxControl defaults this to
             *  `false`, assuming that you'll be doing the work yourself.
             *
             *  @config     managedFocus
             *  @type       {Boolean}
             *  @default    false
             */
            'managedFocus': false,

            /**
             *  LightboxControl defaults this `PanelControl` config to `true`
             *
             *  @config     closeButton
             *  @type       {Boolean}
             *  @default    true
             */
            'closeButton': true

        },
        SDE.widget.PanelControl.prototype._baseConfig,
        false
    );

    /**
     *  Bound to `this._dropdowncontrol`'s `prechange`
     *  event, centers `this.panel` on the screen before
     *  displaying it.
     *
     *  @method _centerPreChange
     *  @private
     *
     *  @param  {Event}     e
     *  @param  {Object}    data    See SDE.events.PanelControl.prechange
     */

    function _centerPreChange(e, data) {
        SDE.log('LightboxControl: Called `centerPreChange` with e:%o, data:%o', e, data);
        SDE.widget.Overlay.center(data.panel);
    }

    /**
     *  Show the lightbox, dim the site
     *  @method showHandler
     *  @private
     *
     *  @param  {Event}     e
     *  @param  {Object}    data    See SDE.events.PanelControl.prechange
     */

    function _showHandler(e, data) {
        SDE.log('LightboxControl: Called `showHandler` with e:%o, data:%o', e, data);
        SDE.widget.Overlay.dim();

        var img = data.panel.find('img');

        if (img.data('src') !== null) {
            img.attr('src', img.data('src'));
        }

        data.panel.fadeIn(
            'slow',
            function () {
                data.panel.focus();
                data.panel.trigger(
                    SDE.events.LightboxControl.onvisible,
                    data
                );
            }
        );
    }

    /**
     *  Hide the lightbox, brighten the site
     *  @method hideHandler
     *  @private
     *
     *  @param  {Event}     e
     *  @param  {Object}    data    See SDE.events.PanelControl.prechange
     */

    function _hideHandler(e, data) {
        SDE.log('LightboxControl: Called `hideHandler` with e:%o, data:%o', e, data);
        SDE.widget.Overlay.brighten();
        data.panel.fadeOut('fast');
    }

    /**
     *
     * @param userConfig
     * @constructor
     *
     * @public
     */
    SDE.widget.LightboxControl = function (userConfig) {
        SDE.log.group('LightboxControl');
        SDE.log('Constructor, userConfig:%o', userConfig);
        //  0.  Set up alias for use inside closures.
        var controller = this;

        //  1.  Instantiate the `PanelControl` from which this inherits:
        SDE.widget.PanelControl.prototype.constructor.call(this, userConfig);

        SDE.log('Final config: %o', this.config);

        //  2.  Give `panel` a class of `overlaid`, and a `role` of `dialog`
        this.panel
            .addClass('lightbox')
            .attr('role', 'dialog');

        //  3.  Based on configuration, set up some events, and manipulate DOM
        function _closeHandler() {
            controller.hide();
            return false;
        }

        if (this.config.get('clickToClose')) {
            SDE.log('Binding `clickToClose` handler.');
            this.panel.bind('click', _closeHandler);
        }

        if (this.config.get('clickOutsideToClose')) {
            SDE.log('Binding `clickOutsideToClose` handler.');
            SDE.widget.Overlay.bind(SDE.events.Overlay.click, _closeHandler);
        }

        if (this.config.get('escToClose')) {
            this.panel.keypress(function (e) {
                var ESCAPE_KEY = 27;
                if (e.which === ESCAPE_KEY) {
                    _closeHandler();
                }
            });
        }

        this.panel.bind(
            SDE.events.PanelControl.preshow,
            this.centerPreChange
        ).bind(
            SDE.events.PanelControl.onhide,
            this.hideHandler
        ).bind(
            SDE.events.PanelControl.onshow,
            this.showHandler
        ).hide();
        SDE.log.groupEnd();
    };

    // Setup prototype chain
    SDE.extend(SDE.widget.PanelControl, SDE.widget.LightboxControl);
    SDE.widget.LightboxControl.prototype._baseConfig = _baseConfig;
    SDE.widget.LightboxControl.prototype.centerPreChange = _centerPreChange;
    SDE.widget.LightboxControl.prototype.hideHandler = _hideHandler;
    SDE.widget.LightboxControl.prototype.showHandler = _showHandler;
}());
/*global SDE, window: false */
(function () {
    /**
     *  Overlay is used in combination with other widgets (video, dropdown)
     *  to focus the user's attention on a modal window by dimmimg the rest
     *  of the site.  Overlay is a singleton, which has two methods to
     *  toggle the dimmimg:
     *
     *  <pre><code>
     *      var config = { 'speed': 600, 'callback': function () { } };
     *      SDE.widget.Overlay.dim( config );
     *      SDE.widget.Overlay.brighten( config );
     *      SDE.widget.Overlay.toggle( config );
     *  </code></pre>
     *
     *  @TODO:  Replace `callback` with events for `predim`, `ondim`,
     *          `prebrighten`, `onbrighten`, `prechange`, `onchange`
     *
     *  @author     Mike West <Mike.West@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace  SDE.widget
     *  @class      Overlay
     *  @requires SDE
     */

    SDE.namespace('widget.Overlay');

    SDE.namespace('events.Overlay');
    SDE.events.Overlay = {
        /**
         *  Triggered _before_ the Overlay's visibility is toggled,
         *  returning a data object with the following properties:
         *
         *  @event  SDE.events.Overlay.prechange
         *  @param  {Overlay}   overlay The overlay.
         *  @param  {Boolean}   visible `True` if the overlay is visible (dim site),
         *                              `False` otherwise.
         */
        'prechange': 'SDE_events_Overlay_prechange',
        /**
         *  Triggered _after_ the Overlay's visibility is toggled,
         *  returning a data object with the following properties:
         *
         *  @event  SDE.events.Overlay.onchange
         *  @param  {Overlay}   overlay The overlay.
         *  @param  {Boolean}   visible `True` if the overlay is visible (dim site),
         *                              `False` otherwise.
         */
        'onchange':  'SDE_events_Overlay_prechange',
        /**
         *  Triggered by user interaction with the overlay (e.g.
         *  the user clicks outside of whatever is being highlighted)
         *
         *  @event  SDE.events.Overlay.click
         *  @param  {Overlay}   overlay The overlay.
         *  @param  {Boolean}   visible `True` if the overlay is visible (dim site),
         *                              `False` otherwise.
         */
        'click':     'SDE_events_Overlay_click'
    };

    /**
     *  Cached reference to the overlay `DIV`
     *  @property   _overlay
     *  @type       {jQuery}
     *  @private
     *  @static
     */
    var _overlay = null,
        /**
         *  The page's current state
         *  @property   _state
         *  @type       {String}
         *  @private
         *  @static
         */
        _state = 'bright',
        /**
         *  Overlay's base config
         *  @property   _baseConfig
         *  @type       {Object}
         *  @private
         *  @static
         *  @final
         */
        _baseConfig = {
            /**
             *  The speed at which the overlay should fade in/out
             *
             *  @config     speed
             *  @type       {Integer}
             *  @default    600
             */
            'speed':    600,
            /**
             *  A callback to be executed ondim or onbrighten
             *
             *  @config     callback
             *  @type       {function}
             *  @default    null
             */
            'callback': null
        };

    /**
     *  All the events generated by Overlay have the same signature, so
     *  their generation is encapsulated here.
     *
     *  @method _triggerEvent
     *  @private
     *  @param  type    {String}    The event type to be triggered
     */
    function _triggerEvent(type) {
        _overlay.trigger(
            type,
            {
                'overlay':   SDE.widget.Overlay,
                'visiblity': (_state === 'dim')
            }
        );
    }

    /**
     *  Generates the overlay `div` that will be used for lightbox effects
     *
     *  @method overlayGenerator
     *  @private
     *  @returns {jQuery}
     */
    function _overlayGenerator() {
        var overlay = SDE.$('<div id="' + SDE.uid() + '" style="background: #000;"></div>');
        overlay
            .css({
                'position': 'absolute',
                'top':      0,
                'left':     0,
                'opacity':  0,
                'z-index':  1000000
            }).bind(
                'click',
                function () {
                    _triggerEvent(SDE.events.Overlay.click);
                }
            );
        return overlay;
    }

    /**
     *  The `_overlay` itself is private, but we want to be able to bind
     *  to events triggered with it as their target.  Here's a wrapper
     *  for just that eventuality.
     *
     *  @method bind
     *  @public
     *  @param  type        {String}    The event type to be bound
     *  @param  callback    {Function}  The callback to be executed when
     *                                  the `type` event is triggered.
     */
    function _bind(type, callback) {
        if (!_overlay) {
            _overlay = _overlayGenerator();
        }
        _overlay.bind(type, callback);
    }

    /**
     *  Analog to `bind`, `unbind` wraps the underlying event model
     *  to allow removal of bound events.
     *
     *  @method unbind
     *  @public
     *  @param  type        {String}    The event type to be unbound
     *  @param  callback    {Function}  The callback not to be executed when
     *                                  the `type` event is triggered.
     */
    function _unbind(type, callback) {
        if (!_overlay) {
            _overlay = _overlayGenerator();
        }
        _overlay.unbind(type, callback);
    }

    /**
     *  Brightens the site by contracting the `overlay` div and decreasing it's opacity
     *
     *  @method brighten
     *  @param  {Object}    config  Configuration for Overlay
     *  @public
     */
    function _brighten(config) {
        SDE.log('Overlay: brightening site with config:%o', config);
        config = new SDE.utils.Config(_baseConfig, config);
        if (!_overlay) {
            _overlay = _overlayGenerator();
        }

        _triggerEvent(SDE.events.Overlay.prechange);

        _overlay.stop().animate(
            { 'opacity': 0 },
            config.get('speed'),
            function () {
                SDE.$(this).css({
                    'height': 0,
                    'width':  0
                });
                if (typeof config.get('callback') === 'function') {
                    config.get('callback')();
                }
                _state = 'bright';
                _triggerEvent(SDE.events.Overlay.onchange);
            }
        );
    }

    /**
     *  Dims the site by expanding the `overlay` div and increasing it's opacity
     *
     *  @method dim
     *  @param  {Object}    config  Configuration for Overlay
     *  @public
     */
    function _dim(config) {
        SDE.log('Overlay: dimming site with config:%o', config);
        config = new SDE.utils.Config(_baseConfig, config);
        if (!_overlay) {
            _overlay = _overlayGenerator();
        }
        if (!_overlay[0].parentNode || _overlay[0].parentNode.nodeName !== 'BODY') {

            SDE.log('`overlay` isn\'t yet a child of `body`: Appending.');
            _overlay.appendTo('body');
        }
        _triggerEvent(SDE.events.Overlay.prechange);
        _overlay.stop().css(
            {
                'height':  SDE.$('body').height(),
                'width':   SDE.$(window).width(),
                'opacity': 0
            }
        ).animate(
            {
                'opacity': 0.5
            },
            config.get('speed'),
            function () {
                if (typeof config.get('callback') === 'function') {
                    config.get('callback')();
                }
                _state = 'dim';
                _triggerEvent(SDE.events.Overlay.onchange);
            }
        );
    }

    /**
     *  Dims a bright site, brightens a dim site.
     *
     *  @method toggle
     *  @param  {Object}    config  Configuration for Overlay
     *  @public
     */
    function _toggle(config) {
        var fn = _state === 'dim' ? _brighten : _dim;
        fn(config);
    }

    /**
     *  Given a domObject, `center` places it in the middle of the screen
     *
     *  @static
     *  @method center
     *  @private
     */
    function _center(domObj) {
        var win = SDE.$(window),
            obj = SDE.$(domObj);

        obj.css({
            'left':     Math.max(((win.width() - obj.width()) / 2) + win.scrollLeft()) + 'px',
            'position': 'absolute',
            'top':      Math.max(0, ((win.height() - obj.height()) / 2) + win.scrollTop()) + 'px'
        });
    }

    SDE.widget.Overlay = {
        'dim':      _dim,
        'brighten': _brighten,
        'toggle':   _toggle,
        'center':   _center,
        'bind':     _bind,
        'unbind':   _unbind
    };
}());
/*global SDE, document */
(function () {
    /**
     *  The TabControl isn't a widget per-se, rather a base upon which a family
     *  of widgets can be built.  It handles the creation of a generic "tab"
     *  element, including the creation of a navigation list, and generation
     *  of the proper ARIA roles.  In short, it does everything necessary from
     *  a backend perspective, and relies on some other class to handle the
     *  frontend visual changes via triggered events.
     *
     *  The control expects to work with HTML resembling:
     *
     *      <div class="tabbox">
     *          <div class="header">Top Listen</div>
     *          <div class="body">
     *              <ul>
     *                  <li class="current">
     *                      {Module Goes Here}
     *                  </li>
     *                  <li class="current">
     *                      {Module Goes Here
     *                  </li>
     *              </ul>
     *          </div>
     *          <div class="footer"></div>
     *      </div>
     *
     *  In this case, the `root` configuration parameter would be `.tabbox`,
     *  matching the containing DIV.
     *
     *  @author     Mike West <Mike.West@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace  SDE.widget
     *  @class      TabControl
     *  @constructor
     *  @param      {Object}    userConfig  The TabControl's configuration
     *
     *  @requires   SDE
     */

    SDE.namespace('widget.TabControl');

    SDE.namespace('events.TabControl');

    SDE.events.TabControl = {
        /**
         *  Triggered _after_ a new tab is focused.  This event
         *  is only triggered for _new_ tabs.  Refocusing the currently focused
         *  tab will _not_ generate an `onchange` event.  This event returns a
         *  data object with the following properties:
         *
         *  @event  SDE.events.TabControl.prechange
         *  @param  {jQuery}    root    A jQuery collection containing the
         *                              widget's root node.
         *  @param  {jQuery}    nav     A jQuery collection containing the
         *                              widget's navigation root (generally
         *                              a `ul`).
         *  @param  {jQuery}    items   A jQuery collection containing the
         *                              widget's item list (generall a set
         *                              of `li`s).
         *  @param  {int}   current     The index of the currently selected item
         *                              (0-based).
         *  @param  {int}   new         The index of the to-be-selected
         *                              item (0-based).
         */
        'prechange':        'SDE_events_TabControl_prechange',
        /**
         *  Triggered _before_ a new tab is focused.  As noted
         *  for `onchange`, this event only triggers if a change will actually
         *  occur: if will _not_ be triggered if the `new` tab is the same as
         *  the current tab.  The event returns a data object with the following
         *  properties:
         *
         *  @event  SDE.events.TabControl.onchange
         *  @param  {jQuery}    root    A jQuery collection containing the
         *                              widget's root node.
         *  @param  {jQuery}    nav     A jQuery collection containing the
         *                              widget's navigation root (generally
         *                              a `ul`).
         *  @param  {jQuery}    items   A jQuery collection containing the
         *                              widget's item list (generall a set
         *                              of `li`s).
         *  @param  {int}   previous    The index of the previously selected
         *                              item (0-based).
         *  @param  {int}   current     The index of the newly selected item
         *                              (0-based).
         *
         */
        'onchange':         'SDE_events_TabControl_onchange',
        /**
         *  Triggered when a user interacts with a navigational element.
         *
         *  @event  SDE.events.TabControl.onnavinteraction
         *  @param  {jQuery}    root    A jQuery collection containing the
         *                              widget's root node.
         *  @param  {jQuery}    nav     A jQuery collection containing the
         *                              widget's navigation root (generally
         *                              a `ul`).
         *  @param  {jQuery}    items   A jQuery collection containing the
         *                              widget's item list (generall a set
         *                              of `li`s).
         *  @param  {Event}     event   The jQueryified event generated by
         *                              the user which triggered this event
         *                              (usually a `click`).
         */
        'onnavinteraction': 'SDE_events_TabControl_onnavinteraction'
    };

    /**
     *  The TabControl's base config
     *
     *  @property   _baseConfig
     *  @type       {Object}
     *  @static
     *  @protected
     */
    var _baseConfig = {
        /**
         *  The TabControl's root element.  May be a selector,
         *  DOMElement, or jQuery collection.
         *
         *  @config     root
         *  @type       {String|Element|jQuery}
         */
        'root': null,

        /**
         *  The type of navigation to create.
         *
         *  @config     buttonType
         *  @type       {String} Either 'button' or 'a'.
         *  @default  'button'
         */
        'buttonType': 'button',

        /**
         * A callback used when the widget has been created. The callback
         * is responsible for inserting the navigation component into the DOM.
         *
         * @config    onCreateCallback
         * @type    {Function}
         */
        'onCreateCallback': null,

        /**
         * Whether or not to react to mouseover events.
         *
         * @config    changeOnMouseOver
         * @type    {Boolean}
         * @default    true
         */
        'changeOnMouseOver': true
    };

    /**
     *  Moves the widget's focus to the specified item, updating the
     *  `current` index, and triggering `SDE.events.TabControl.prechange`
     *  and `SDE.events.TabControl.onchange` events.
     *
     *  @method refocus
     *  @public
     *
     *  @param  {Number}   index   The index of the selected item, 0-based
     */
    function _refocus(index) {
        SDE.log('TabControl: Refocusing root:%o to index:%o', this.root[0], index);

        if (index >= this.items.length) {
            index = 0;
        } else if (index < 0) {
            index = this.items.length - 1;
        }

        //  0.  Break out early if the new item is the current item
        if (this.current === index) {
            return;
        }

        // When Tabbox is an liveticker, set the height seperate for each tab,
        // because the tabs have different heights and the user won't much whitespace.
        if (SDE.$(this.root[0]).hasClass('sportticker')) {
            var height = SDE.$(this.items[index]).show().children().show().parent().height();
            SDE.$(this.items[index]).parent().css('height', height);
            SDE.log('TabControl: Here we have an liveticker-tabbox. We set the height of the selected tab to %dpx', height);
        }

        //  1.  Trigger the `prechange` event.
        this.root.trigger(
            SDE.events.TabControl.prechange,
            {
                'root':    this.root,
                'nav':     this.nav,
                'items':   this.items,
                'current': this.current,
                'new':     index
            }
        );

        //  2.  Update `current` class pointer, as well as ARIA roles
        this.items
            .attr('aria-hidden', 'true')
            .removeClass('current')
            .eq(index)
            .attr('aria-hidden', 'false')
            .addClass('current');
        this.nav.find('li')
            .removeClass('current')
            .eq(index)
            .addClass('current');

        //  3.  Trigger the `onchange` event.
        this.root.trigger(
            SDE.events.TabControl.onchange,
            {
                'root':    this.root,
                'nav':     this.nav,
                'items':   this.items,
                'current': index,
                'old':     this.current
            }
        );

        //  4.  Update this object's `current` index.
        this.current = index;
    }

    /**
     *  Show the first item in the list
     *
     *  @method first
     *  @public
     */
    function _show_first_item() {
        this.refocus(0);
    }

    /**
     *  Show the last item in the list
     *
     *  @method last
     *  @public
     */
    function _show_last_item() {
        this.refocus(this.items.length - 1);
    }

    /**
     *  Show the next item in the list, wrapping from last to first
     *
     *  @method next
     *  @public
     */
    function _show_next_item() {
        this.refocus(this.current + 1);
    }

    /**
     *  Show the previous item in the list, wrapping from first to last
     *
     *  @method previous
     *  @public
     */
    function _show_previous_item() {
        this.refocus(this.current - 1);
    }

    SDE.widget.TabControl = function TabControl(userConfig) {
        SDE.log.group('TabControl');
        SDE.log('Constructor, called with config:%o', userConfig);

        /**
         *  @property   config
         *  @type       {Object}
         *  @protected
         */
        this.config = new SDE.utils.Config(_baseConfig, userConfig);

        //  Alias current object so that it's accessible inside closures
        var tabcontrol = this;

        /**
         *  A unique basename used to generate ARIA IDs
         *
         *  @property   basename
         *  @type       {String}
         *  @protected
         */
        this.basename = SDE.uid();

        //  2.  Cache object references.
        /**
         *  A jQuery collection containing the TabControl's
         *  root (specified in the config as `root`)
         *
         *  @property   root
         *  @type       {jQuery}
         *  @protected
         */
        this.root = SDE.$(this.config.get('root'));
        if (this.root.length === 0) {
            SDE.log.warn('Config param `root` (userConfig:%o) matches no elements.  Exiting early.', userConfig);
            SDE.log.groupEnd();
            return;
        }
        /**
         *  A jQuery collection containing the items which
         *  represent the tab panels.
         *
         *  @property   items
         *  @type       {jQuery}
         *  @protected
         */
        this.items = this.root.find('> .body > ul > li');
        /**
         *  The index of the currently visible item
         *
         *  @property   current
         *  @type       {Number}
         *  @protected
         */
        this.current = 0;

        //  Mark each of the `item`s with an ID in the form
        //  `{basename}_{index}`, and set up proper ARIA
        //  labels and `hidden` properties.
        this.items
            .each(function (i) {
                var id = tabcontrol.basename + '_' + i,
                    obj = SDE.$(this);
                obj.attr({
                    'id':              id,
                    'role':            'tabpanel',
                    'aria-labelledby': id + '_nav',
                    'aria-hidden':     'true'
                });
                if (obj.hasClass('current')) {
                    tabcontrol.current = i;
                }
            })
            .filter('.current')
            .attr('aria-hidden', 'false');

        //  Generate a list of navigation elements, and bind a
        //  handler to deal with user interaction.

        /**
         *  The TabControl's navigation list
         *
         *  @property   nav
         *  @type       {jQuery}
         *  @protected
         */

        this.nav = document.createElement('ol');
        /*jslint vars: true */
        var i,
            buttonType = this.config.get('buttonType'),
            li,
            button,
            title;

        for (i = 1; i <= this.items.length; i = i + 1) {
            li = document.createElement('li');
            button = document.createElement(buttonType);

            if (buttonType === 'button') {
                // Look for text inside a `head` section of the relevant
                // element of the `items` list.  If it's there, use it as
                // the button text, if not, use the current index.
                title = this.items.eq(i - 1).find('.header').text();
                if (title) {
                    button.innerHTML = title;
                } else {
                    title = this.items.eq(i - 1).find('.header a').text();
                    if (title) {
                        button.innerHTML = title;
                    } else {
                        button.innerHTML = i;
                    }
                }
            } else {
                button.innerHTML = i;
                SDE.$(button).attr('href', '#');
            }

            button.TabControlIndex = i - 1;
            if (this.current === i - 1) {
                SDE.$(li).addClass('current');
            }
            li.appendChild(button);
            this.nav.appendChild(li);
            // add class name for each button
            SDE.$(button).addClass('tabbutton' + i);
        }

        // add class names for first and last item
        SDE.$(this.nav).find('li:first').addClass('first');
        SDE.$(this.nav).find('li:last').addClass('last');

        //  5.  Generate a handler to deal with user interaction
        /**
         *  Handle a user's interaction with the generated navigation list by
         *  triggering `SDE.widget.TabControl.events.onnavinteraction`
         *
         *  @param  {Event} e   The interaction event.
         *  @method _handle_nav_interaction
         *  @static
         *  @private
         */
        function _handle_nav_interaction(e) {
            // Break out early if the item isn't a tab control.
            if (e.target.TabControlIndex >= 0) {
                SDE.log('TabControl: Triggering `onnavinteraction` on root:%o', tabcontrol.root);
                tabcontrol.root.trigger(
                    SDE.events.TabControl.onnavinteraction,
                    {
                        'root':  tabcontrol.root,
                        'nav':   tabcontrol.nav,
                        'items': tabcontrol.items,
                        'event': e
                    }
                );
                return false;
            }

            return true;

        }

        //  6.  Bind the handler to the nav element's mouseenter event, add ARIA
        //      roles, and append the nav element to the page.
        this.nav = SDE.$(this.nav)
            .attr('role', 'tablist')
            .click(_handle_nav_interaction);

        if (this.config.get('changeOnMouseOver')) {
            this.nav.mouseover(_handle_nav_interaction);
        }

        var callback = this.config.get('onCreateCallback');
        if (callback) {
            callback(this.nav);
        } else {
            this.nav.appendTo(this.root.find('> .footer'));
        }

        SDE.log.groupEnd();
    };

    SDE.widget.TabControl.prototype._baseConfig = _baseConfig;
    SDE.widget.TabControl.prototype.refocus = _refocus;
    SDE.widget.TabControl.prototype.first = _show_first_item;
    SDE.widget.TabControl.prototype.last = _show_last_item;
    SDE.widget.TabControl.prototype.next = _show_next_item;
    SDE.widget.TabControl.prototype.previous = _show_previous_item;
}());
/*global SDE, window */
(function () {
    /**
     *  Provides basic validation and background submission/processing
     *  for forms.
     *
     *  @author     Mike West <Mike.West@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace  SDE.widget
     *  @class      FormControl
     *
     *  @requires   SDE
     */
    SDE.namespace('widget.FormControl');

    SDE.namespace('events.FormControl');
    SDE.events.FormControl = {
        /**
         *  Triggered before form submission (which is a convinient time
         *  to perform some validation).
         *
         *  @event  SDE.events.FormControl.presubmit
         */
        'presubmit': 'SDE_events_FormControl_presubmit',
        /**
         *  Triggered on form submission
         *
         *  @event  SDE.events.FormControl.onsubmit
         */
        'onsubmit':  'SDE_events_FormControl_onsubmit',
        /**
         *  Triggered on successful FormControl submission
         *
         *  @event  SDE.events.FormControl.onsuccess
         *  @param  {jQuery}    form        jQuery collection containing the widget's
         *                                  form element.
         *  @param  {Object}    response    Response data, parsed out of the backend's
         *                                  JSON response.
         */
        'onsuccess': 'SDE_events_FormControl_onsuccess',
        /**
         *  Triggered on FormControl submission failure
         *
         *  @event  SDE.events.FormControl.onerror
         *  @param  {jQuery}    form        jQuery collection containing the widget's
         *                                  form element.
         *  @param  {Number}       status      The HTTP status from the backend API.
         *  @param  {String}    error       The error message given from the backend API.
         */
        'onerror':   'SDE_events_FormControl_onerror'
    };

    SDE.$.event.special[SDE.events.FormControl.presubmit] = {
        '_default': function (e) {
            SDE.log('Triggering `onsubmit` from `presubmit`\'s default handler. e:%o', e);
            SDE.$(e.target).trigger(SDE.events.FormControl.onsubmit);
        }
    };

    /**
     *  FormControl base configuration
     *  @property   _baseConfig
     *  @protected
     *  @static
     */
    var _baseConfig = {
        /**
         *  By default, hitting `enter` will submit the form.  Set this to
         *  `false` to prevent that behavior.
         *
         *  @config     enterToSubmit
         *  @type       {Boolean}
         *  @default    true
         */
        'enterToSubmit': true,
        /**
         *  A selector matching the elements on the page that can be used to
         *  submit the form (`toggle` used for consistency with other control
         *  widgets on the site).  This selector is evaluated relative to
         *  the selector provided in `form`.
         *
         *  @config     toggle
         *  @type       {String}
         *  @default    '.submit'
         */
        'toggle':        '.submit',
        /**
         *  The form to be controlled.
         *
         *  @config     form
         *  @type       {String|jQuery|Element}
         *  @default    null
         */
        'form':          null,
        /**
         *  Function providing validation for the form.  The function will be
         *  run in the context of the FormControl object, and will have access
         *  to the form itself via `this.form`.  Any visual notification of
         *  failure is the function's responsibility: FormControl is display-
         *  agnostic to whatever extent possible.
         *
         *  Expected to return `true` for a valid form, and `false` for an
         *  invalid form.
         *
         *  @config     validator
         *  @type       {Function}
         *  @default    function () {}
         */
        'validator':     function defaultFormControlValidator() {
        },
        /**
         *  Function gathering data for the form submission.  The function
         *  will be executed in the context of the FormControl object,
         *  and will have access to the form itself via `this.form`.
         *  The function must return data in the following format:
         *
         *      {
         *          'action':   [URL to which a POST should be made],
         *          'method':   [POST/GET],
         *          'data':     [serialized data in URL format (e.g. `key1=value1&key2=value2`]
         *      }
         *
         *  This function will be executed directly before form
         *  submission if the form is determined to be valid (via
         *  the `validator` function above.
         *
         *  @config     gatherer
         *  @type       {Function}
         *  @default    function () {}
         */
        'gatherer':      function defaultFormControlGatherer() {
        }
    };

    /**
     *  Handle a form submission by validating the selection, and
     *  sending the POST via JavaScript in the background.
     *
     *  @method submitHandler
     *  @protected
     */
    function _submitHandler() {
        SDE.log.group('FormControl Submission');

        var submission = this.gatherSubmission();

        SDE.log('Submitting form with data:%o', submission);

        SDE.$.ajax({
            'type':    submission.method,
            'url':     submission.action || window.location.href, /* Firefox doesn't like blank URLs */
            'data':    submission.data,
            'success': SDE.$.proxy(function formControlSubmitSuccess(data) {
                SDE.log('Success: %s', data);
                this.form
                    .trigger(SDE.events.FormControl.onsuccess, {
                        'form':     this.form,
                        'response': data
                    });
                SDE.log.groupEnd();
            }, this),
            'error':   SDE.$.proxy(function formControlSubmitError(xhr, stat, error) {
                SDE.error('Failure: xhr:%o, stat:%o, error:%o', xhr, stat, error);
                this.form
                    .trigger(SDE.events.FormControl.onerror, {
                        'form':   this.form,
                        'status': stat,
                        'error':  error
                    });
                SDE.log.groupEnd();
            }, this)
        });

        return false;
    }

    /**
     *  Construct a FormControl object
     *
     *  @method FormControl
     *  @constructor
     *  @public
     *
     *  @param  {Object}    userConfig  A configuration object
     */
    SDE.widget.FormControl = function FormControl(userConfig) {
        SDE.log.group('FormControl');
        SDE.log('Constructor, userConfig:%o, baseConfig:%o', userConfig, this._baseConfig);

        // For use in closures.
        var control = this;

        this.config = new SDE.utils.Config(this._baseConfig, userConfig);

        this.form = SDE.$(this.config.get('form'));
        this.toggle = this.form.find(this.config.get('toggle'));
        this.validateForm = this.config.get('validator');
        this.gatherSubmission = this.config.get('gatherer');

        if (this.form.length === 0) {
            SDE.log.warn('Exiting early: No elements found matching the provided `form` selector (%s)', userConfig.form);
            SDE.log.groupEnd();
            return;
        }

        SDE.log('Binding validation and submission to click events on `toggle` elements.');
        this.toggle.bind(
            'click',
            function triggerPreSubmit() {
                control.form.trigger(
                    SDE.events.FormControl.presubmit,
                    {
                        'form': control.form
                    }
                );
                return false;
            }
        );
        this.form.bind(
            SDE.events.FormControl.onsubmit,
            SDE.$.proxy(this, 'submitHandler')
        ).keypress(function (e) {
            var ENTER_KEY = 13;
            if (e.which === ENTER_KEY) {
                control.form.submit();
            }
        });

        if (this.validateForm) {
            SDE.log('Binding validation to form\'s `presubmit` event.');
            this.form.bind(
                SDE.events.FormControl.presubmit,
                SDE.$.proxy(this, 'validateForm')
            );
        }
        SDE.log.groupEnd();
    };

    SDE.widget.FormControl.prototype._baseConfig = _baseConfig;
    SDE.widget.FormControl.prototype.submitHandler = _submitHandler;
    SDE.widget.FormControl.prototype.validateForm = function () {};
    SDE.widget.FormControl.prototype.gatherSubmission = function () {};
}());
/*global SDE */
(function () {

    /**
     *  ContainerboxControl can be used to display a given DOM-object
     *  in a pre-styled overlay-box.
     *
     *  @author     Tom Andersson <Thomas.Andersson@netlight.de>
     *  @version    $Id$
     *
     *  @namespace  SDE.widget
     *  @class      ContainerboxControl
     *  @constructor
     *
     *  @requires   SDE
     */

    SDE.namespace('widget.ContainerboxControl');

    SDE.namespace('events.ContainerboxControl');

    /**
     *  ContainerboxControl's base config
     *
     *  @property _baseConfig
     *  @private
     *  @final
     *  @static
     */

    var _baseConfig = {
        /**
         *  By default, a close button will be included in the
         *  'container'
         *
         *  @config     closeButton
         *  @type       {Boolean}
         *  @default    true
         */
        'closeButton': true,

        /**
         *  By default, clicking anywhere outside the `container`
         *  element will close the element.  Set this to `false`
         *  to disable that behavior.
         *
         *  @config     clickOutsideToClose
         *  @type       {Boolean}
         *  @default    true
         */
        'clickOutsideToClose': true,

        /**
         * The element we're 'boxing' in
         *
         * @config      displayElement
         * @type        {String|Element|jQuery}
         * @default     null
         */
        'displayElement': null,

        /**
         * The name to give to the container.
         *
         * @config      containerName
         * @type        {String}
         * @default     null
         */
        'containerName': null,

        /**
         * The direction of the arrow. -1 means no arrow.
         * Then it goes around counter clockwise:
         * 0 means top, 1 means right, 2 means bottom, 3 means left.
         *
         * @see SDE.widget.ContainerboxControl.ArrowDirection
         *
         *  @config    arrowDirection
         *  @type    {Integer}
         *  @default  -1
         */
        'arrowDirection': -1,

        /**
         *
         */
        'callback': null
    };

    function _toggle(e) {
        var clickFunction,
            body,
            callback = this.config.get('callback'),
            container = this.container,
            eventName = 'click.' + this.containerName,
            arrowDirection = this.config.get('arrowDirection') !== undefined ?
                    this.config.get('arrowDirection') : SDE.widget.ContainerboxControl.ArrowDirection.NONE;

        // Reposition the container in case it's meant to appear next to the click point coordinates
        if (e && arrowDirection !== SDE.widget.ContainerboxControl.ArrowDirection.NONE) {
            this.reposition(e.pageX, e.pageY);
        }

        // We need this workaround for the invisible fb button bug in IE and FF.
        if (container.is('#sharingbarpopup')) {
            if (this.container.hasClass('offscreen')) {
                this.container.hide();
                this.container.removeClass('offscreen');
                this.container.addClass('positioned');
            }
        }

        this.container.toggle();

        if (callback) {
            callback(this.container.is(':visible'));
        }

        // Add the extra event handler if we're meant to be closable on clicks
        // outside the container
        if (this.config.get('clickOutsideToClose')) {
            body = SDE.$('body');

            clickFunction = function (e) {
                var target = SDE.$(e.target);
                if (!target.closest(container).length) {
                    container.hide();
                    body.off(eventName);
                }
            };

            if (this.container.is(':visible')) {
                /*global setTimeout */
                setTimeout(function () {
                    body.on(eventName, clickFunction);
                }, 100);
            } else {
                body.off(eventName);
            }
        }
    }

    function _reposition(positionTop, positionLeft) {
        var container = this.container,
            arrowDirection,
            arrow;

        arrowDirection = this.config.get('arrowDirection');
        switch (arrowDirection) {
        case SDE.widget.ContainerboxControl.ArrowDirection.LEFT:
        case SDE.widget.ContainerboxControl.ArrowDirection.RIGHT:
            arrow = container.find('.containerBox-arrow-border');
            positionTop = positionTop - (parseInt(arrow.css('top'), 10) + (arrow.outerHeight(true) / 2));
            container.css('top', positionTop);
            break;
        case SDE.widget.ContainerboxControl.ArrowDirection.UP:
        case SDE.widget.ContainerboxControl.ArrowDirection.DOWN:
            arrow = container.find('.containerBox-arrow-border');
            positionLeft -= container.outerWidth(true) / 8 + arrow.outerWidth(true) / 2;
            positionTop += arrow.outerHeight(true) / 2;
            container.css('left', positionLeft);
            container.css('top', positionTop);
            break;
        default:
            break;
        }

        this.positionArrow();
    }

    SDE.widget.ContainerboxControl = function (userConfig) {
        SDE.log.group('ContainerboxControl');
        SDE.log('Constructor, userConfig:%o', userConfig);

        /**
         *  @property   config
         *  @type       {Object}
         *  @protected
         */
        this.config = new SDE.utils.Config(this._baseConfig, userConfig);

        var controller = SDE.$(this.config.get('displayElement')),
            parent,
            button,
            container,
            containerArrow,
            containerArrowBorder,
            arrowDirection,
            arrowDirectionClass,
            that = this;

        if (controller.length === 0) {
            SDE.log.warn('Config param `displayElement` (userConfig:%o) matches no elements.  Exiting early.', userConfig);
            SDE.log.groupEnd();
            return;
        }

        container = SDE.$('<div class="containerBox"></div>');
        containerArrowBorder = SDE.$('<div class="containerBox-arrow-border"></div>');
        containerArrow = SDE.$('<div class="containerBox-arrow"></div>');

        parent = controller.parent();

        this.containerName = this.config.get('containerName') || 'containerBox-' + new Date().getTime();
        container.attr('id', this.containerName);

        // Ensure the element is displayed and the container isn't
        // Hiding it causes the fb button to not be visible in FF and IE in the sharingbar popup, and
        // for this reason we'll render the container offscreen and remove the class as soon as the user
        // displays it for the first time.
        if (container.is('#sharingbarpopup')) {
            container.addClass('offscreen');
        } else {
            container.hide();
        }
        controller.show();

        if (this.config.get('closeButton')) {
            button = SDE.$('<span class="close"></span>');
            button.click(function () {
                that.toggle();
                return false;
            });
            container.addClass('closeable').append(button);
        }

        container.appendTo(parent);
        controller.appendTo(container);
        containerArrowBorder.appendTo(container);
        containerArrow.appendTo(container);

        this.container = container;

        // Configure arrow direction and center it along the respective side
        arrowDirection = this.config.get('arrowDirection');

        switch (arrowDirection) {
        case 0:
            arrowDirectionClass = 'top';
            container.addClass('arrowable');
            break;
        case 1:
            arrowDirectionClass = 'right';
            container.addClass('arrowable');
            break;
        case 2:
            arrowDirectionClass = 'bottom';
            container.addClass('arrowable');
            break;
        case 3:
            arrowDirectionClass = 'left';
            container.addClass('arrowable');
            break;
        default:
            arrowDirectionClass = '';
            containerArrowBorder.css('display', 'none');
            containerArrow.css('display', 'none');
            break;
        }

        containerArrowBorder.addClass(arrowDirectionClass);
        containerArrow.addClass(arrowDirectionClass);

        SDE.log.groupEnd();
    };

    function _positionArrow() {
        var container,
            containerWidth,
            containerHeight,
            arrowDirection,
            containerArrow,
            containerArrowBorder,
            containerArrowBorderWidth,
            containerArrowBorderBorderWidth,
            socialMediaMarginTop;

        container = this.container;
        containerWidth = container.outerWidth(true);
        containerHeight = container.outerHeight(true);
        arrowDirection = this.config.get('arrowDirection');
        containerArrow = container.find('.containerBox-arrow');
        containerArrowBorder = container.find('.containerBox-arrow-border');
        containerArrowBorderWidth = containerArrow.outerHeight(true) / 2;
        containerArrowBorderBorderWidth = containerArrowBorder.outerHeight(true) / 2;
        socialMediaMarginTop = parseInt(SDE.$('#sharingbar .socialmedia').css('margin-top'), 10);

        switch (arrowDirection) {
        case 0:
            containerArrow.css('left', (containerWidth - containerArrowBorderWidth) / 8 + 'px');
            containerArrowBorder.css('left', (containerWidth - containerArrowBorderBorderWidth - 4) / 8 + 'px');
            break;
        case 1:
            containerArrow.css('top', (containerHeight - containerArrowBorderWidth - socialMediaMarginTop) / 2 + 'px');
            containerArrowBorder.css('top', (containerHeight - containerArrowBorderBorderWidth - socialMediaMarginTop) / 2 + 'px');
            break;
        case 2:
            containerArrow.css('left', (containerWidth - containerArrowBorderWidth) / 2 + 'px');
            containerArrowBorder.css('left', (containerWidth - containerArrowBorderBorderWidth - 2) / 2 + 'px');
            break;
        case 3:
            containerArrow.css('top', (containerHeight - containerArrowBorderWidth - socialMediaMarginTop) / 2 + 'px');
            containerArrowBorder.css('top', (containerHeight - containerArrowBorderBorderWidth - socialMediaMarginTop) / 2 + 'px');
            break;
        default:
            break;
        }
    }

    SDE.widget.ContainerboxControl.prototype._baseConfig = _baseConfig;
    SDE.widget.ContainerboxControl.prototype.toggle = _toggle;
    SDE.widget.ContainerboxControl.prototype.reposition = _reposition;
    SDE.widget.ContainerboxControl.prototype.positionArrow = _positionArrow;
    SDE.widget.ContainerboxControl.prototype.getContainer = function () {
        return this.container;
    };

    SDE.widget.ContainerboxControl.ArrowDirection = {
        'UP':    0,
        'RIGHT': 1,
        'DOWN':  2,
        'LEFT':  3,
        'NONE':  -1
    };

    _baseConfig.arrowDirection = SDE.widget.ContainerboxControl.ArrowDirection.NONE;
}());
/*global SDE */
(function () {
    /**
     *  The StoredToggleControl is used to show/hide a certain portion of
     *  website, and to store the state of that toggle on the client side.
     *  This means that the state is cookie-based, and won't be tracked
     *  on a true per-user basis.
     *
     *  @author     Thomas Andersson <Thomas.Andersson@netlight.com>
     *  @version    $Id$
     *
     *  @namespace  SDE.widget
     *  @class      StoredToggleControl
     *  @constructor
     *  @param      {Object}    userConfig  The StoredToggleControl's configuration
     *
     *  @requires   SDE
     */

    SDE.namespace('widget.StoredToggleControl');

    SDE.namespace('events.StoredToggleControl');

    /**
     *  The StoredToggleControl's base config
     *
     *  @property   _baseConfig
     *  @type       {Object}
     *  @static
     *  @protected
     */
    var _baseConfig = {
        /**
         *  The control's toggle element.  May be a selector,
         *  DOMElement, or jQuery collection.
         *
         *  @config     toggleElement
         *  @type       {String|Element|jQuery}
         */
        'toggleElement': null,

        /**
         * The element we're showing/hiding.
         *
         * @config    displayElement
         * @type    {String|Element|jQuery}
         */
        'displayElement': null,

        /**
         * The name of this toggle element. Used when storing/retrieving
         * the state.
         *
         * @config  name
         * @type    {String}
         */
        'name': null,

        /**
         * The text to show on the more/less-buttons.
         *
         * @config  stateText
         * @type    {String}
         */
        'stateText': {
            'show': 'mehr',
            'hide': 'weniger'
        },

        /**
         * Whether or not to show the stateText.
         */
        'showText': true
    };

    /**
     * Fetch the state of a toggle.
     *
     * @method getState
     * @public
     */
    function _getState(cookiename, ressortTeaserName) {
        if (SDE.$.cookies.test()) {
            var cookie = SDE.$.cookies.get(cookiename);

            if (cookie) {
                if (cookie.ressortteaser[ressortTeaserName]) {
                    return cookie.ressortteaser[ressortTeaserName];
                }
            }
        } else {
            SDE.log.info('The browser doesn\'t accept cookies!');
        }
        return false;
    }

    /**
     *  Store state of the toggle.
     *
     *  @method storeState
     *  @public
     */
    function _storeState(cookiename, ressortTeaserName, showMore) {
        var entry,
            cookie,
            jsonData;
        if (SDE.$.cookies.test()) {

            cookie = SDE.$.cookies.get(cookiename);

            if (cookie) {

                cookie.ressortteaser[ressortTeaserName] = showMore;

                SDE.$.cookies.set(cookiename, SDE.$.toJSON(cookie), { path: '/', expiresAt: new Date(2050, 11, 31) });
            } else {

                entry = {};
                entry[ressortTeaserName] = showMore;

                jsonData = {};
                jsonData.ressortteaser = entry;

                SDE.$.cookies.set(cookiename, SDE.$.toJSON(jsonData), { path: '/', expiresAt: new Date(2050, 11, 31) });
            }
        } else {
            SDE.log.info('The browser doesn\'t accept cookies!');
        }

    }

    SDE.widget.StoredToggleControl = function StoredToggleControl(userConfig) {

        SDE.log.group('StoredToggleControl');
        SDE.log('Constructor, called with config:%o', userConfig);

        /* Constant */
        var that,
            showMore,
            cookieName = 'sde_personalization';

        userConfig.displayElement = userConfig.displayElement || userConfig.node;

        if (userConfig.showText !== undefined && !userConfig.showText) {
            userConfig.stateText = {
                hide: '',
                show: ''
            };
        }

        /**
         *  @property   config
         *  @type       {Object}
         *  @protected
         */
        this.config = new SDE.utils.Config(this._baseConfig, userConfig);

        /**
         *  A unique basename used to generate ARIA IDs
         *
         *  @property   basename
         *  @type       {String}
         *  @protected
         */
        this.basename = SDE.uid();

        /**
         * The displayElement shown when toggled.
         *
         *  @property    displayElement
         *  @type        {String|Element|jQuery}
         *  @protected
         */
        this.displayElement = SDE.$(this.config.get('displayElement'));
        if (this.displayElement.length === 0) {
            SDE.log.warn('Config param `displayElement` (userConfig:%o) matches no elements.  Exiting early.', userConfig);
            SDE.log.groupEnd();
            return;
        }

        /**
         * The toggleElement used as an event-hook.
         *
         *  @property    toggleElement
         *  @type        {String|Element|jQuery}
         *  @protected
         */
        this.toggleElement = SDE.$(this.config.get('toggleElement'));
        if (this.toggleElement.length === 0) {
            SDE.log.warn('Config param `toggleElement` (userConfig:%o) matches no elements.  Exiting early.', userConfig);
            SDE.log.groupEnd();
            return;
        }

        /**
         * The name used to store the state of this toggle.
         *
         *  @property    name
         *  @type        {String}
         *  @protected
         */
        this.name = this.config.get('name');
        if (!this.name) {
            SDE.log.warn('Config param `name` (userConfig:%o) matches no elements.  Won\'t save state.', userConfig);
            this.name = null;
        } else {
            this.name = SDE.$.trim(this.name);
        }

        that = this;

        // Add event handler to toggle button
        this.toggleElement.click(
            function (e) {
                e.preventDefault();
                if (that.displayElement.css('display') === 'block') {
                    that.showMoreElements(false);
                } else {
                    that.showMoreElements(true);
                }
            }
        );

        SDE.log.groupEnd();

        this.showMoreElements = function (showMoreFlag) {
            var newState;
            if (!showMoreFlag) {
                // We're going from block to none -- set text to be 'show'
                SDE.$(that.toggleElement).text(that.config.get('stateText').show).removeClass('open');
                newState = false;
            } else {
                SDE.$(that.toggleElement).text(that.config.get('stateText').hide).addClass('open');
                newState = true;
            }
            that.displayElement.slideToggle('fast');
            if (that.name) {
                _storeState(cookieName, that.name, newState);
            }
            return false;
        };

        showMore = _getState(cookieName, this.name);
        if (showMore) {
            this.showMoreElements(showMore);
        }
    };

    SDE.widget.StoredToggleControl.prototype._baseConfig = _baseConfig;
}());
/*global SDE, window, document, navigator */
(function () {

    /**
     *  The Video widget handles loading of flash- and html5player in response to
     *  a user's event on a defined object.
     *
     *  <pre><code>
     *      ( {
     *          'panel'           : "[SELECTOR GOES HERE]",
     *          'startevent'      : "[onclick|onload]",
     *          'link'            : "[POSITION OF A-TAG WHEN VIDEO STARTS VIA ONCLICK]",
     *          'xml'             : "[ID OF ARTICLE]",
     *          'preroll'         : "[true|false]",
     *          'size'            : "[sidebar|article|video|embed]",
     *          'zone'            : "[iqdsde|iqdsde/test|iqdsde/dev]",
     *          'video'           : "[PATH TO VIDEO IN MP4-FORMAT]",
     *          'latestVideoPath' : "[PATH TO TOPVIDEOS]",
     *          'sdeXmlPath'      : "[PATH TO WEBSERVICE]"
     *      } );
     *  </code></pre>
     *
     *  @author     Jochen Duerr <jochen.duerr@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace  SDE
     *  @class      widget.Video
     *
     *  @constructor
     *  @param  {Element}    domObj  The DOM object in which the tab is rooted
     *  @param  {Config}        conf    The Videos' config object.
     *
     *  @requires SDE, SDE.swfobject, SDE.html5object
     */

    SDE.namespace('widget.Video');

    var baseConfig,
        playerUrl,
        playerCookie,
        playerConfig,
        expressInstall,
        baselineVersion,
        setCollapsePlayer,
        setResizePlayer,
        setBanderoleVisibility,
        setSocialLinks,
        setPlayerSize,
        getFlashvars;


    /**
     * Config which describes all values which we initial need.
     *
     * @property baseConfig
     * @private
     * @final
     * @static
     */
    baseConfig = {
        /**
         * The selector that matches the widgets on the page.
         *
         * @config panel
         * @type   {String}
         * @default null
         */
        'panel': null,

        /**
         * The selector that describes the event on which video starts with playing.
         *
         * @config startevent
         * @type   {String}
         * @defualt null
         */
        'startevent': null,

        /**
         * The selector that matches the 'a' containing a link to the video's mp4 file (rooted in 'panel').
         *
         * @config link
         * @type   {String}
         * @default null
         */
        'link': null,

        /**
         * The path to XML which contains all information which flashplayer needs to play video correctly
         *
         * @config xml
         * @type   {String}
         * @default null
         */
        'xml': null,

        /**
         * If video will show preroll-ads
         *
         * @config preroll
         * @type   {Boolean}
         * @default false
         */
        'preroll': false,

        /**
         * The video's size defines where video will placed. In an article (=article),
         * on video-article-side (=video), in the sidebar (=sidebar) or as an embed video (=embed)
         *
         * @config size
         * @type   {String}
         * @default null
         */
        'size': null,

        /**
         * The zone defines the environment where the video is running. This is necessary
         * that we dont show live ads on test systems. Possible values are:
         * iqdsde, iqdsde/test, iqdsde/dev
         *
         * @config zone
         * @type   {String}
         * @default null
         */
        'zone': null,

        /**
         * The path to video (in format mp4) for playing in flash and also in html5's <video>-tag
         *
         * @config video
         * @type   {String}
         * @default video
         */
        'video': null,

        /**
         * The path to topvideos: {DOMAIN_OF_POLOPOLY_SYSTEM:PORT}/sdews/topvideos
         *
         * @config latestVideoPath
         * @type   {String}
         * @default null
         */
        'latestVideoPath': null,

        /**
         * The path to webservice: {DOMAIN_OF_POLOPOLY_SYSTEM:PORT}/sdews/contentexport/content/
         *
         * @config sdeXmlPath
         * @type   {String}
         * @default null
         */
        'sdeXmlPath': null
    };
    // baseConfig

    /**
     * Player Url
     *
     * @property    playerUrl
     * @type        {String}
     * @default     /staticassets/other/sde_videoplayer.swf
     */
    playerUrl = 'http://polpix.sueddeutsche.com/staticassets/other/sde_videoplayer.swf?r=20130408';

    /**
     * Name of cookie which will set to check if player is in
     * normal mode or maximized mode
     *
     * @property   playerCookie
     * @type       {String}
     * @default    sde_videoplayer_size
     */
    playerCookie = 'sde_videoplayer_size';

    /**
     * Config which describes all values which we need to differ the different
     * playervariants/-placements
     *
     * @config      playerConfig
     * @type        {Object}
     */
    playerConfig = {

        /**
         * Player params with element size for different placements
         *
         * @config      playerParams
         * @type        {Array}
         */

        playerParams: {
            // player in sidebar
            sidebar:  {
                'width':  300,
                'height': 168,
                'url':    playerUrl
            },
            // player in standardarticle
            article:  {
                'width':  560,
                'height': 315,
                'url':    playerUrl
            },
            // player in videoarticle
            video:    {
                'width':  640,
                'height': 359,
                'url':    playerUrl
            },
            // player in embedarticle
            embed:    {
                'width':  640,
                'height': 359,
                'url':    playerUrl
            },
            // player in maximized mode in videoarticle
            maximize: {
                'width':  940,
                'height': 529,
                'url':    playerUrl
            }
        }
    };
    // playerConfig

    /**
     *  The location of the "expressInstall" flash file that SWFObject will
     *  load if the user's flash version is out of date ("out of date" being
     *  any version less than `SDE.utils.SWF.baselineVersion`.
     *
     *  @property   expressInstall
     *  @type       {String}
     *  @default    '/staticassets/other/expressInstall.swf'
     */
    expressInstall = 'http://polpix.sueddeutsche.com/staticassets/other/expressInstall.swf';

    /**
     *  The minimum version of Flash necessary for a client to play
     *  flash on SDE sites.
     *
     *  @property   baselineVersion
     *  @type       {String}
     *  @default    '9.0.0'
     */
    baselineVersion = '10.2.0';

    /**
     * Method which collapse <object> element at end of video
     * to controllbars height.
     *
     * @param {Object} id
     * @param {String} action   [open|close]
     * @param {String} medium   [flash|hmtl5]
     * @param {String} size     [video|article|sidebar|embed]
     *
     * @return {String} name
     */

    setCollapsePlayer = function (id, action, medium, size) {

        var name = '_sde_' + action + '_' + id;

        // if video will play via flashplayer
        if (medium === 'flash') {
            window[name] = function () {
                var obj = SDE.$('#' + id);
                if (action === 'open') {
                    if (size === 'sidebar') {
                        obj.attr('height', playerConfig.playerParams.sidebar.height);
                    } else if (size === 'article') {
                        obj.attr('height', playerConfig.playerParams.article.height);
                    } else if (size === 'embed') {
                        obj.attr('height', '100%');
                    } else {
                        if (SDE.$.cookies.get(playerCookie) === 'max') {
                            obj.attr('height', playerConfig.playerParams.maximize.height);
                        } else {
                            obj.attr('height', playerConfig.playerParams.video.height);
                        }
                    }
                } else {
                    if (size !== 'embed') {
                        obj.attr('height', 70);
                    }
                }
            };
        } else if (medium === 'html5') {
            // if video will play via alternative player like <video>
            if (action === 'open') {
                SDE.$('#' + id).css('display', 'block').parent().removeClass('collapsed');
                SDE.$('#' + id).get(0).play();
            } else {
                SDE.$('#' + id).css('display', 'none').parent().addClass('collapsed');
                SDE.$('.rid-' + id).on('click', function () {
                    setCollapsePlayer(id, 'open', 'html5', '');
                });
            }
        }

        return name;

    };
    // setCollapsePlayer

    /**
     * Method resize <object> element to max (940x527) or back to
     * default (640x359)
     *
     * @param {String} id       id of video element
     * @param {String} resize   [minimize|maximize]
     * @param {String} medium   [flash|html5]
     *
     * @return {String} name
     */
    setResizePlayer = function (id, resize, medium) {
        var name = '_sde_' + resize + '_' + id,
            obj;

        // if video will play via flashplayer
        if (medium === 'flash') {
            window[name] = function () {
                var obj = SDE.$('#' + id);
                if (resize === 'maximize') {
                    obj.attr({ width: '940', height: '529'}).css('margin-left', '-120px');
                    SDE.$.cookies.set(playerCookie, 'max');
                } else {
                    obj.attr({ width: '640', height: '359'}).css('margin-left', '0');
                    SDE.$.cookies.set(playerCookie, 'min');
                    obj.parent().removeClass('maximize');
                }
            };
        } else {
            // if video will play via alternative player like <video>
            obj = SDE.$('#' + id);
            if (resize === 'maximize') {
                obj.attr({ width: '940', height: '529' });
                SDE.$('.control-bar.cid-' + id).css({ 'width': '940px' }).parent().css({ 'width': '940px', 'margin-left': '-120px' });
                SDE.$.cookies.set(playerCookie, 'max');
            } else {
                obj.attr({ width: '640', height: '359'});
                SDE.$('.control-bar.cid-' + id).css({ 'width': '640px' }).parent().css({ 'width': '640px', 'margin-left': '0' });
                SDE.$.cookies.set(playerCookie, 'min');
                obj.parent().removeClass('maximize');
            }
        }

        return name;

    };
    // setResizePlayer

    /**
     * Method hides or shows the banderole with id 'verwandtevideos' when player
     * start or end with showing preroll ads.
     *
     * @param {Object} uid
     * @param {Object} visibility [hide|show]
     *
     * @return {String} name
     */

    setBanderoleVisibility = function (uid, visibility) {
        var locked = false,
            name = '_sde_' + visibility + '_' + uid;

        window[name] = function () {
            if (!locked) {
                locked = true;

                if (visibility === 'hide') {
                    SDE.$('#verwandtevideos').slideUp('slow');
                } else {
                    SDE.$('#verwandtevideos').slideDown('slow');
                }

                locked = false;
            }
        };

        return name;
    };
    // setBanderoleVisibility

    /**
     * Method handle clicks on sociallinks
     * @param id
     * @param medium
     * @param channel
     * @return {String}
     */
    setSocialLinks = function (id, medium, channel) {

        var name = '_sde_channel_' + id,
            pageUrl = encodeURI(document.location),
            metaTitle = encodeURI(SDE.$('title').text().replace(/\s\s/g, '')),
            sharingSites = {
                facebook: {
                    'url':   'http://www.facebook.com/share.php?u=' + pageUrl + '&display=popup',
                    'param': 'resizable=no,scrollbars=no,width=626,height=436'
                },
                twitter:  {
                    'url':   'https://twitter.com/intent/tweet?original_referer=' + pageUrl +
                                 '&source=tweetbutton&text=' + metaTitle + '&url=' + pageUrl + '&via=SZ',
                    'param': 'resizable=no,scrollbars=no,width=560,height=500'
                },
                google:   {
                    'url':   'https://plus.google.com/share?url=' + pageUrl + '&hl=de',
                    'param': 'resizable=yes,scrollbars=yes,width=1000,height=800'
                }
            };

        // if video will play via flashplayer
        if (medium === 'flash') {
            window[name] = function (channel) {
                SDE.$.each(sharingSites, function (key) {
                    if (key === channel) {
                        window.open(this.url, key, 'channelmode=no,directories=no,location=no,menubar=no,' +
                            'toolbar=no,status=no,left=300,top=100,' + this.param);
                    }
                });
            };
        } else {
            SDE.$.each(sharingSites, function (key) {
                if (key === channel) {
                    window.open(this.url, key, 'channelmode=no,directories=no,location=no,menubar=no,' +
                        'toolbar=no,status=no,left=300,top=100,' + this.param);
                }
            });
        }

        return name;

    };
    // setSocialLinks

    /**
     * Method returns state of playersize
     *
     * @param {Object} id
     *
     * @return {String} name
     */

    setPlayerSize = function (id) {

        var locked = false,
            name = '_sde_playersize_' + id;

        if (!locked) {

            locked = true;

            window[name] = function () {
                return (SDE.$.cookies.get(playerCookie) === 'max') ? 'maximize' : 'minimize';
            };

            locked = false;

        }

        return name;

    };
    // setPlayerSize

    /**
     * Here we define all flashvars which the player needs and are not standard values
     *
     * @param {String}    id
     * @param {Object}   conf
     */

    getFlashvars = function (id, conf) {
        var flashvars = {
            'startVideo':           conf.get('xml'),
            'mode':                 conf.get('size'),
            'showAds':              conf.get('preroll'),
            'zone':                 conf.get('zone'),
            'playerID':             SDE.uid(),
            'latestVideosPath':     null,
            'sdeXmlPath':           null,
            'autoplay':             true,
            'js_close':             setCollapsePlayer(id, 'close', 'flash', conf.get('size')),
            'js_open':              setCollapsePlayer(id, 'open', 'flash', conf.get('size')),
            'js_maximize':          setResizePlayer(id, 'maximize', 'flash'),
            'js_minimize':          setResizePlayer(id, 'minimize', 'flash'),
            'js_hide_banderole':    setBanderoleVisibility(id, 'hide', 'flash'),
            'js_show_banderole':    setBanderoleVisibility(id, 'show', 'flash'),
            'js_sociallinks':       setSocialLinks(id, 'flash', null),
            'js_change_sizebutton': setPlayerSize(id)
        };

        if (baseConfig.latestVideoPath !== '') {
            flashvars.latestVideosPath = conf.get('latestVideoPath');
        }

        if (baseConfig.sdeXmlPath !== '') {
            flashvars.sdeXmlPath = conf.get('sdeXmlPath');
        }

        return flashvars;
    };
    // getFlashvars

    SDE.widget.Video = {

        /**
         * @method init
         * @param {Object} userConfig
         */

        init: function (userConfig) {

            SDE.log.group('Video');
            SDE.log('Constructor called with userConfig:%o', userConfig);

            // Trust no-one, sanity check the input
            userConfig.link = userConfig.startEvent === 'onload' ? null : 'a';
            userConfig.panel = userConfig.panel || userConfig.node;
            userConfig.sdeXmlPath =
                userConfig.sdeXmlPath.match(/^\//) ? 'http://' + document.URL.split('/')[2] + userConfig.sdeXmlPath
                    : userConfig.sdeXmlPath;
            userConfig.latestVideoPath =
                userConfig.latestVideoPath.match(/^\//) ? 'http://' + document.URL.split('/')[2] + userConfig.latestVideoPath
                    : userConfig.latestVideoPath;

            var config = SDE.mergeObjects(baseConfig, userConfig, true),
                deviceAgent = navigator.userAgent.toLowerCase(),
                conf,
                domObj,
                link;
            SDE.log('Embedding an Video: config:%o', config);

            conf = new SDE.utils.Config(config);
            domObj = SDE.$(conf.get('panel'));

            if (!conf) {
                SDE.log.warn('No configuration specified for `Video` instantiation');
                SDE.log.groupEnd();
                return;
            }

            // Get 'link'; this element will replace with video-content
            link = conf.get('startevent') === 'onload' || conf.get('size') === 'embed' ?
                    SDE.$(domObj).find('img').get(0) : SDE.$(domObj).find(conf.get('link')).get(0);
            conf.set('link', link);

            // If cookie for player sizing is set
            if (SDE.$.cookies.test() && SDE.$.cookies.get(playerCookie) === 'max' && conf.get('size') === 'video') {
                domObj.parent().addClass('maximize');
            } else {
                SDE.$.cookies.set(playerCookie, 'min');
                domObj.parent().removeClass('maximize');
            }

            // For sidebar we must set the heigth for 'panel' element
            if (conf.get('size') === 'sidebar') {
                SDE.$(domObj).css('height', SDE.$(domObj).height());
            }

            // Video plays after loading page [onload],
            // not in iPad, because it doesn't run itself, it needs a user interaction
            if (conf.get('startevent') === 'onload' && deviceAgent.indexOf('ipad') === -1) {
                SDE.widget.Video.startVideoByEvent(config);
            }
            else if (conf.get('startevent') === 'onclick' || deviceAgent.indexOf('ipad') > -1) {
                // Video plays after users click on it [onclick], or if device is an iPad
                if (deviceAgent.indexOf('ipad') > -1 || conf.get('size') === 'embed') {
                    SDE.$('.body').on('click', function () {
                        SDE.widget.Video.startVideoByEvent(config);
                    });
                }
                else {
                    SDE.$(link).bind('click', function (e) {
                        e.preventDefault();
                        SDE.widget.Video.startVideoByEvent(config);
                    });
                }
            }
            SDE.log.groupEnd();
        },
        // init

        /**
         * Method with which event the video will be played and pick's up all relevant
         * values which video needs to play correctly.
         *
         * @method startVideoByEvent
         * @param {Object} config
         */

        startVideoByEvent: function (config) {

            var conf = new SDE.utils.Config(config),
                params = playerConfig.playerParams[conf.get('size')],
                toReplace = conf.get('size') !== 'sidebar' ?
                        SDE.$(conf.get('panel')) : SDE.$(conf.get('panel') + ' a'),
                uid = SDE.uid(),
                image = conf.get('panel').find ?
                        conf.get('panel').find('img') : SDE.$(conf.get('panel') + ' img');

            SDE.log.group('Video: Responding to event ' + conf.get('startevent'));

            toReplace.attr('id', SDE.uid(15));

            SDE.widget.Video.playerDetection({
                'swf':        params.url,
                'video':      conf.get('video'),
                'height':     params.height,
                'width':      params.width,
                'image':      image.attr('src'),
                'toReplace':  toReplace.attr('id'),
                'vars':       getFlashvars(uid, conf),
                'params':     params,
                'attributes': { 'id': uid, 'styleClass': 'container'}
            });

            SDE.log.groupEnd();
        },
        // startVideoByEvent

        /**
         * Checks if user have an actual flashplugin to play video (return === true), otherwise we check if user's
         * browser understand new html5 <video> tag AND has the codec for mp4 ...
         *
         * @method playerDetection
         * @param {Object}   config
         */

        playerDetection: function (config) {

            SDE.log.group('Video: Player detection');

            var ua = navigator.userAgent.toLowerCase(),
                params = {
                    'video':     config.video,
                    'width':     config.width,
                    'height':    config.height,
                    'toReplace': config.toReplace,
                    'image':     config.image,
                    'cookie':    playerCookie
                },
                timeoutID;

            // First we must check if 'android' while this devices like flash, but we want to force them
            // to play video with html5 <video> tag.
            if (ua.search('android') !== -1) {
                SDE.utils.VideoWithHtml5.init(params, config.vars.mode);
            }
            else if (SDE.widget.Video.playVideoWithFlash(config) === false) {
                SDE.utils.VideoWithHtml5.init(params, config.vars.mode);
            }

            // To check if player is maximized (take a look into cookies value) we must
            // wait some milliseconds till <object> element is rendered into site
            if (SDE.$.cookies.test() && SDE.$.cookies.get(playerCookie) === 'max') {
                timeoutID = window.setTimeout(function () {
                    var videoElem = SDE.$('.enrichment object, .enrichment video').attr('id');
                    if (videoElem) {
                        setResizePlayer(videoElem, 'maximize', '');
                        window.clearTimeout(timeoutID);

                    }
                }, 500);
            }

            SDE.log.groupEnd();
        },
        // playerDetection

        /**
         * If user have actual flashplugin we play video in flash. Otherwise user became a notice
         * with downloading url of flashplayer,
         *
         * @method playVideoWithFlash
         * @param  {Object}    vars
         * @return {Boolean}   If there is no flash in the correct version this method
         *                     will return 'false', otherwise 'true'
         */

        playVideoWithFlash: function (vars) {

            SDE.log.group('Video: Embedding SWF');

            var baseParams = {
                    'quality':           'high',
                    'allowScriptAccess': 'always',
                    'allowFullScreen':   'true',
                    'wmode':             'direct',
                    'scale':             'showall',
                    'devicefont':        'false',
                    'bgcolor':           '#000000'
                },
                param,
                conf,
                imageFrame,
                hasFlash;

            for (param in baseParams) {
                if (baseParams.hasOwnProperty(param) && !vars.params[param]) {
                    vars.params[param] = baseParams[param];
                }
            }

            vars.params.width = vars.width;
            vars.params.height = vars.height;

            SDE.log('Embedding an SWF: config:%o', vars);

            conf = new SDE.utils.Config(vars);

            // Check if user have (correct) flash-plugin to display flash with ad-integration.
            if (SDE.swfobject.hasFlashPlayerVersion(baselineVersion)) {
                SDE.log('Embed Flash Object: Show Flash');

                SDE.swfobject.embedSWF(
                    conf.get('swf'),
                    conf.get('toReplace'),
                    (vars.vars.mode === 'embed') ? '100%' : conf.get('width'),
                    (vars.vars.mode === 'embed') ? '100%' : conf.get('height'),
                    baselineVersion,
                    expressInstall,
                    conf.get('vars'),
                    conf.get('params'),
                    conf.get('attributes')
                );

                SDE.log('There is flash in the correct version available');
                SDE.log.groupEnd();

                hasFlash = true;
            } else {
                SDE.log('Embed Flash Object: Sorry no flash object can be placed on the site');

                imageFrame =
                    '<div id="%ID_TO_REPLACE%">' +
                        '<img src="%IMAGE%" width="%WIDTH%" height="%HEIGHT%" alt="">' +
                        '<div class="getflashplayer">' +
                        '  <p>Um das Video korrekt angezeigt zu bekommen, ben&ouml;tigen Sie den Adobe Flash ' +
                                'Player welchen Sie hier herunterladen k&ouml;nnen:</p>' +
                        '  <a href="http://get.adobe.com/de/flashplayer/" target="_blank">' +
                        '    <img src="http://polpix.sueddeutsche.de/staticassets/img/nohash/get-adobe-' +
                                'flash-player.png" alt="Get Adobe Flash Player">' +
                        '  </a>' +
                        '</div>' +
                    '</div>';

                imageFrame = imageFrame
                    .replace('%ID_TO_REPLACE%', conf.get('toReplace'))
                    .replace('%IMAGE%', conf.get('image'))
                    .replace('%WIDTH%', conf.get('width'))
                    .replace('%HEIGHT%', conf.get('height'));

                SDE.$('#' + conf.get('toReplace')).replaceWith(imageFrame);

                SDE.log('There is no flash in the correct version available');
                SDE.log.groupEnd();

                hasFlash = false;
            }

            return hasFlash;
        },
        // playVideoWithFlash

        /**
         * Collapse (close or open) videoplayer from outside.
         * Calls private method in SDE.Video()
         *
         * @method setCollapsePlayer
         * @param {String} id       id of video element
         * @param {String} action   [close|open]
         * @param {String} medium   [flash|html5]
         * @param {String} size     [video|article|sidebar]
         */

        setCollapsePlayer: function (id, action, medium, size) {
            setCollapsePlayer(id, action, medium, size);
        },
        // setCollapsePlayer

        /**
         * Resize (maximize or minimize) videoplayer from outside.
         * Calls private method in SDE.videoPlayer()
         *
         * @method setResizePlayer
         * @param {String} id       id of video element
         * @param {String} action   [maximize|minimize]
         * @param {String} medium   [flash|html5]
         */

        setResizePlayer: function (id, action, medium) {
            setResizePlayer(id, action, medium);
        },
        // setResizePlayer

        /**
         * Set Clickhandler to social links to open the specific sharing.
         * Calls private method in SDE.videoPlayer()
         *
         * @method setSocialLinks
         * @param {String}   id
         * @param {String}   medium   [flash|html5]
         * @param {String}   channel  [facebook|twitter|google]
         */

        setSocialLinks: function (id, medium, channel) {
            setSocialLinks(id, medium, channel);
        }
        // setSocialLinks

    };

}());
/*global SDE,window, Recaptcha */
/*regexp: false */
(function () {
    /**
     * Initialisation functions specific to articles, but common between modes.
     *
     *  @author     Thomas Andersson <Thomas.Andersson@netlight.com>
     *  @version    $Id$
     */

    /**
     * Initialise the author profile, both for the section underneath the title and
     * the portion underneath the contents of the article.
     *
     *  @author     Thomas Andersson <Thomas.Andersson@netlight.com>
     */
    SDE.init.authorProfile = function (data) {

        /*
         * Init common vars
         */

        var container, who,

        /*
         * Init vars for author's profile at bottom of the site
         */

            authorContainer = data.node.closest('.authorContainer'),
            nodeId = data.node.attr('data-profile'),
            popupNode = authorContainer.find('.authorPopup-' + nodeId),
            nameNode = authorContainer.find('span[data-abbr="' + nodeId + '"]'),

        /*
         * Init vars for author's profile at top on site
         */

            authorContainerTop = SDE.$('#sitecontent .header .authors .authorContainer, #sitecontent .body .authors .authorContainer'),
            nameNodeTop;

        if (authorContainerTop.length > 0) {
            nameNodeTop = authorContainerTop.find('#abbr-' + nodeId);
        }

        if (authorContainer && popupNode) {

            container = new SDE.widget.ContainerboxControl({
                closeButton:    true,
                displayElement: popupNode,
                containerName:  'popup-' + nodeId
            });

            data.node.on('touchstart touchmove click', function () {
                // data.node points to the li containing the author info -- if this isn't displayed, we're
                // at the top of the page rather than the bottom
                var node,
                    authorContainers = SDE.$('div.authorContainer'),
                    containerBoxes = [],
                    authorProfileImageHeight = 0;

                authorContainers.each(function () {
                    containerBoxes.push(SDE.$(this).find('.containerBox'));
                });

                // Special handling for mobile imagegallery which has to calculate the top before
                if (!container.getContainer().attr('data-imagegallery')) {
                    if (who === 'top' && authorContainerTop.length > 0) {
                        node = authorContainerTop;
                        who = '';
                    } else {
                        node = authorContainer;
                        authorProfileImageHeight = SDE.$('section.footer ul.authorProfiles').height();
                    }

                    //Move the containerBoxes to clicked author
                    SDE._.each(containerBoxes, function (element) {
                        var containerBox = element;
                        containerBox.appendTo(node);
                    });

                    if (node.height() === 0) {
                        container.getContainer().css('top', 50);
                    } else {
                        container.getContainer().css('top', node.find('.moreInfo').height() + 10);
                    }
                }

                container.toggle();
            });

            nameNode.on('touchstart touchmove click', function (e) {
                e.preventDefault();
                data.node.click();
            });

            if (authorContainerTop.length > 0) {
                nameNodeTop.on('touchstart touchmove click', function (e) {
                    e.preventDefault();
                    who = 'top';
                    data.node.click();
                });
            }

        }

        // Hide the author list if there aren't any images
        if (data.node.find('img').size() === 0) {
            data.node.hide();
        }
    };

    /*
     * Init method that allows the themebox to be expanded and collapsed
     */
    SDE.init.themeBox = function () {
        var clickHandler,
            themebox = SDE.$('.themenbox #themeboxdiv'),
            collapseButton = SDE.$('.themenbox #collapseButton'),
            collapseLink = SDE.$('.themenbox #collapseLink'),
            containingArticle = SDE.$('article');

        clickHandler = function () {
            if (themebox.is(':hidden')) {
                themebox.slideDown('fast');
                collapseButton.addClass('open');
            } else {
                themebox.slideUp('fast');
                collapseButton.removeClass('open');
                collapseButton.addClass('closed');
            }
        };

        collapseButton.click(clickHandler);
        collapseLink.click(clickHandler);

        if (containingArticle.length > 0) {
            themebox.hide();
            collapseButton.removeClass('open');
            collapseButton.addClass('closed');
        }
    };

    /**
     * The function for the feedback popup
     *
     *  @author     Markus Walbrun <markus.walbrun@sz.de>
     *  @version    $Id$
     */
    SDE.init.feedback = function (data) {
        var container,
            nodeId = data.node.attr('id'),
            popupNode = SDE.$('#feedbackpopup'),
            showRecaptcha,
            verifier,
            mode = data.mode,
            hideAll,
            isNotEmpty,
            initContainer;

        isNotEmpty = function (value) {
            return SDE.$.trim(value) !== '';
        };

        verifier = {
            'email': function (value) {
                return isNotEmpty(value) && SDE.utils.isValidEmail(value);
            },

            'firstname': isNotEmpty,

            'lastname': isNotEmpty,

            'comment': isNotEmpty,

            'recaptcha_response_field': isNotEmpty
        };

        initContainer = function () {
            //init the container just once
            if (container) {
                return;
            }

            // Init different containers in mobile mode we need a ContainerboxControl, in www a lightbox
            if (mode === 'www') {
                container = new SDE.widget.NewLightboxControl({
                    closeButton:    true,
                    displayElement: popupNode,
                    containerName:  'popup-' + nodeId
                });
            } else {
                container = new SDE.widget.ContainerboxControl({
                    closeButton:    true,
                    displayElement: popupNode,
                    containerName:  'popup-' + nodeId
                });
            }
        };

        // Show the feedbackform
        SDE.$('.feedbackClick').on('click', function () {
            initContainer();
            hideAll();
            SDE.$('#feedbackpopup #feedbackform').show();
            container.toggle();
            //Show the captcha
            showRecaptcha('feedback_captcha_widget');
        });

        //show the recaptcha element
        showRecaptcha = function (element) {
            var recaptchaOptions = {theme: 'custom', custom_theme_widget: 'feedback_recaptcha_widget'};
            Recaptcha.create('6Lcx2s8SAAAAABBXH7XWPq-m2XmXWmppDkDCt07C', element, recaptchaOptions);
        };

        hideAll = function () {
            SDE.$('#feedbackpopup #feedbackform').hide();
            SDE.$('#feedbackpopup #feedbacksuccess').hide();
            SDE.$('#feedbackpopup .feedbackerror').hide();
        };

        // React on the form submit and evaluate the values as well as the value entered into the captcha
        SDE.$('#feedbackform').submit(function (eventObject) {

            var fields = SDE.$(this).serializeArray(),
                validationErrors = false,
                transferObject = {};

            eventObject.preventDefault();

            SDE.$.each(fields, function (i, field) {
                if (verifier[field.name]) {
                    if (!verifier[field.name](field.value)) {
                        SDE.$('#feedbackform').find('[name=' + field.name + ']').addClass('inputerror');
                        validationErrors = true;
                    } else {
                        SDE.$('#feedbackform').find('[name=' + field.name + ']').removeClass('inputerror');
                    }
                }
                //Create the object which should be transfered to the server
                transferObject[field.name] = field.value;
            });

            if (!validationErrors) {
                //Post the message
                SDE.$.ajax({
                    type:        'POST',
                    url:         'http://' + window.location.host + '/sdews/sendFeedback',
                    data:        SDE.$.toJSON(transferObject),
                    success:     function () {
                        hideAll();
                        SDE.$('#feedbackform').find('input[type=text], textarea, input[type=email]').attr('value', '');
                        if (mode === 'www') {
                            SDE.$('#feedbackpopup #feedbacksuccess').show();
                        } else {
                            container.toggle();
                        }
                    },
                    error:       function (reqObj) {
                        // server error, show the form and the corresponding errormessage
                        hideAll();
                        SDE.$('#feedbackpopup #feedbackform').show();
                        if (reqObj.status === 400) {
                            SDE.$('#feedbackpopup #captcha_error').show();
                            Recaptcha.reload();
                        } else {
                            SDE.$('#feedbackpopup #backenderror').show();
                            Recaptcha.reload();
                        }
                    },
                    contentType: 'application/json'
                });
            } else {
                // Validation errors on client side show the form and the input error div
                hideAll();
                SDE.$('#feedbackpopup #feedbackform').show();
                SDE.$('#feedbackpopup #inputerror').show();
            }
            return false;
        });
    };
}());/*global SDE */
(function () {
    /*
     *  Init for the SDE whispers
     */

    SDE.init.whisper = function (data) {
        //Get the id of textarea where the user enters the text to whisper
        var whisperArea = data.id ? SDE.$('#' + data.id) : data.node;

        whisperArea.focus(function () {
            SDE.$('#sde_captcha_widget').show();
        });
    };
}());
/*global SDE */
(function () {
    /**
     * Resizes a given HTML element by using 'side' as
     * base and calculating width and height by
     * adopting the value of 'ratio'
     *
     * @param data JSON containing parameters
     */
    SDE.init.sizeElementWithRatio = function (data) {
        var el = data.node,
            side = data.side,
            ratio = data.ratio,
            ref = (side === 'width') ? el.width() : el.height(),
            width = ref / ratio,
            height = ref / ratio;
        if (side === 'width') {
            el.height(height);
        } else {
            el.width(width);
        }
    };
}());
/*global SDE, window */
(function () {
    /**
     * This init enables all nodes with 'data-clickable' set to redirect their
     * clicks to another node.
     *
     * Please note that this is only for the full sz.de-website, not the mobile or
     * app versions, as these require physical clicks to be made in order to have
     * a chance of catching click-events.
     *
     *  @author     Thomas Andersson <Thomas.Andersson@netlight.com>
     *  @version
     */

    function extendedClickHandler() {
        if (!SDE.init.API || !SDE.init.API.isApp) {

            /**
             * Element which needs an link from an other element to
             * link to the same site. We do this only for seo ...
             */

            SDE.$('[data-clickable]').each(function () {
                var node = SDE.$(this),
                    link = SDE.$(node.attr('data-clickable'));
                if (node.length && link.length) {
                    node.click(function () {
                        link = link.first();
                        var events  = link.data('events') || {},
                            href    = link.attr('href');
                        if (events.click) {
                            link.click();
                        } else if (href) {
                            window.location.href = href;
                        }
                    });
                    node.css('cursor', 'pointer');
                }
            });

            SDE.$('[data-clickurl]').each(function () {
                var node = SDE.$(this),
                    href = node.data('clickurl');
                if (node.length && href.length) {
                    node.click(function () {
                        window.location.href = href;
                    });
                    node.css('cursor', 'pointer');
                }
            });
        }
    }

    if (SDE.init && SDE._.isArray(SDE.init.readyFns)) {
        SDE.init.readyFns.push({'fn': extendedClickHandler, priority: 2});
    }

}());/*global SDE, window */
(function () {

    var eventQueue = [], eventQueueHandler, eventQueueReader, handleScribbleLiveMessage;

    eventQueueHandler = function (ev) {
        var jsonData;
        try {
            jsonData = SDE.$.parseJSON(ev.originalEvent.data);

            if (jsonData.isQueueable || jsonData.sizing) {
                ev.preventDefault();
                eventQueue.push(ev);
            }
        } catch (err) {
            // Ok, we couldn't parse the data. Ignore.
        }
    };

    eventQueueReader = function () {
        SDE.$(window).off('message', eventQueueHandler);
        SDE._.each(eventQueue, function (event) {
            SDE.$(window).trigger(event);
        });
    };

    /*
     *  This module can be used to resize an iFrame dynamically
     */
    SDE.init.resizeIframe = function (data) {
        var origin = data.origin.replace(/^(https?:\/\/.*?)\/.*/, '$1'),
            iframeUrl = data.node.attr('src'),
            calculateHeight = data.screenHeight,
            handleSizingResponse;

        if (calculateHeight) {
            data.node.attr('height', SDE.$(window).height());
        } else if (origin && iframeUrl) {
            handleSizingResponse = function (e) {
                var originalEvent = e.originalEvent,
                    jsonData,
                    height,
                    iframe,
                    url;
                if (originalEvent.origin === origin) {
                    try {
                        jsonData = SDE.$.parseJSON(originalEvent.data);
                        url = jsonData.url;
                        if (jsonData.sizing && url !== undefined && url === iframeUrl) {
                            height = jsonData.sizing;
                            iframe = SDE.$('iframe[src="' + url + '"]');
                            iframe.attr('height', height + 'px');
                        }
                    } catch (err) {
                        SDE.log('Unparseable message: ' + originalEvent.data);
                    }
                }

            };

            SDE.$(window).on('message', handleSizingResponse);
        }
    };

    handleScribbleLiveMessage = function (origin, iframeUrl, container, e) {
        var originalEvent = e.originalEvent,
            isMobile = iframeUrl.match(/mobi/),
            jsonData,
            newPosts,
            url,
            textContent;

        if (originalEvent.origin === origin) {
            try {
                jsonData = SDE.$.parseJSON(originalEvent.data);
                url = jsonData.url;
                if (jsonData.newPosts && url !== undefined && url === iframeUrl) {
                    newPosts = jsonData.newPosts;

                    if (newPosts && container.length) {
                        if (isMobile) {
                            textContent = (newPosts === 1) ? 'Neue Meldung' : newPosts + ' neue Meldungen';
                        } else {
                            textContent = (newPosts === 1) ? '(neue Meldung)' : '(' + newPosts + ' neue Meldungen)';
                            container.parent().children().css('color', '#96341B');
                        }
                        container.text(textContent);
                        e.preventDefault();
                    }
                }
            } catch (err) {
                SDE.log('Unparseable message: ' + originalEvent.data);
            }
        }

    };

    SDE.init.scribbleLiveMessage = function (data) {
        var origin = data.origin,
            iframeUrl = data.url,
            nodeContainer = data.node.find('.newPosts');

        if (origin && iframeUrl && nodeContainer.length) {
            SDE.$(window).on('message', SDE._.bind(handleScribbleLiveMessage, this, origin, iframeUrl, nodeContainer));
        }
    };

    SDE.$(window).on('message', eventQueueHandler);

    if (SDE.init && SDE._.isArray(SDE.init.readyFns)) {
        SDE.init.readyFns.push({'fn': eventQueueReader, 'priority': 7});
    }
}());/*global SDE */
(function () {

    /**
     * Check if flash is enabled for this user
     */
    function isFlashAvailable() {
        return SDE.swfobject && SDE.swfobject.getFlashPlayerVersion() !== null;
    }

    SDE.utils.CopyUtil = {
        /**
         * Check if the CopyUtil is available.
         *
         * @returns {Boolean}
         */
        'available': isFlashAvailable,

        /**
         * Copy the given string to the clipboard
         *
         * @param buttonElement {String|Element|jQuery} The element to use a copy trigger
         * @param contents {String|Function} The contents to copy to the clipboard. Can be a string or a function returning a String
         * @param callback {Function} Callback function to call upon copy
         */
        'copy': function (buttonElement, contents, callback) {
            SDE.log.group('CopyUtil.copy');
            if (!isFlashAvailable()) {
                SDE.log('Unable to copy text to clipboard; no Flash available');
            } else if (!buttonElement) {
                SDE.log('No button element to bind to');
            } else if (!contents) {
                SDE.log('No text to copy');
            } else {
                SDE.log('Initialising cliboard-function for ' + buttonElement);
                SDE.$(buttonElement).zclip({
                    'path': '/staticassets/other/ZeroClipboard.swf',
                    'copy': contents,
                    'afterCopy': callback
                });
            }

            SDE.log.groupEnd();
        }
    };
}());
/*global SDE, setInterval, clearInterval */
(function () {
    /**
     *  An implementation of Prototype's "PeriodicalExecutor" class, because
     *  it's damn useful.
     *
     *  @author     Mike West <Mike.West@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace      SDE.utils
     *  @class          Interval
     */
    SDE.namespace('utils.Interval');

    /**
     *  Execution of the callback function.
     *
     *  @method _execute
     *  @private
     */
    function _execute() {
        if (!this._locked) {
            try {
                this.lock();
                this._config.get('callback').apply(
                    this._config.get('context'),
                    this._config.get('args')
                );
            } finally {
                this.unlock();
            }
        }
    }

    /**
     *  Constructor.
     *
     *  @method Interval
     *  @constructor
     *  @public
     *  @param  {Object}    userConfig  The configuration object for the Interval
     */
    SDE.utils.Interval = function (userConfig) {
        SDE.log.group('Interval');
        SDE.log('Constructor called with userConfig:%o', userConfig);
        var baseConfig = {
                /**
                 *  The callback function to be executed on an interval.
                 *
                 *  @config     callback
                 *  @type       {Function}
                 *  @default    null
                 */
                'callback': null,
                /**
                 *  The interval (in seconds).
                 *
                 *  @config     interval
                 *  @type       {Number}
                 *  @default    1
                 */
                'interval': 1,
                /**
                 *  The context in which the callback function is to be executed
                 *  (e.g. what should `this` point to inside the function?)
                 *
                 *  @config     context
                 *  @type       {Object}
                 *  @default    null
                 */
                'context':  null,
                /**
                 *  Arguments to be passed to the callback function.
                 *
                 *  @config     args
                 *  @type       {Array}
                 *  @default    []
                 */
                'args':     []
            },
            obj = null;

        this._config = new SDE.utils.Config(baseConfig, userConfig);
        this._locked = false;
        if (this._config.get('callback')) {
            obj = this;
            this._interval = setInterval(
                function () {
                    if (!obj._locked) {
                        _execute.call(obj);
                    }
                },
                this._config.get('interval') * 1000
            );
        } else {
            SDE.log.warn('`SDE.utils.Interval` initalized without a callback function.');
            SDE.log.groupEnd();
        }
        SDE.log.groupEnd();
    };

    /**
     *  Locks the Interval: nothing will be executed until the lock is free'd.
     *
     *  @method lock
     *  @public
     */
    function _lock() {
        this._locked = true;
    }

    /**
     *  Unlocks the Interval, reenabling execution.
     *
     *  @method unlock
     *  @public
     */
    function _unlock() {
        this._locked = false;
    }

    /**
     *  Cancel the execution of the callback function
     *
     *  @method cancel
     *  @public
     */
    function _cancel() {
        clearInterval(this._interval);
    }

    SDE.utils.Interval.prototype = {
        cancel: _cancel,
        lock:   _lock,
        unlock: _unlock
    };
}());
/*global SDE, document */
(function () {
    /**
     *  ListToSelect maps a `ul` or `ol` to a `select`.  Each `li`
     *  becomes an `option`.
     *
     *  That is, via:
     *
     *      SDE.utils.ListToSelect.init( {
     *          selector:       '.footer',
     *          label:          '.footer p',
     *          placeholder:    'Bitte w&auml;hlen',
     *          submittable:    false,
     *          callback:       function () {
     *                              if ( this.value ) {
     *                                  window.location = this.value;
     *                              }
     *                          }
     *      } );
     *
     *  This markup:
     *
     *      <div class="footer">
     *          <p>Weitere Services:</p>
     *          <ul>
     *              <li><a href="http://www.sueddeutsche.de/verlag/app/630/95535/#2">Abo - Angebote</a></li>
     *              ...
     *              <li><a href="http://www.sueddeutscher-verlag.de/">S&uuml;ddeutscher Verlag</a></li>
     *          </ul>
     *      </div>
     *
     *  is transformed into:
     *
     *      <div class="footer">
     *          <form>
     *              <label for="[ID]">Weitere Services:</label>
     *              <select id="[ID]">
     *                  <option value="Bitte w&auml;hlen"></option>
     *                  <option value="http://www.sueddeutsche.de/verlag/app/630/95535/#2">Abo - Angebote</option>
     *                  ...
     *                  <option value="http://www.sueddeutscher-verlag.de/">S&uuml;ddeutscher Verlag</option>
     *              </select>
     *          </form>
     *      </div>
     *
     *  @author     Mike West <Mike.West@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace      SDE.utils
     *  @class          ListToSelect
     *  @static
     *
     *  @param  {Object}    config  The configuration object containing the
     *                              various settings necessary
     */
    SDE.namespace('utils.ListToSelect');

    /**
     *  Generates a `form` element, filled with a `select` element, which
     *  contains a single `option` element for each `li` in the initially
     *  specified list.
     *
     *  @method generateForm
     *  @param  {Array}     data    An array of objects, each containing a
     *                              `href` and `text` attribute.  This array
     *                              will be used to generate the select element.
     *  @param  {Object}    config  A configuration object (passed through from
     *                              `init`)
     *  @return {Element}    The generated form, containing the `select`
     *                          element, populated with one `option` element
     *                          for each `li` in the given list.`
     *  @private
     */
    SDE.utils.ListToSelect.generateForm = function generateForm(data, config) {
        SDE.log('Generating form with data:%o and config:%o', data, config);
        var theForm = document.createElement('form'),
            label = document.createElement('label'),
            select = document.createElement('select'),
            input = document.createElement('input'),
            i,
            option;

        select.id = SDE.uid();

        for (i = 0; i < data.length; i += 1) {
            option = document.createElement('option');
            option.value = data[i].href;
            option.innerHTML = data[i].text;
            select.appendChild(option);
        }

        if (config.get('label')) {
            label.setAttribute('for', select.id);
            label.innerHTML = SDE.$(config.get('label')).html();
            SDE.$(config.get('label')).remove();
            theForm.appendChild(label);
        }

        theForm.appendChild(select);

        if (config.get('submittable')) {
            input.type = 'submit';
            input.id = select.id + '_submit';
            input.value = 'Submit';
            theForm.appendChild(input);
        }

        return theForm;
    };

    /**
     *  Initalize lists on the page, specified via the configuration object's
     *  `selector` attribute.
     *
     *  <pre><code>
     *      SDE.utils.ListToSelect.init( {
     *          'selector': 'ul.listtype',
     *          'label':    'p.listlabel'
     *      } );
     *  </code></pre>
     *
     *  @method init
     *  @public
     *  @param  {Object}    userConfig  A configuration object for the
     *                                  ListToSelect functionality.
     */
    SDE.utils.ListToSelect.init = function (userConfig) {
        SDE.log.group('ListToSelect');
        SDE.log('Initalizing with userConfig:%o', userConfig);
        var baseConfig = {
                /**
                 *  The selector for the list object's container
                 *
                 *  @config     selector
                 *  @type       {String|Element}
                 *  @default    null
                 */
                'selector':    null,
                /**
                 *  The selector for the list's label
                 *
                 *  @config     label
                 *  @type       {String|Element}
                 *  @default    null
                 */
                'label':       null,
                /**
                 *  Should the form have a submit button?
                 *
                 *  @config     submittable
                 *  @type       {Boolean}
                 *  @default    true
                 */
                'submittable': true,
                /**
                 *  The placeholder text for the select box
                 *
                 *  @config     placeholder
                 *  @type       {String}
                 *  @default    null
                 */
                'placeholder': null,
                /**
                 *  The callback function that's executed when the `select` changes
                 *  or the form is submitted.
                 *
                 *  @config     callback
                 *  @type       {Function}
                 *  @default    null
                 */
                'callback':    null

            },
            data = [],
            theForm,
            config = new SDE.utils.Config(baseConfig, userConfig),
            root = SDE.$(config.get('selector'));

        if (root.length === 0) {
            SDE.log.warn('Exiting early: No items found with selector:%o', config.get('selector'));
            SDE.log.groupEnd();
            return;
        }

        if (config.get('placeholder')) {
            data = [
                { 'href': '', 'text': config.get('placeholder') }
            ];
        }

        // Populate an array with the current data
        root
            .find('a')
            .each(function () {
                data[data.length] = {
                    'href': this.href,
                    'text': this.innerText || this.text
                };
            })
            .end();
        theForm = SDE.utils.ListToSelect.generateForm(data, config);
        root.find('ul').replaceWith(theForm);

        if (config.get('callback')) {
            SDE.$(theForm)
                .find('select')
                .change(config.get('callback'))
                .end()
                .submit(config.get('callback'));
        }
        SDE.log.groupEnd();
    };
}());
/*global SDE */
(function () {
    /**
     *  Given a collection of DOMElements, `matchHeights` finds
     *  the max height, assigns it to the elements' parents, and returns
     *  the value assigned.
     *
     *  @author     Mike West <Mike.West@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace  SDE.utils
     *
     *  @method     matchHeights
     *  @static
     *
     *  @param  {jQuery}    items       A collection of elements to be height-matched
     *  @param  {Number}       minheight   The minimum height (0 if omitted)
     *
     *  @return {Number}       The maximum height assigned.
     */

    SDE.namespace('utils.matchHeights');

    SDE.utils.matchHeights = function matchHeights(items, minheight) {
        SDE.log.group('MatchHeights');

        var maxheight = minheight || 0,
            height = 0;
        SDE.log('Matching heights of items: %o (min: %d)', items, maxheight);

        items.each(function () {
            // For liveticker-tabbox we only need the height of elemt which
            // is marked with 'current'.
            if (SDE.$(this).parent().parent().parent().hasClass('sportticker')) {
                if (SDE.$(this).show().children().show().parent().hasClass('current')) {
                    height = SDE.$(this).show().children().show().parent().height();
                    if (maxheight < height) {
                        maxheight = height;
                    }
                    SDE.log('Matching height of liveticker-tabbox. This will be %dpx', height);
                }
            } else {
                // For all other tabbox we need the max-height
                height = SDE.$(this).height();
                if (maxheight < height) {
                    maxheight = height;
                }
                SDE.log('Matching height of others-tabbox. This will be %dpx', height);
            }
        }).parent()
            .height(maxheight)
            .end();

        SDE.log.groupEnd();

        return maxheight;
    };
}());
/*global SDE, window */
(function () {
    /**
     *  We love popups!  The more windows, the better!  If you'd like to throw
     *  up some barriers to satisfying user experience, please use this class.
     *
     *  @author     Mike West <Mike.West@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace      SDE.utils
     *  @class          Popup
     *  @constructor
     *
     *  @param  {Object}    config  The configuration object containing the
     *                              various settings necessary for popping a
     *                              new window up.  See configuration docs
     *                              for details.
     */
    SDE.namespace('utils.Popup');

    SDE.utils.Popup = function (config) {
        SDE.log.group('Popup');
        if (!config) {
            SDE.log.warn('No configuration specified for Popup instantiation');
            SDE.log.groupEnd();
            return;
        }
        var baseConfig = {
            /**
             *  The URL of the site to open in a new window.
             *
             *  @config     url
             *  @type       {String}
             *  @default    null
             */
            'url':        null,
            /**
             *  The name of the new window
             *
             *  @config     name
             *  @type       {String}
             *  @default    'SDE_POPUP'
             */
            'name':       'SDE_POPUP',
            /**
             *  The width of the new window, in pixels
             *
             *  @config     width
             *  @type       {Number}
             *  @default    null
             */
            'width':      null,
            /**
             *  The height of the new window, in pixels
             *
             *  @config     height
             *  @type       {Number}
             *  @default    null
             */
            'height':     null,
            /**
             *  The pixel offset of the new window from the top of the screen
             *
             *  @config     top
             *  @type       {Number}
             *  @default    null
             */
            'top':        null,
            /**
             *  The pixel offset of the new window from the left of the screen
             *
             *  @config     left
             *  @type       {Number}
             *  @default    null
             */
            'left':       null,
            /**
             *  Display the toolbar? (Ignored in modern browsers...)
             *
             *  @config     toolbar
             *  @type       {Boolean}
             *  @default    true
             */
            'toolbar':    true,
            /**
             *  Display the statusbar?
             *
             *  @config     status
             *  @type       {Boolean}
             *  @default    true
             */
            'status':     true,
            /**
             *  Display scrollbars?
             *
             *  @config     scrollbars
             *  @type       {Boolean}
             *  @default    true
             */
            'scrollbars': true,
            /**
             *  Should the window be resizable?
             *
             *  @config     resizable
             *  @type       {Boolean}
             *  @default    true
             */
            'resizable':  true,
            /**
             *  Display the menubar?
             *
             *  @config     menubar
             *  @type       {Boolean}
             *  @default    true
             */
            'menubar':    true,
            /**
             *  Display the address bar?
             *
             *  @config     location
             *  @type       {Boolean}
             *  @default    true
             */
            'location':   true,
            /**
             *  Should the window be focused after launching?
             *
             *  @config     focus
             *  @type       {Boolean}
             *  @default    true
             */
            'focus':      true
        };

        this._config = new SDE.utils.Config(baseConfig, config);
        this._windowHandle = null;
    };

    /**
     *  Open a Popup
     *
     *  @method open
     *  @return {Boolean}   Success or failure of the open.
     */
    function _open() {
        SDE.log('Opening window with config %o', this._config);
        var attributes = [ 'width', 'height', 'toolbar', 'status', 'scrollbar', 'resizable', 'menubar', 'location' ],
            openstring = [],
            value,
            i;

        for (i = 0; i < attributes.length; i = i + 1) {
            value = this._config.get(attributes[i]);
            if (value !== null) {
                if (value === true) {
                    value = 1;
                }
                if (value === false) {
                    value = 0;
                }
                openstring.push(attributes[i] + '=' + value);
            }
        }

        this._windowHandle = window.open(
            this._config.get('url'),
            this._config.get('name'),
            openstring.join(',')
        );

        if (this._config.get('focus')) {
            this.focus();
        }

        // Coerce into boolean
        return !!(this._windowHandle);
    }

    /**
     *  Close a previously opened Popup
     *
     *  @method close
     *  @return {Boolean}   Success or failure of the open.
     */
    function _close() {
        var returnVal = false;
        SDE.log('Closing %o', this._windowHandle);
        if (this._windowHandle) {
            this._windowHandle.close();
            this._windowHandle = null;
            returnVal = true;
        } else {
            SDE.log('Can\'t close an unopened popup.');
        }

        return returnVal;
    }

    /**
     *  Focus on a previously opened Popup
     *
     *  @method focus
     */
    function _focus() {
        SDE.log('Focusing on %o', this._windowHandle);
        if (this._windowHandle) {
            this._windowHandle.focus();
        } else {
            SDE.log('Can\'t focus on an unopened popup.');
        }
    }

    SDE.utils.Popup.prototype = {
        'open':  _open,
        'close': _close,
        'focus': _focus
    };
}());
/*
* VALITON Webanalytics Framework / Copyright 2009-2011 Valiton GmbH All rights reserved. http://www.valiton.com
*/
if(!Array.indexOf){Array.prototype.indexOf=function(c){for(var b=0;b<this.length;b++){if(this[b]===c){return b}}return -1}}VALITON_WA={INFO:"Valiton Tracking Abstraction Framework for Sueddeutsche Verlags GmbH (POC2) v1.4.7[SZ_POC_PROD] (10/18/2012 at 12:38PM)",INIT_TSTAMP:new Date().getTime(),setup:function(){if(window.addEventListener){window.addEventListener("load",VALITON_WA.documentComplete,false);window.addEventListener("unload",VALITON_WA.unload,false)}else{if(document.addEventListener){document.addEventListener("load",VALITON_WA.documentComplete,false);document.addEventListener("unload",VALITON_WA.unload,false)}else{if(window.attachEvent){window.attachEvent("onload",VALITON_WA.documentComplete);window.attachEvent("onunload",VALITON_WA.unload)}else{if(document.attachEvent){document.attachEvent("onload",VALITON_WA.documentComplete);document.attachEvent("onunload",VALITON_WA.unload)}}}}},track:function(b){VALITON_WA.Dispatcher.track(b)},setProp:function(d){var h=d;VALITON_WA.Util.eachKeyValue(d,function(j,k){if((j!=="ivwcode"&&("string"===typeof(k)))){h[j]=k.toLowerCase()}});d=h;if(typeof VALITON_WA.Custom!="undefined"){if(typeof VALITON_WA.Custom.__custom_tracking_properties_extend!="undefined"){try{var g=VALITON_WA.Custom.__custom_tracking_properties_extend;d=VALITON_WA.Util.extend(g,d);VALITON_WA.log("Applied custom presets found in VALITON_WA.Custom")}catch(f){VALITON_WA.log("There was an error while applying presets found in VALITON_WA.Custom: "+f)}}if(typeof VALITON_WA.Custom.__custom_tracking_properties_override!="undefined"){try{var b=VALITON_WA.Custom.__custom_tracking_properties_override;d=VALITON_WA.Util.extend(d,b);VALITON_WA.log("Applied overrides found in VALITON_WA.Custom")}catch(f){VALITON_WA.log("There was an error while applying overrides found in VALITON_WA.Custom: "+f)}}if(typeof VALITON_WA.Custom.__custom_tracking_properties_process!="undefined"){try{d=VALITON_WA.Custom.__custom_tracking_properties_process(d);VALITON_WA.log("Applied custom processing logic")}catch(f){VALITON_WA.log("There was an error while applying custom logic in VALITON_WA.Custom: "+f)}}}var c=typeof document.title==="string"?document.title.toLowerCase():"notitle";VALITON_WA.__tracking_properties=VALITON_WA.Util.extend({titel:c},d);if(typeof d.firstTracker!=="undefined"){d.tracker=d.firstTracker}else{VALITON_WA.log("no firstTracker is defined try old api tracker")}VALITON_WA.__tracking_properties=d},setTracker:function(b){VALITON_WA.__tracking_properties.tracker=b},getProp:function(){return VALITON_WA.__tracking_properties},unload:function(){var b=VALITON_WA.getProp();VALITON_WA.track({module:"document",event:"unloaded"})},register:function(b){VALITON_WA.Dispatcher.register(b)},documentComplete:function(){if(typeof VALITON_WA.__tracking_properties=="undefined"){VALITON_WA.setProp({})}VALITON_WA.LOAD_TSTAMP=new Date().getTime();VALITON_WA.track({module:"document",event:"loaded"});pr=VALITON_WA.getProp();try{if(typeof pr.lastTracker!=="undefined"){VALITON_WA.setTracker(pr.lastTracker);VALITON_WA.track({module:"document",event:"loaded"});VALITON_WA.track();VALITON_WA.setTracker(VALITON_WA.Util.concatTrackers(VALITON_WA.Dispatcher._trackers))}}catch(b){VALITON_WA.log("There was an error: "+b)}VALITON_WA.initLinktracking()},onScroll:function(){VALITON_WA.track({module:"document",event:"scrolled"})},initLinktracking:function(){try{pr=VALITON_WA.getProp();if(typeof pr.linktracking!="undefined"&&pr.linktracking===true){VALITON_WA.log("Linktracking is ON");if(typeof pr.linkelement!="string"||pr.linkelement===""){pr.linkelement="a";VALITON_WA.log("'linkelement' not found -> tracking <"+pr.linkelement+">-Tags by default")}else{VALITON_WA.log("Tracking <"+pr.linkelement+">-Tags")}if(typeof pr.linkattribute!="string"||pr.linkattribute===""){pr.linkattribute="href";VALITON_WA.log("'linkattribute' not found -> using '"+pr.linkattribute+"' by default")}else{VALITON_WA.log("Using '"+pr.linkattribute+"'-Attribute as value")}if(typeof pr.linkrules=="undefined"||typeof pr.linkrules!="object"){pr.linkrules=[{attr:pr.linkattribute,rule:".*",value:"link"}];VALITON_WA.log('Using default ruleset matching all tags Using "link" als default value')}else{VALITON_WA.log("Using ruleset 'linkrules' from __tracking_properties")}VALITON_WA.Util.chainClickElementsMatching(pr.linkelement,pr.linkattribute,pr.linkrules)}else{VALITON_WA.log("Linktracking is OFF")}}catch(b){switch(b){default:VALITON_WA.log("There was an error while initializing linktracking: "+b);break}}},log:function(b){if("object"===typeof(window.console)){if("function"===typeof(window.console.log)){window.console.log("VALITON_WA: "+b)}}}};if(typeof VALITON_WA!=="undefined"){VALITON_WA.Dispatcher={init:function(){this._trackers=[]},_checkIfInit:function(){if(!this.__initialized){VALITON_WA.Dispatcher.init();this.__initialized=true}},_getTracker:function(){return this._trackers},_pushTracker:function(b){this._trackers.push(b)},register:function(b){this._checkIfInit();this._pushTracker(b)},track:function(g){this._checkIfInit();if("undefined"===typeof(g)){var g=VALITON_WA.getProp();if("undefined"===typeof(g)){VALITON_WA.log("error! no pageObj available!");g={tracker:"null",module:"null",event:"null"}}else{g.module="page";g.event="view";if(typeof g.tracker==="undefined"){g.tracker=VALITON_WA.Util.concatTrackers(this._trackers)}VALITON_WA.log("set pageObj as obj")}}else{if(typeof g.module==="undefined"){g.module="null";VALITON_WA.log("error! module is undefined!")}if(typeof g.event==="undefined"){g.event="null";VALITON_WA.log("error! event is undefined!")}if(typeof g.tracker==="undefined"){var h=VALITON_WA.getProp();if(typeof h.tracker!=="undefined"){g.tracker=h.tracker}else{g.tracker=VALITON_WA.Util.concatTrackers(this._trackers)}}}var d=this._getTracker();var b=g.tracker.split(",");for(var c=0;c<d.length;c+=1){if((b.indexOf(d[c].NAME)!==-1)&&("object"===typeof(d[c]))&&("function"===typeof(d[c].track))){try{d[c].track(g)}catch(f){VALITON_WA.log("There was an error while binding the object's metaData to the trackers. "+f)}}}}}}if(typeof VALITON_WA==="undefined"){VALITON_WA={}}VALITON_WA.Util={extend:function(){var g=arguments[0]||{},e=1,f=arguments.length,b=false,d;if(typeof g==="boolean"){b=g;g=arguments[1]||{};e=2}if(typeof g!=="object"&&typeof g!=="function"){g={}}if(f==e){g=this;--e}for(;e<f;e++){if((d=arguments[e])!==null){for(var c in d){var h=g[c],j=d[c];if(g===j){continue}if(b&&j&&typeof j==="object"&&!j.nodeType){g[c]=VALITON_WA.Util.extend(b,h||(j.length!==null?[]:{}),j)}else{if(j!==undefined){g[c]=j}}}}}return g},inArray:function(d,c){for(var b=0;b<d.length;b++){if(c==d[b]){return true}}return false},indexInArray:function(d,c){for(var b=0;b<d.length;b++){if(c===d[b]){return b}}return -1},processTemplate:function(d,c){var b=d;this.eachKeyValue(c,function(f,e){b=b.replace("{"+f+"}",e)});return b},isEmptyObj:function(b){for(var c in b){return true}return false},getObjEventName:function(c){objModule=c.module;objEvent=c.event;var b=objModule+"_"+objEvent;return b},getRandom:function(c,b){if(c>b){return(-1)}if(c==b){return(c)}return(c+parseInt(Math.random()*(b-c+1)))},concatTrackers:function(d){var b="";for(var c=0;c<d.length;c+=1){b+=d[c].NAME;if(c<d.length-1){b+=","}}return b},eachKeyValue:function(e,d,c){for(var b in e){if("undefined"===typeof(Object.prototype[b])){d.call(c,b,e[b])}}},checkCookie:function(b){a=document.cookie;res="";while(a!==""){while(a.substr(0,1)==" "){a=a.substr(1,a.length)}cookiename=a.substring(0,a.indexOf("="));if(a.indexOf(";")!=-1){cookiewert=a.substring(a.indexOf("=")+1,a.indexOf(";"))}else{cookiewert=a.substr(a.indexOf("=")+1,a.length)}if(b==cookiename){return false}else{return true}}},writeCookie:function(e,d,c){var b=new Date();b=new Date(b.getTime()+c);document.cookie=e+"="+d+"; expires="+b.toGMTString()+";"},renewCookie:function(){},addCookieDataTupel:function(d,b,c){this.writeCookie(d,this.readCookie(d)+"&"+b,c)},getValueByKey:function(f,e){if(f.length!==0){for(var d=0;d<f.length;d++){var b=f[d];if(b.indexOf(e)!=-1){var c=b.substr(b.indexOf("=")+1,b.length);return c}}return null}},readCookie:function(b){a=document.cookie;res="";while(a!==""){while(a.substr(0,1)==" "){a=a.substr(1,a.length)}cookiename=a.substring(0,a.indexOf("="));if(a.indexOf(";")!=-1){cookiewert=a.substring(a.indexOf("=")+1,a.indexOf(";"))}else{cookiewert=a.substr(a.indexOf("=")+1,a.length)}if(b==cookiename){res=cookiewert}i=a.indexOf(";")+1;if(i===0){i=a.length}a=a.substring(i,a.length)}return(res)},deleteCookie:function(b){document.cookie=b+"=; expires=Thu, 01-Jan-70 00:00:01 GMT;"},chainClickElementsMatching:function(n,d,b){try{if((typeof n!="string")||(typeof n=="string"&&n=="")){throw"TAG_NOT_SPECIFIED"}var m=document.getElementsByTagName(n);if(m.length==0){throw"ELEMENT_NOT_FOUND"}if((typeof d!="string")||(typeof d=="string"&&d=="")){throw"ATTRIBUTE_NOT_SPECIFIED"}if((typeof b=="undefined")||(b.length<=0)){throw"RULESET_NOT_SPECIFIED"}var l;var f;var k;var h=0;VALITON_WA.log("Matching "+m.length+" <"+n+">-Tags using '"+d+"'-Attribute as linkValue against "+b.length+" rules");for(var c=0;c<m.length;c++){l=m[c].getAttribute(d);lHTML=m[c].innerHTML;f=VALITON_WA.Util.checkrules(m[c],b);if(f==null){continue}else{k=f}m[c].onclick=VALITON_WA.Util.chain(m[c].onclick,(function(j,e,o){return function(){VALITON_WA.track({linkType:e,linkValue:j,linkHTML:o,event:"click",module:"link"})}})(l,k,lHTML));h++}VALITON_WA.log("Marked "+h+" <"+n+">-Tags for linktracking")}catch(g){switch(g){case"TAG_NOT_SPECIFIED":VALITON_WA.log("ERROR: no <'tag'>-element given");break;case"ELEMENT_NOT_FOUND":VALITON_WA.log("WARNING: link-chaining found no <"+n+"> elements");break;case"ATTRIBUTE_NOT_SPECIFIED":VALITON_WA.log("ERROR: no attribute for <"+n+"> elements given");break;case"RULESET_NOT_SPECIFIED":VALITON_WA.log("ERROR: ruleset missing; no <"+n+"> elements tagged");break;default:VALITON_WA.log("There was an error while chaining the click-elements: "+g);break}return}},chain:function(c,b){if(c){return function(){b.call(this,arguments);c.call(this,arguments);return true}}else{return b}},checkrules:function(b,c){var h=null;var f=null;try{if(typeof b=="undefined"){throw"NO_OBJECT_GIVEN"}for(var d=0;d<c.length;d++){testRule=c[d];if(typeof testRule.attr!=="string"||testRule.attr===""){throw"NO_ATTRIBUTE_GIVEN"}if(typeof testRule.rule!=="string"){throw"NO_PATTERN_GIVEN"}f=b.getAttribute(testRule.attr);if(f==null){continue}f=f.toLowerCase();if(typeof testRule.not=="boolean"&&testRule.not==true){testInv=true}else{testInv=false}chkResult=f.search(testRule.rule);if(testInv==true&&chkResult>-1){chkResult=-1}else{if(testInv==true&&chkResult==-1){chkResult=0}}if(chkResult>-1){if(typeof testRule.value=="undefined"){h=f}else{h=testRule.value}break}else{}}}catch(g){switch(g){case"NO_OBJECT_GIVEN":VALITON_WA.log("ERROR: No object for rulecheck supplied");break;case"NO_ATTRIBUTE_GIVEN":VALITON_WA.log("ERROR: Rule #"+d+" specifies no value to check");break;case"NO_PATTERN_GIVEN":VALITON_WA.log("ERROR: Rule #"+d+" specifies no pattern to match");break;default:VALITON_WA.log("There was an error while processing the ruleset: "+g);break}}return h},analyzeReferrer:function(c){var b=c.split(/\/+/g)[1];var d=c.split("?")[1].split("&");if(this.getValueByKey(d,"tbs")){tbs=this.getValueByKey(d,"tbs");if(tbs.indexOf("vid")!=-1){VALITON_WA.log("Module=VideoSearch")}}this.getValueByKey(d,"q");VALITON_WA.log(b);if(b.indexOf("google.")!=-1){VALITON_WA.log("SearchType=googleSearch");VALITON_WA.log("Search Prase="+this.getValueByKey(d,"q"))}}};if(typeof VALITON_WA==="undefined"){VALITON_WA={}}VALITON_WA.Custom={__custom_tracking_properties_extend:{agofcode:"178",ivwcode:"",agofpath:"",ressort2ivw:{auto:"Aut",bayern:"Bay",bildung:"Bil",dachau:"Muc",digital:"Dig",ebersberg:"Muc",erding:"Muc",freising:"Muc",fuerstenfeldbruck:"Muc",geld:"Gel",gesundheit:"Ges",homepage:"Hom",humor:"Ent",karriere:"Kar",kolumne:"Kol",kultur:"Kul",leben:"Leb",muenchen:"Muc",medien:"Med",meinung:"Mei",multimedia:"Mul",panorama:"Pan",politik:"Pol",reise:"Rei",schlagzeilen:"Sgz",service:"Ser",spiele:"Spi",sport:"Spo",starnberg:"Muc",stil:"Sti",thema:"The",themen:"The",verlag:"Ver",video:"Vid",wetter:"Wet",wirtschaft:"Wir",wissen:"Wis",wolfratshausen:"Muc","default":"Def"},dokumentTyp2ivw:{app:"App",archiv:"Arc",artikel:"Art",bildstrecke:"Big",fluester:"Art",homepage:"Hom",kooperation:"Kop",newsticker:"Nwt",ratgeber:"Rat",ressort:"Res",reisefuehrer:"Rfr",spiel:"Spi",suche:"Suc",thema:"The",video:"Vid","default":"Def"},webseitenbereich2ivw:{nachrichten:"a",verzeichnisse:"e","default":"x"},art2ivw:{www:"W",mobile:"M",app:"A","default":"X"},art2ivwpraefix:{www:"",mobile:"szmmobil_",app:"szmmobil_","default":""}},__custom_tracking_properties_override:{},__custom_tracking_properties_process:function(j){switch(j.dokumentTyp){case"homepage":j.ressort="homepage";break;case"bildergalerie":j.dokumentTyp="bildstrecke";break;case"auslese":j.thema="auslese";break;case"thema":if(typeof j.ressort==="undefined"){j.ressort="themen"}break}if("string"===typeof j.thema){var b=j;var o={"&uuml;":"ue","&auml;":"ae","&ouml;":"oe","&szlig;":"ss","&quot;":"","&amp;":"-","&Agrave;":"A","&Aacute;":"A","&Acirc;":"A","&Atilde;":"A","&Aring;":"A","&AElig;":"A","&Ccedil;":"C","&Egrave;":"E","&Eacute;":"E","&Ecirc;":"E","&Euml;":"E","&Igrave;":"I","&Iacute;":"I","&Icirc;":"I","&Iuml;":"I","&ETH;":"E","&Ntilde;":"N","&Ograve;":"O","&Oacute;":"O","&Ocirc;":"O","&Otilde;":"O","&Ouml;":"Oe","&Oslash;":"O","&Ugrave;":"U","&Uacute;":"U","&Ucirc;":"U","&Uuml;":"Ue","&Yacute;":"Y","&agrave;":"a","&aacute;":"a","&acirc;":"a","&atilde;":"a","&auml;":"ae","&aring;":"a","&aelig;":"a","&ccedil;":"c","&egrave;":"e","&eacute;":"e","&ecirc;":"e","&euml;":"e","&igrave;":"i","&iacute;":"i","&icirc;":"i","&iuml;":"i","&ntilde;":"n","&ograve;":"o","&oacute;":"o","&ocirc;":"o","&otilde;":"o","&oslash;":"o","&ugrave;":"u","&uacute;":"u","&ucirc;":"u","&yacute;":"y","&yuml;":"y"};VALITON_WA.Util.eachKeyValue(o,function(t,u){b.thema=typeof b.thema==="string"?b.thema.replace(t,u):"nothema";b.titel=typeof b.titel==="string"?b.titel.replace(t,u):"notitle";b.ressort=typeof b.ressort==="string"?b.ressort.replace(t,u):"noressort"});j=b}var q="muenchen.region.dachau";var k="muenchen.region.ebersberg";var s="muenchen.region.erding";var m="muenchen.region.freising";var d="muenchen.region.fuerstenfeldbruck";var p="muenchen.region.muenchen";var h="muenchen.region.starnberg";var n="muenchen.region.wolfratshausen";var g=({"bilderübersicht":"vermischtes.uebersicht.bilderuebersicht",cityguide:"muenchen.cityguide",dachau:q,"dachau.kultur":q,"dachau.politik":q,"dachau.vermischtes":q,ebersberg:k,"ebersberg.kultur":k,"ebersberg.politik":k,"ebersberg.vermischtes":k,erding:s,"erding.kultur":s,"erding.politik":s,"erding.vermischtes":s,freising:m,"freising.kultur":m,"freising.politik":m,"freising.vermischtes":m,fuerstenfeldbruck:d,"fuerstenfeldbruck.kultur":d,"fuerstenfeldbruck.politik":d,"fuerstenfeldbruck.vermischtes":d,leute:"muenchen.region.leute",muenchenstadt:p,"muenchenstadt.kultur":p,"muenchenstadt.politik":p,"muenchenstadt.vermischtes":p,regionsport:"muenchen.region.sport",starnberg:h,"starnberg.kultur":h,"starnberg.politik":h,"starnberg.vermischtes":h,wolfratshausen:n,"wolfratshausen.kultur":n,"wolfratshausen.politik":n,"wolfratshausen.vermischtes":n,"m&uuml;nchen":"muenchen"})[j.ressort];if(typeof g!=="undefined"){j.ressort=g}if(j.thema==undefined){var e;if(j.dokumentTyp=="ressort"||j.dokumentTyp=="homepage"){e=j.webseitenbereich+"_"+j.ressort+".index"}else{e=j.webseitenbereich+"_"+j.ressort+"."+j.dokumentTyp+"."+j.titel}}else{var e;if(j.dokumentTyp=="ressort"){e=j.webseitenbereich+"_"+j.ressort+".index"}else{if(j.dokumentTyp=="thema"){e=j.webseitenbereich+"_"+j.ressort+".thema."+j.thema}else{e=j.webseitenbereich+"_"+j.ressort+".thema."+j.thema+"."+j.dokumentTyp+"."+j.titel}}}j.uniqePageID=e;j.refDomain=document.referrer;var l="N";l=l+j.agofcode;var c=((typeof j.webseitenbereich2ivw[j.webseitenbereich]!="undefined")?j.webseitenbereich2ivw[j.webseitenbereich]:j.webseitenbereich2ivw["default"]);l=l+((typeof j.vermarktbar!="undefined"&&j.vermarktbar)?c.toUpperCase():c);l=l+((typeof j.ressort2ivw[j.ressort.split(".")[0]]!="undefined")?j.ressort2ivw[j.ressort.split(".")[0]]:j.ressort2ivw["default"]);l=l+((typeof j.dokumentTyp2ivw[j.dokumentTyp]!="undefined")?j.dokumentTyp2ivw[j.dokumentTyp]:j.dokumentTyp2ivw["default"]);l=l+((typeof j.art2ivw[j.art]!="undefined")?j.art2ivw[j.art]:j.art2ivw["default"]);l=((typeof j.art2ivwpraefix[j.art]!="undefined")?j.art2ivwpraefix[j.art]:j.art2ivwpraefix["default"])+l;j.ivwcode=l;var f;var r=j.art+"/";if(j.thema==undefined){if(j.dokumentTyp=="ressort"||j.dokumentTyp=="homepage"){f=r+j.ressort+"/index"}else{f=r+j.ressort+"/"+j.dokumentTyp+"/"+j.titel}}else{if(j.dokumentTyp=="ressort"){f=r+j.ressort+"/index"}else{if(j.dokumentTyp=="thema"){f=r+j.ressort+"/"+j.thema}else{f=r+j.ressort+"/"+j.thema+"/"+j.dokumentTyp+"/"+j.titel}}}j.agofpath=f;return j}};if(typeof VALITON_WA!=="undefined"){if(typeof VALITON_WA.Adapter==="undefined"){VALITON_WA.Adapter={}}VALITON_WA.Adapter.ivw={NAME:"ivw",init:function(){VALITON_WA.register(VALITON_WA.Adapter.ivw)},_getIvwUrlTemplate:function(c){var d=c.domain.toLowerCase();var b=({"www.sueddeutsche.de":"http://sueddeut.ivwbox.de/cgi-bin/ivw/CP/{ivwcode}?r={referrer}&d={time}","www.valitontest.de":"http://test.ivwbox.de/cgi-bin/ivw/CP/{agof};{path}?r={referrer}&d={time}"})[d];if(b==="undefined"){b="http://sueddeut.ivwbox.de/cgi-bin/ivw/CP/{ivwcode}?r={referrer}&d={time}"}return b},track:function(f){var b=VALITON_WA.Util.getObjEventName(f);var d="ivw";var g=new Array();g.event=b;g.tracker=d;g.object=f;try{this.handleMessage(g)}catch(c){VALITON_WA.log("There was an error while generating the pixel: "+d+" : "+b)}},handleMessage:function(c,b){VALITON_WA.log("handleMessage, Empty Stub called")}};VALITON_WA.Adapter.ivw.init()}if(typeof VALITON_WA!=="undefined"){if(typeof VALITON_WA.Adapter==="undefined"){VALITON_WA.Adapter={}}VALITON_WA.Adapter.ivw.handleMessage=function(c){switch(c.event){case"page_view":this._imgList=[];this._imgList.splice(0,1,new Image());var d=c.object;var f,e,b;f={ivwcode:(d&&d.ivwcode?d:document).ivwcode,time:(new Date()).getTime()+"_"+Math.round(Math.random()*100000),referrer:escape(document.referrer)};e=this._getIvwUrlTemplate(d);if("string"!==typeof(e)){}else{b=VALITON_WA.Util.processTemplate(e,f);this._imgList[0].src=b}break;case"page_click":break;case"document_loaded":break;case"document_unloaded":break;default:break}}}if(typeof VALITON_WA!=="undefined"){if(typeof VALITON_WA.Adapter==="undefined"){VALITON_WA.Adapter={}}VALITON_WA.Adapter.quisma={URLTEMPLATE:"https://tracking.quisma.com/l.cfs?action=counter&qupid=28890&",NAME:"quisma",init:function(){VALITON_WA.register(VALITON_WA.Adapter.quisma)},track:function(f){var b=VALITON_WA.Util.getObjEventName(f);var d="quisma";var g=new Array();g.event=b;g.tracker=d;g.object=f;try{this.handleMessage(g)}catch(c){VALITON_WA.log("There was an error while generating the pixel: "+d+" : "+b)}},writeIframe:function(c){var b=document.createElement("iframe");b.width="1";b.height="1";b.frameBorder="0";b.src=c;document.body.appendChild(b)},handleMessage:function(c,b){VALITON_WA.log("handleMessage, Empty Stub called")}};VALITON_WA.Adapter.quisma.init()}if(typeof VALITON_WA!=="undefined"){if(typeof VALITON_WA.Adapter==="undefined"){VALITON_WA.Adapter={}}VALITON_WA.Adapter.quisma.handleMessage=function(b){var d=b.object;switch(b.event){case"page_view":var c;if(d.dokumentTyp=="homepage"){c="CID=3"}else{c="CID=4&productID="+d.ressort}this.writeIframe(this.URLTEMPLATE+c);break;case"document_loaded":break;case"document_unloaded":break;default:VALITON_WA.log("unhandeled event:"+obj);break}}}var ns_scriptversion="2.3.2";(function(){if(typeof(ns_pixelUrl)!="string"){return}var scriptTime=new Date().getTime();var isArray=function(a){return a.constructor==Array};var shiftArray=function(a){if(isArray(a)&&(Array.prototype)&&typeof(Array.prototype.shift)=="function"){return a.shift()}else{for(var i=0,b=a[0],l=a.length-1;i<l;i++){a[i]=a[i+1]}a.length--;return b}};var joinArray=function(a,s){if(typeof(Array.prototype.join)=="function"){return a.join(s)}else{var str="";s=s||",";for(var i=0,l=a.length;part=a[i];i++){str+=part+((i!=l-1)?s:"")}return srt}};var addEvent=(window.addEventListener)?(function(element,type,handler){element.addEventListener(type,handler,false)}):(document.attachEvent)?(function(element,type,handler){element.attachEvent("on"+type,handler)}):(function(element,type,handler){var priorfunc=element["on"+type];element["on"+type]=function(e){if(typeof priorfunc=="function"){priorfunc(e)}handler(e)}});var Browser={IE:
/*@cc_on!@*/
false,IE4:
/*@if (@_jscript_version<4) !@end@*/
false,IE7:(
/*@cc_on!@*/
false&&/MSIE\s*([7-9]|[1-9]\d+)/i.test(navigator.userAgent))?true:false,SAFARI:/WebKit/i.test(navigator.userAgent)};var ns_technical=function(){var _VERSION=ns_scriptversion;var _startTime=(typeof(ns_loadingtime1)!="undefined"&&!isNaN(parseInt(ns_loadingtime1)))?ns_loadingtime1:new Date().getTime();var _url=typeof(ns_pixelUrl)=="string"?ns_pixelUrl:null;var _plugins=[];var _loadEvents=[];var _regCounter=/^https?:\/\/([^\/]+)\/([^\/]+)\/([^\/]+)\/s\?([\w_\-\.\[\]\(\)\$\~\{\}\*\^\,]{1,200})/;var _Cookie={isCreated:false,initialize:function(key,data,options){this.key=key;this.data=data;var defaults={expires:null,domain:null,secure:false,path:null};if(options){for(var property in defaults){if(typeof(options[property])!="undefined"){defaults[property]=options[property]}}}this.options=defaults},isEnabled:function(){return(document.cookie.indexOf(this.key)!=-1&&document.cookie.indexOf(this.data)!=-1)?true:false},create:function(){if(!this.isCreated){this.isCreated=true;var params=[];if(this.key&&this.data&&this.options){for(var property in this.options){if(this.options[property]){if(property=="secure"){if(this.options[property]){params[params.length]=property}}else{params[params.length]=property+"="+this.options[property]}}}params=params.length>0?";"+joinArray(params,";"):"";document.cookie=this.key+"="+this.data+params}}}};var cookdomain;if(typeof(ns_rootdomain)=="string"){cookdomain=ns_rootdomain}else{var regdom=/\.?[^\.]+\.?[^\.]+\.[a-z]+$/;if(regdom.test(document.domain)){cookdomain=regdom.exec(document.domain).toString();var dbldomregexp=/[^\.]+(\.[a-z]{2}){2}$/i;if(dbldomregexp.test(cookdomain)){cookdomain=dbldomregexp.exec(cookdomain)[0]}else{var regsubdom=/[^\.]+\.[^\.]+$/;if(regsubdom.test(cookdomain)){cookdomain=regsubdom.exec(cookdomain).toString();var wwwreg=/^www./;if(wwwreg.test(cookdomain)){cookdomain=cookdomain.replace(wwwreg,"").toString()}}}}}if(typeof(cookdomain)=="undefined"){cookdomain=document.domain}else{cookdomain=(cookdomain.indexOf(".")!=0)?"."+cookdomain:cookdomain}_Cookie.initialize("ns_session","enabled",{path:"/",domain:cookdomain});var isCookieGenerated=false;if(!_Cookie.isEnabled()){_Cookie.create();if(_Cookie.isEnabled()){isCookieGenerated=true}}if(isCookieGenerated){var loadTime={DOM:null,Page:null,Script:null};var loadingTime=function(prop,time){return new function(){loadTime[prop]=new Date().getTime()-(time||_startTime)}};var domcontentloaded=function(){var completed=function(){loadingTime("DOM")};if(document.addEventListener&&!Browser.SAFARI){document.addEventListener("DOMContentLoaded",completed,false)}else{if(Browser.SAFARI){var _timer=setInterval(function(){if(/loaded|complete/.test(document.readyState)){clearInterval(_timer);completed()}},5)}else{if(Browser.IE&&!Browser.IE4){document.write('<script id="ns_technical_script" defer src="javascript:void(0)"><\/script>');var script=document.getElementById("ns_technical_script");script.onreadystatechange=function(){if(this.readyState=="complete"){completed()}}}}}}();var navigatorPlugins=(!Browser.IE&&navigator&&navigator.plugins&&navigator.plugins.length)?function(){var regExp=/^([\w]+\/[^;]+);?/;var result={};for(var i=0,plugin;(plugin=navigator.plugins[i]);i++){if(!plugin||!plugin.length||!plugin[0]){continue}var type=(plugin&&plugin[0]&&regExp.test(plugin[0].type))?regExp.exec(plugin[0].type)[1]:null;if(type&&!result[type]){result[type]=plugin.description}}return result}():null;var navigatorMimeTypes=(!Browser.IE&&navigator&&navigator.mimeTypes&&navigator.mimeTypes.length)?function(){var result={};for(var key in navigator.mimeTypes){var mime=/^\d+$/.test(key)?navigator.mimeTypes[key]:null;if(mime&&typeof(mime.type)=="string"){result[mime.type]=true}}return result}():null;var log=function(){var query=ns_technical.toQueryString();var url=ns_technical.getUrl();if(url){var img=new Image();img.src=url+query}};if(typeof(addEvent)=="function"){addEvent(window,"load",function(){loadingTime("Page");log()})}var ClientCaps;if(Browser.IE){ClientCaps={domElement:function(){var element=document.createElement("IE:clientCaps");if(element){element.style.behavior="url('#default#clientCaps')"}return element}(),getComponent:function(classId){classId="{"+classId+"}";var isDetected=this.domElement&&typeof(this.domElement.isComponentInstalled)!="undefined"&&this.domElement.isComponentInstalled(classId,"ComponentID");var version=isDetected?(this.domElement&&this.domElement.getComponentVersion(classId,"ComponentID")):null;return{isDetected:isDetected,version:version}}}}return{VERSION:_VERSION,loadTime:loadTime,loadingTime:loadingTime,isCookieGenerated:true,getUrl:function(){var url=null;if(_url&&_regCounter.test(_url)){var regexp=/ns__t\=[\d]+/;var timestamp="";if(regexp.test(_url)){timestamp=regexp.exec(_url)}else{timestamp="ns__t="+String(new Date().getTime())}url=_regCounter.exec(_url)[0]+"&"+timestamp}return url},TimeZone:function(){var now=new Date();var jan1=new Date(now.getFullYear(),0,1,0,0,0,0);var june1=new Date(now.getFullYear(),6,1,0,0,0,0);var temp=jan1.toGMTString();var jan2=new Date(temp.substring(0,temp.lastIndexOf(" ")-1));temp=june1.toGMTString();var june2=new Date(temp.substring(0,temp.lastIndexOf(" ")-1));var zoneoffset=(jan1-jan2)/(3600000);var daylight_time_offset=(june1-june2)/(3600000);var dst;if(zoneoffset==daylight_time_offset){dst=0}else{var hemisphere=zoneoffset-daylight_time_offset;if(hemisphere>=0){zoneoffset=daylight_time_offset}dst=1}var zone=function(){var hours=parseInt(zoneoffset);var rhours=hours;zoneoffset-=parseInt(zoneoffset);zoneoffset*=60;var mins=parseInt(zoneoffset);zoneoffset-=parseInt(zoneoffset);zoneoffset*=60;var secs=parseInt(zoneoffset);rhours=(hours<10&&hours>0)?"+0"+hours:"+"+hours;rhours=(hours==0)?"0"+hours:rhours;rhours=(hours<0&&hours>-10)?"-0"+Math.abs(hours):rhours;mins=(mins<10)?"0"+mins:mins;return rhours+":"+mins}();return{zone:zone,dst:dst}}(),detectPlugin:function(progIds,mimeType){var pluginObject=null;var isDetected=false;if(Browser.IE&&!Browser.IE4&&!!(window.ActiveXObject)){var arr=[].concat(progIds);var progId=null,activeXObject;while((progId=shiftArray(arr))&&!isDetected){eval("								try{									pluginObject = new ActiveXObject(progId);									if(pluginObject){										isDetected = true;									}								}								catch(e){}")}}else{pluginObject=(navigatorPlugins&&navigatorPlugins[mimeType])?navigatorPlugins[mimeType]:null;isDetected=!!((navigatorMimeTypes&&typeof(navigatorMimeTypes[mimeType])!="undefined")||pluginObject)}return{pluginObject:pluginObject,isDetected:isDetected}},addPlugin:function(plugin){_plugins[_plugins.length]=plugin;plugin.init()},Browser:navigator.userAgent,toQueryString:function(){var measurement={ns_type:"hidden",ns_charset:ns_technical.Document.charSet,ns_ver:ns_technical.VERSION,ns_plugins:ns_technical.collectPlugins(),ns_timezone:ns_technical.TimeZone.zone,ns_timedst:ns_technical.TimeZone.dst,ns_screen:ns_technical.Display.screenSize[0]+"x"+ns_technical.Display.screenSize[1],ns_innersize:ns_technical.Display.innerSize[0]+"x"+ns_technical.Display.innerSize[1],ns_html_loading_time:ns_technical.loadTime.DOM,ns_full_loading_time:ns_technical.loadTime.Page,ns_script_time:ns_technical.loadTime.Script,ns_useragent:ns_technical.Browser};var plugins=function(){var query=[];for(var i=0,plugin;(plugin=measurement.ns_plugins[i]);i++){if(plugin.isDetectable&&plugin.isEnabled){query[query.length]=!plugin.isDetected?plugin.key:plugin.key+":"+plugin.version}}return joinArray(query,"|")}();var query="";var query=[];for(var property in measurement){if(typeof measurement[property]=="undefined"){continue}var value;if(property=="ns_plugins"){value=plugins}else{value=(measurement[property])?measurement[property].toString():""}if(value.length==0){continue}query[query.length]=property+"="+escape(value)}return"&"+joinArray(query,"&")},Document:function(){return{charSet:(typeof document.charset!="undefined")?document.charset:(typeof document.characterSet!="undefined")?document.characterSet:null}}(),Display:function(){return{screenSize:[screen.width,screen.height],innerSize:[Math.max(!isNaN(parseInt(window.innerWidth))?parseInt(window.innerWidth):0,(document.body&&!isNaN(parseInt(document.body.clientWidth)))?parseInt(document.body.clientWidth):0),Math.max(!isNaN(parseInt(window.innerHeight))?parseInt(window.innerHeight):0,(document.body&&!isNaN(parseInt(document.body.clientHeight)))?parseInt(document.body.clientHeight):0)]}}(),Plugin:function(key,name,classId,mimeType,progIds,options){var pluginDefaults={createDom:false,doIEDetection:true,doIE7Detection:true,doGeckoDetection:true,doClientCaps:false,detect:null,version:null,isEnabled:null};if(options){for(var property in pluginDefaults){if(typeof(options[property])!="undefined"){pluginDefaults[property]=options[property]}}}options=pluginDefaults;var properties={key:!(/[^\d]/.test(String(key)))?key.toString():null,classId:classId,mimeType:mimeType,progIds:progIds||[],name:name,domElement:null,pluginObject:null,version:null,isDetected:false,isEnabled:true,isDetectable:Browser.IE7?options.doIE7Detection:Browser.IE?options.doIEDetection:options.doGeckoDetection};var createDOMObject=function(){var element=null;if(document.body){var element=document.body.appendChild(document.createElement("OBJECT"));element.setAttribute("height","1");element.setAttribute("width","1");element.style.display="block";if(Browser.IE&&properties.classId!=null){element.setAttribute("classid","clsid:"+properties.classId)}else{element.setAttribute("type",properties.mimeType);element.setAttribute("data","data:,");var param=document.createElement("param");param.setAttribute("name","enablejavascript");param.setAttribute("value",true);element.appendChild(param)}}return element};return{getVersion:function(){if(options&&typeof(options.version)=="function"){var version=options.version(this)}return version||"x.x"},getProperty:function(prop){return properties[prop]},setProperty:function(prop,value){return properties[prop]=value},init:function(){if(properties.isDetectable){var props=null;if(options&&typeof(options.detect)=="function"){var result=options.detect.call(this);props=typeof(result)=="boolean"?{isDetected:!!(result)}:typeof(object)?result:null}else{if(options&&options.doClientCaps&&Browser.IE){props=ClientCaps.getComponent(classId)}else{props=ns_technical.detectPlugin(properties.progIds,properties.mimeType)}}if(props&&props.isDetected){properties.isDetected=true;if(options&&typeof(options.isEnabled)=="function"){var isEnabled=options.isEnabled.call(this);if(typeof(isEnabled)=="boolean"){properties.isEnabled=isEnabled}}if(options&&options.createDom){properties.domElement=createDOMObject()}for(var prop in props){properties[prop]=props[prop]}}}}}},collectPlugins:function(){return[]}}}else{return{isCookieGenerated:false}}}();if(ns_technical.isCookieGenerated){ns_technical.loadingTime("Script",scriptTime)}})();if(typeof VALITON_WA!=="undefined"){if(typeof VALITON_WA.Adapter==="undefined"){VALITON_WA.Adapter={}}VALITON_WA.Adapter.sitestat={URLTEMPLATE:"http://de.sitestat.com/sueddeutsche/sueddeutsche/s?",NAME:"sitestat",init:function(){VALITON_WA.register(VALITON_WA.Adapter.sitestat)},track:function(f){var b=VALITON_WA.Util.getObjEventName(f);var d="sitestat";var g=new Array();g.event=b;g.tracker=d;g.object=f;try{this.handleMessage(g)}catch(c){VALITON_WA.log("There was an error while generating the pixel: "+d+" : "+b)}},configureSitestat:function(ns_l){var ns_type="";var r="";var t="?";var p=new Array();var w="";var l="";var d=document;var n=navigator;var ns_0="";if(top!=self){if("\u0041"=="A"){var u=n.userAgent;if(u.indexOf("Safari")==-1){var b=u.indexOf("Opera");if(b==-1||(u.charAt(b+6)+0)>5){b=u.indexOf("Mozilla");var xb=b!=-1?u.charAt(b+8)>4:1;if(u.indexOf("compatible")!=-1||xb){var c="try{ns_0=top.document.referrer}catch(e){}";eval(c);c="try{l=top.document.location.href}catch(e){}";eval(c)}}}}}else{ns_0=d.referrer;l=d.location.href}if(ns_0.lastIndexOf("/")==ns_0.length-1){ns_0=ns_0.substring(ns_0.lastIndexOf("/"),0)}var f=ns_l.indexOf("?");if(f!=-1){var q=ns_l.substring(f+1);ns_l=ns_l.substring(0,f);if(q){var m=q.indexOf("&");w=q.substring(0,m==-1?q.length:m);if(w.indexOf("=")!=-1){w=""}if(w){q=q.substring(m==-1?q.length:m+1);q+=(q?"&":"")+"ns_name="+w}if(ns_0.length>0){q+=(q?"&":"")+"ns_referrer="+escape(ns_0)}var s=0;var e=0;while(q.length){e=q.indexOf("&");if(e==-1){e=q.length}var o=q.substring(s,e);if(o.substring(0,4)=="amp;"){o=o.substring(4)}if(o){p[p.length]=o}q=q.substring(e+1)}}}var a=l.indexOf(t);a=a==-1?0:l.substring(a+1);var j;if(r=="yes"){j=ns_0.length}else{if(r=="no"){j=!ns_0.length}else{if(r==""){j=1}}}if(a&&j){while(a.length){var e=a.indexOf("&");if(e==-1){e=a.length}var k=a.substring(0,a.substring(0,e).indexOf("="));var v=a.substring(a.substring(0,e).indexOf("=")+1,e);if(k.substring(0,4)=="amp;"){k=k.substring(4)}while(v.substring(0,1)=="="){v=v.substring(1)}if(k=="ns_name"){w=v}else{if(k=="ns_or"){var g="ns_referrer=";for(var z=0;z<p.length;z++){if(p[z].substring(0,g.length)==g){p[z]="ns_referrer="+v}}}else{if(k.substring(0,3)=="ns_"&&v&&k){var h=0;for(var x=0;x<p.length;x++){if(p[x].substring(0,p[x].indexOf("="))==k){p[x]=k+"="+v;h=1}}if(!h){p[p.length]=k+"="+v}}}}a=a.substring(e+1)}}if(!w){return}var s="";var y="";for(var i=0;i<p.length;i++){if(p[i].substring(0,8)!="ns_name="){if(p[i].substring(0,12)!="ns_referrer="){s+="&"+p[i]}else{y="&"+p[i]}}}s+=ns_type?"&ns_type="+ns_type+"&ns_action=view":"";ns_pixelUrl=ns_l+"?"+w+"&ns__t="+(new Date()).getTime();ns_l=ns_pixelUrl+s+y;if(d.images){ns_1=new Image();ns_1.src=ns_l}else{d.write("<img src="+ns_l+' width="1" height="1">')}},handleMessage:function(c,b){VALITON_WA.log("handleMessage, Empty Stub called")}};VALITON_WA.Adapter.sitestat.init()}if(typeof VALITON_WA!=="undefined"){if(typeof VALITON_WA.Adapter==="undefined"){VALITON_WA.Adapter={}}VALITON_WA.Adapter.sitestat.handleMessage=function(b){var e=b.object;switch(b.event){case"page_view":var d="";if(e.vermarktbar){d="&ads=y"}else{d="&ads=n"}if(e.thema==undefined){var c;if(e.dokumentTyp=="ressort"||e.dokumentTyp=="homepage"){c=e.webseitenbereich+"_"+e.ressort+".index"+d}else{c=e.webseitenbereich+"_"+e.ressort+"."+e.dokumentTyp+"."+e.titel+d}}else{var c;if(e.dokumentTyp=="ressort"){c=e.webseitenbereich+"_"+e.ressort+".index"+d}else{if(e.dokumentTyp=="thema"){c=e.webseitenbereich+"_"+e.ressort+".thema."+e.thema+d}else{c=e.webseitenbereich+"_"+e.ressort+".thema."+e.thema+"."+e.dokumentTyp+"."+e.titel+d}}}this.configureSitestat(this.URLTEMPLATE+c);break;case"document_loaded":break;case"document_unloaded":break;default:VALITON_WA.log("unhandled event: "+this.NAME+"["+b.event+"]");break}}}var _sf_startpt=(new Date()).getTime();var _sf_async_config=_sf_async_config||{};if(typeof VALITON_WA!=="undefined"){if(typeof VALITON_WA.Adapter==="undefined"){VALITON_WA.Adapter={}}VALITON_WA.Adapter.chartbeat={NATIVE:_sf_async_config,NAME:"chartbeat",init:function(){_sf_async_config.uid=27639;_sf_async_config.domain="sueddeutsche.de";_sf_async_config.useCanonical=true;VALITON_WA.register(VALITON_WA.Adapter.chartbeat)},track:function(f){var b=VALITON_WA.Util.getObjEventName(f);var d="chartbeat";var g=new Array();g.event=b;g.tracker=d;g.object=f;try{this.handleMessage(g)}catch(c){VALITON_WA.log("There was an error while generating the pixel: "+d+" : "+b)}},handleMessage:function(c,b){VALITON_WA.log("handleMessage, Empty Stub called")},loadChartbeat:function(){window._sf_endpt=(new Date()).getTime();var b=document.createElement("script");b.setAttribute("language","javascript");b.setAttribute("type","text/javascript");b.setAttribute("src",(("https:"==document.location.protocol)?"https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/":"http://static.chartbeat.com/")+"js/chartbeat.js");document.body.appendChild(b)}};VALITON_WA.Adapter.chartbeat.init()}if(typeof VALITON_WA!=="undefined"){if(typeof VALITON_WA.Adapter==="undefined"){VALITON_WA.Adapter={}}VALITON_WA.Adapter.chartbeat.handleMessage=function(c){var d=VALITON_WA.getProp();var e=c.object;switch(c.event){case"page_view":if(typeof e.dokumentTyp!="undefined"&&e.dokumentTyp=="spiel"){break}var b;if(e.thema==undefined){if(e.dokumentTyp=="ressort"||e.dokumentTyp=="homepage"){b=e.ressort+"/index"}else{b=e.ressort+"/"+e.dokumentTyp+"/"+e.titel}}else{if(e.dokumentTyp=="ressort"){b=e.ressort+"/index"}else{if(e.dokumentTyp=="thema"){b=e.ressort+"/thema/"+e.thema}else{b=e.ressort+"/thema/"+e.thema+"/"+e.dokumentTyp+"/"+e.titel}}}this.NATIVE.title=b;this.NATIVE.sections=e.webseitenbereich+", "+e.art+", "+e.ressort;this.NATIVE.authors=(typeof e.thema=="undefined")?"-":e.thema;this.loadChartbeat();break;case"link_click":break;case"document_loaded":break;case"document_unloaded":break;default:VALITON_WA.log("unhandled event: "+this.NAME+"["+c.event+"]");break}}}var _gaq=_gaq||[];(function(){var c=document.createElement("script");c.type="text/javascript";c.async=true;c.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var b=document.getElementsByTagName("script")[0];b.parentNode.insertBefore(c,b)})();if(typeof VALITON_WA!=="undefined"){if(typeof VALITON_WA.Adapter==="undefined"){VALITON_WA.Adapter={}}VALITON_WA.Adapter.ga={NATIVE:_gaq,NAME:"ga",init:function(){_gaq.push(["_setAccount","UA-19474199-2"]);_gaq.push(["_setDomainName",".sueddeutsche.de"]);_gaq.push(["_gat._anonymizeIp"]);VALITON_WA.register(VALITON_WA.Adapter.ga)},track:function(f){var b=VALITON_WA.Util.getObjEventName(f);var d="ga";var g=new Array();g.event=b;g.tracker=d;g.object=f;try{this.handleMessage(g)}catch(c){VALITON_WA.log("There was an error while generating the pixel: "+d+" : "+b)}},handleMessage:function(c,b){VALITON_WA.log("handleMessage, Empty Stub called")}};VALITON_WA.Adapter.ga.init()}if(typeof VALITON_WA!=="undefined"){if(typeof VALITON_WA.Adapter==="undefined"){VALITON_WA.Adapter={}}VALITON_WA.Adapter.ga.handleMessage=function(b){var c=VALITON_WA.getProp();var e=b.object;switch(b.event){case"page_view":var d;if(typeof e.thema=="undefined"){if(e.dokumentTyp=="ressort"||e.dokumentTyp=="homepage"){d="/"+e.webseitenbereich+"_"+e.art+"/"+e.ressort+"/index"}else{d="/"+e.webseitenbereich+"_"+e.art+"/"+e.ressort+"/"+e.dokumentTyp+"/"+e.titel}}else{if(e.dokumentTyp=="ressort"){d="/"+e.webseitenbereich+"_"+e.art+"/"+e.ressort+"/index"}else{if(e.dokumentTyp=="thema"){d="/"+e.webseitenbereich+"_"+e.art+"/"+e.ressort+"/thema/"+e.thema}else{d="/"+e.webseitenbereich+"_"+e.art+"/"+e.ressort+"/thema/"+e.thema+"/"+e.dokumentTyp+"/"+e.titel}}}_gaq.push(["_setCustomVar",1,"Vermarktbar",(e.vermarktbar)?"y":"n",3]);if(typeof e.thema!="undefined"){_gaq.push(["_setCustomVar",2,"Thema",e.thema,3])}_gaq.push(["_setCustomVar",3,"Ressort",e.ressort,3]);_gaq.push(["_setCustomVar",4,"Dokumenttyp",e.dokumentTyp,3]);_gaq.push(["_setCustomVar",5,"URL",window.location.href,3]);_gaq.push(["_trackPageview",d]);break;case"link_click":break;case"document_loaded":break;case"document_unloaded":break;default:VALITON_WA.log("unhandled event: "+this.NAME+"["+b.event+"]");break}}}VALITON_WA.setup();(function () {

// Generated by CoffeeScript 1.3.3
    var $, DuplicateDetector, ItemCounters, Page, PaywallSimulator, Tracker, Week, simulate,
        __indexOf = [].indexOf || function (item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) {
                    return i;
                }
            }
            return -1;
        };

    $ = (window.SDE && window.SDE.$) || window.jQuery;

    if (!$) {
        return false;
    }

    Week = (function () {

        function Week(date) {
            this.date = date != null ? date : new Date();
        }

        Week.prototype.toString = function () {
            var beginningOfWeek, bow, daysSinceMonday;
            daysSinceMonday = this.date.getDay() - 1;
            if (daysSinceMonday < 0) {
                daysSinceMonday = 6;
            }
            beginningOfWeek = new Date();
            beginningOfWeek.setDate(this.date.getDate() - daysSinceMonday);
            bow = beginningOfWeek;
            return "" + (bow.getFullYear()) + "-" + (bow.getMonth() + 1) + "-" + (bow.getDate());
        };

        Week.prototype.previous = function () {
            var d;
            d = new Date(this.date.getTime());
            d.setDate(d.getDate() - 7);
            return new Week(d);
        };

        return Week;

    })();

    Page = (function () {

        function Page(options) {
            if (options == null) {
                options = {};
            }
            $.extend(this, {
                valitonObj:  window.VALITON_WA,
                rootElement: document
            }, options);
        }

        Page.prototype.valitonProps = function () {
            var v;
            v = this.valitonObj;
            return v && v.getProp && v.getProp() || {};
        };

        Page.prototype.isStory = function () {
            return this.valitonProps().dokumentTyp === 'artikel';
        };

        Page.prototype.storyType = function () {
            var source, szRE;
            if (!this.isStory()) {
                return null;
            }
            szRE = /^\(SZ/i;
            source = $('.quelle', this.rootElement).text();
            if (szRE.test(source)) {
                return 'szStory';
            } else {
                return 'sdeStory';
            }
        };

        Page.prototype.storyId = function () {
            return this.isStory() && this.valitonProps().id || null;
        };

        return Page;

    })();

    DuplicateDetector = (function () {

        function DuplicateDetector(cookies, options) {
            this.cookies = cookies;
            if (options === null) {
                options = {};
            }
            $.extend(this, {
                maxItemsToRemember: 20,
                cookie:             {
                    name:    'szpws2_dedup',
                    expires: 24 * 3600
                },
                day:                new Date()
            }, options);
        }

        DuplicateDetector.prototype._getItems = function () {
            var c;
            c = this.cookies.get(this.cookie.name) || {};
            if (c.day === this.dayId()) {
                return c.items;
            } else {
                return [];
            }
        };

        DuplicateDetector.prototype._setItems = function (items) {
            var c;
            c = {
                day:   this.dayId(),
                items: items
            };
            return this.cookies.set(this.cookie.name, c, {
                expires: this.cookie.expires
            });
        };

        DuplicateDetector.prototype.add = function (item) {
            var items;
            if (this.include(item)) {
                return;
            }
            items = this._getItems().slice(0);
            items.unshift(item);
            items = items.slice(0, (this.maxItemsToRemember - 1) + 1 || 9e9);
            return this._setItems(items);
        };

        DuplicateDetector.prototype.include = function (item) {
            return __indexOf.call(this._getItems(), item) >= 0;
        };

        DuplicateDetector.prototype.dayId = function () {
            return "" + (this.day.getFullYear()) + "-" + (this.day.getMonth() + 1) + "-" + (this.day.getDate());
        };

        return DuplicateDetector;

    })();

    ItemCounters = (function () {

        function ItemCounters(period, cookies, options) {
            this.period = period;
            this.cookies = cookies;
            if (options == null) {
                options = {};
            }
            $.extend(this, {
                cookie:                  {
                    name:    'szpws2_counter',
                    expires: 31 * 24 * 3600
                },
                rememberPreviousPeriods: 3
            }, options);
        }

        ItemCounters.prototype._validPeriodIds = function () {
            var i, ids, p, _i, _ref;
            p = this.period;
            ids = [p.toString()];
            if (this.rememberPreviousPeriods > 0) {
                for (i = _i = 1, _ref = this.rememberPreviousPeriods; 1 <= _ref ? _i <= _ref : _i >= _ref; i =
                    1 <= _ref ? ++_i : --_i) {
                    p = p.previous();
                    ids.push(p.toString());
                }
            }
            return ids;
        };

        ItemCounters.prototype._cookie = function () {
            return this.cookies.get(this.cookie.name) || {};
        };

        ItemCounters.prototype._set = function (key, periods) {
            var c, i, periodId, _i, _len, _ref;
            c = this._cookie();
            c[key] = {};
            _ref = this._validPeriodIds();
            for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
                periodId = _ref[i];
                c[key][periodId] = periods[i];
            }
            return this.cookies.set(this.cookie.name, c, {
                expires: this.cookie.expires
            });
        };

        ItemCounters.prototype.get = function (key) {
            var periodId, periodsWithId, _i, _len, _ref, _results;
            periodsWithId = this._cookie()[key] || {};
            _ref = this._validPeriodIds();
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                periodId = _ref[_i];
                _results.push(periodsWithId[periodId] || 0);
            }
            return _results;
        };

        ItemCounters.prototype.increment = function (key) {
            var periods;
            periods = this.get(key);
            periods[0]++;
            return this._set(key, periods);
        };

        return ItemCounters;

    })();

    Tracker = (function () {

        function Tracker(options) {
            if (options == null) {
                options = {};
            }
            $.extend(this, {
                iframeUrl: window._pwsTrackerIframeUrl
            }, options);
        }

        Tracker.prototype.createIframe = function (url) {
            return $("<iframe src='" + url + "' height='1' width='1' style='display: none;' id='pwstracker' />").appendTo('body');
        };

        Tracker.prototype.track = function (hits) {
            return this.createIframe(this.iframeUrl + '#' + this._serializeHits(hits));
        };

        Tracker.prototype._serializeHits = function (hits) {
            var currentPeriod, h, key, keys, previousPeriods, vars;
            keys = ((function () {
                var _results;
                _results = [];
                for (key in hits) {
                    _results.push(key);
                }
                return _results;
            })()).sort();
            vars = (function () {
                var _i, _len, _results;
                _results = [];
                for (_i = 0, _len = keys.length; _i < _len; _i++) {
                    key = keys[_i];
                    h = hits[key];
                    currentPeriod = this._boolToChar(h.currentPeriod);
                    previousPeriods = this._boolToChar(h.previousPeriods);
                    _results.push("" + (encodeURIComponent(key)) + "=" + currentPeriod + previousPeriods);
                }
                return _results;
            }).call(this);
            return vars.join('&');
        };

        Tracker.prototype._boolToChar = function (bool) {
            if (bool) {
                return 'y';
            } else {
                return 'n';
            }
        };

        return Tracker;

    })();

    PaywallSimulator = (function () {

        function PaywallSimulator(options) {
            if (options == null) {
                options = {};
            }
            $.extend(this, {
                freeArticles: 7
            }, options);
        }

        PaywallSimulator.prototype._count = function (page) {
            if (page.isStory() && !this.duplicateDetector.include(page.storyId())) {
                this.duplicateDetector.add(page.storyId());
                this.counters.increment('allStories');
                if (page.storyType() === 'szStory') {
                    return this.counters.increment('szStories');
                }
            }
        };

        PaywallSimulator.prototype._track = function (page) {
            var countersAll, countersSz;
            countersAll = this.counters.get('allStories');
            countersSz = this.counters.get('szStories');
            return this.tracker.track({
                allStories2: {
                    currentPeriod:   countersAll[0] > this.freeArticles,
                    previousPeriods: Math.max.apply(Math, countersAll.slice(1)) > this.freeArticles
                },
                szStories2:  {
                    currentPeriod:   countersSz[0] > this.freeArticles,
                    previousPeriods: Math.max.apply(Math, countersSz.slice(1)) > this.freeArticles
                }
            });
        };

        PaywallSimulator.prototype.simulate = function (page) {
            this._count(page);
            return this._track(page);
        };

        return PaywallSimulator;

    })();

    SDE.szPaywallSimulation = function () {
        var JSON, cookies;
        cookies = $.cookies || SDE.$.cookies || window.jaaulde.utils.cookies;
        if (!cookies) {
            return false;
        }
        JSON = window.JSON;
        if (!(JSON && JSON.stringify && JSON.parse)) {
            return false;
        }
        return new PaywallSimulator({
            duplicateDetector: new DuplicateDetector(cookies),
            counters:          new ItemCounters(new Week(new Date()), cookies),
            tracker:           new Tracker()
        }).simulate(new Page());
    };
}).call(this);
/*global SDE, window, document, google_ad_num: true, google_cont, google_sky, google_renav, google_home, google_search, google_super, google_info */
( function () {
    /**
     *  Google AdSense Generation
     *
     *  Google's AdSense implementation is little more than a callback
     *  to functions defined here, that generate HTML via exciting
     *  mechanisms like `document.write`.  Fun!
     *
     *  I've defined all the necessary variables as attributes of
     *  `SDE.advertisement.Google`, and then exported them to the
     *  global context.  This is probably more complex than it needs
     *  to be, but it makes the global variables very clear (and easy
     *  to grep for).
     *
     *  @TODO:  Get some documentation on the class properties...
     *          I'm not at all sure what they're used for.
     *
     *  @author     Mike West <Mike.West@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @requires   SDE
     *  @namespace  SDE.advertisment
     *  @class      Google
     *  @static
     */

    SDE.namespace("advertisement.Google");

    SDE.advertisement.Google = {

        /**
         *  Skip-Parameter (in global namespace as `google_ad_num`)
         *  @property   adNum
         *  @type       Integer
         *  @default    0
         */
        adNum: 0,

        /**
         *  GoogleAds auf der Homepage (in global namespace as `google_home`)
         *  @property   homepage
         *  @type       String
         *  @default    '0'
         */
        homepage: '0',

        /**
         *  Callback method, executed by Google's AdSense code after successfully
         *  grabbing ad content from Google's servers.
         *
         *  @method renderAds
         *  @param  google_ads  {Object}    Configuration object containing the
         *                                  ads to render for the current
         *                                  position.
         */

        renderAds: function google_ad_request_done(google_ads) {
            var s = '',
                suffix = '',
                i = 0,
                anzahlAds = google_ads.length;

            if (anzahlAds > 0) {

                if (anzahlAds === 1 && google_home === 1) {
                    suffix = " onlyone";
                }
                else {
                    suffix = "";
                }

                if (google_home === 1) {
                    s += '<div>';
                    s += '<div class="header"><a href="' + google_info.feedback_url + '">Google-Anzeigen</a></div>';
                    s += '<div class="body"><ul>';

                    for (i = 0; i < anzahlAds; i++) {
                        if (i === 0) {
                            s += '<li class="first">';
                        }
                        else if (i === (anzahlAds - 1)) {
                            s += '<li class="last">';
                        }
                        else {
                            s += '<li>';
                        }
                        s +=
                            '<p class="line1' + suffix + '"><a href="' + google_ads[i].url + '">' + google_ads[i].line1 + '</a></p>';
                        s +=
                            '<p class="line2' + suffix + '">' + google_ads[i].line2 + '&nbsp;' + google_ads[i].line3 + '</p>';
                        s +=
                            '<p class="line3' + suffix + '"><a href="' + google_ads[i].url + '">' + google_ads[i].visible_url + '</a></p>';
                        s += '</li>';
                    }

                    s += '</ul></div>';
                    s += '</div>';
                }
                else {
                    s += '<div class="googlead">';
                    s += '<p class="header"><a href="' + google_info.feedback_url + '">Google-Anzeigen &raquo;</a></p>';
                    s += '<ul class="body">';

                    for (i = 0; i < anzahlAds; i++) {
                        s +=
                            (i === (anzahlAds - 1)) ? '<li class="adbox' + suffix + ' last">' : '<li class="adbox' + suffix + '">';
                        s +=
                            '<p><a href="' + google_ads[i].url + '" class="line1' + suffix + '">' + google_ads[i].line1 + '</a></p>';
                        s +=
                            '<p><span class="line2' + suffix + '">' + google_ads[i].line2 + '&nbsp;' + google_ads[i].line3 + '</span></p>';
                        s +=
                            '<p><a href="' + google_ads[i].url + '" class="line3' + suffix + '">' + google_ads[i].visible_url + '</a></p>';
                        s += '</li>';
                    }
                    s += '</ul>';
                    s += '</div>';
                }

                document.write(s);

                // Note that google_adnum is only incremented for CPC text ads
                if (google_ads[0].bidtype === "CPC") {
                    google_ad_num = google_ad_num + google_ads.length;
                }
            }
        }
    };
    window.google_ad_num = SDE.advertisement.Google.adNum;
    window.google_home = SDE.advertisement.Google.homepage;
    window.google_ad_request_done = SDE.advertisement.Google.renderAds;
}() );
/*jslint evil: true, onevar: false, white: false, browser: true, laxbreak: true, undef: true, nomen: false, eqeqeq: true, plusplus: false, bitwise: true, regexp: true, newcap: true, immed: true, sub: true */
/*global SDE, window: true */

var ADAM = {
_protocoll:"http",
_collector:"://s95.research.de.com",
_fetchInst1:"/bb-iqm/get?c=",
_fetchInst2:"/bb-iqm/get",
_tsparam1:"&ts=",
_tsparam2:"?ts=",
_send:"/bb-iqm/revoke?c=",
_idTag:"adam208571",
_cookiename:"adam",
_delay:200,
_listHash: new Array(),
_loopTime:3000,
_duration:0,
_flagID:false,
_date: new Date(),
_ts:0 ,
_init1: function(){
ADAM._ts=ADAM._date.getTime();
if (typeof window.addEventListener != 'undefined')
window.addEventListener("unload", function(evt) {ADAM._unload()}, false);
else if (typeof window.attachEvent != 'undefined') {
window.attachEvent("onunload", ADAM._unload);
}
if(window.location.href.indexOf("https") != -1)
ADAM._protocoll="https";
ADAM._init2();
},
_unload: function(){
if(ADAM._flagID==false){
var hash=0;
var id_mwa=document.getElementById(ADAM._idTag);
if(id_mwa != null){
hash=id_mwa.className;
var Img = new Image();
Img.src = ADAM._protocoll+ADAM._collector+ADAM._send+hash+ADAM._tsparam1+_ts;
}
}
},
_init2: function() {
if(ADAM._duration>=ADAM._loopTime){
if(ADAM._flagID==false)
ADAM._checkCookie();
return;
}
var id_mwa=document.getElementById(ADAM._idTag);
if(id_mwa != null){
var divs=document.getElementsByTagName("DIV");
for( var i=0; i<divs.length; i++)
if(divs[i].id==ADAM._idTag){
ADAM._storeNewIdTag(divs[i].className);
}
}
window.setTimeout('ADAM._init2()', ADAM._delay);
ADAM._duration+=ADAM._delay;
},
_checkCookie: function(){
var res = ADAM._readC(ADAM._cookiename);
if(res=='true'){
ADAM._fetchInstructions(ADAM._protocoll+ADAM._collector+ADAM._fetchInst2+ADAM._tsparam2+ADAM._ts);
}
},
_storeNewIdTag: function(classname){
var flag=true;
var k=0;
while(flag==true && k<ADAM._listHash.length)
if(classname == ADAM._listHash[k++])
flag=false;
if(flag){
ADAM._fetchInstructions(ADAM._protocoll+ADAM._collector+ADAM._fetchInst1+classname+ADAM._tsparam1+ADAM._ts);
ADAM._listHash.push(classname);
ADAM._flagID=true;
}
},
_fetchInstructions: function(src){
var mada2 = document.createElement('script');
mada2.type = 'text/javascript'; mada2.async = true;
mada2.src = src;
var n = document.getElementsByTagName('script')[0];
n.parentNode.insertBefore(mada2, n);
},
_readC: function(n){
a = document.cookie;
res = '';
while(a != '')
{
while(a.substr(0,1) == ' '){a = a.substr(1,a.length);}
cookiename = a.substring(0,a.indexOf('='));
if(a.indexOf(';') != -1)
{cookiewert = a.substring(a.indexOf('=')+1,a.indexOf(';'));}
else{cookiewert = a.substr(a.indexOf('=')+1,a.length);}
if(n == cookiename){res = cookiewert;}
i = a.indexOf(';')+1;
if(i == 0){i = a.length}
a = a.substring(i,a.length);
}
return(res);
}
}
ADAM._init1();
/*global SDE, window, document, navigator, google, clearInterval, setInterval */
(function () {
    /**
     *  Makes calls to the Google Interactive Media Ads JavaScript SDK V3 to display video ads in the HTML 5 video player.
     *  The ads provider is IQ.
     *  This uses the sample code from the Google Documentation at:
     *  https://developers.google.com/interactive-media-ads/docs/sdks/html5/v3/
     *
     *  The code contains logic for detecting and handling linear ads, but doesn't implement anything, since
     *  IQ doesn't provide linear ads.
     *
     *  @author     Irina Anastasiu <irina.anastasiu@netlight.com>
     *  @version    $Id$
     *
     *  @namespace      advertisement.util
     *  @class          HTML5VideoAds
     *  @constructor
     *
     */
    SDE.namespace('advertisement.util.HTML5VideoAds');

    var adsManager,
        adsLoader,
        adDisplayContainer,
        referrerUrl = window.location.href,
        timestamp = new Date().getTime(),
        adTagUrl =
            'http://pubads.g.doubleclick.net/gampad/ads?sz=16x9&iu=/183/iqdsde/video/html5&ciu_szs&impl=s' +
                '&gdfp_req=1&env=vp&output=xml_vast2&unviewed_position_start=1&url=' +
                referrerUrl + '&cust_params=pos%3Dpre%26kw%3Dhtml5preroll&correlator=' + timestamp,
        videoContent,
        adWidth = 640,
        adHeight = 360;

    function onAdEvent(adEvent) {
        // Retrieve the ad from the event. Some events (e.g. ALL_ADS_COMPLETED)
        // don't have ad object associated.
        SDE.log('Fired ad event: ' + adEvent.type);
        if (adEvent.type === google.ima.AdEvent.Type.CLICK) {
            // Show play-button
            SDE.$('#videoAdContainer button').toggle();
        }
    }

    function onAdError(adErrorEvent) {
        // Handle the error logging.
        SDE.log(adErrorEvent.getError());
    }

    function onAdErrorCode(adErrorEvent) {
        // Handle the error logging.
        SDE.log(adErrorEvent.getErrorCode())
    }

    function onContentPauseRequested() {
        videoContent.pause();
        document.getElementById('videoAdContainer').style.visibility = "visible";
    }

    function onContentResumeRequested() {
        videoContent.play();
        document.getElementById('videoAdContainer').style.visibility = "hidden";
    }

    function onAdsManagerLoaded(adsManagerLoadedEvent) {
        // Get the ads manager.
        adsManager = adsManagerLoadedEvent.getAdsManager(videoContent);  // should be set to the content video element

        // Add listeners to error events.
        adsManager.addEventListener(
            google.ima.AdErrorEvent.Type.AD_ERROR,
            onAdError
        );

        adsManager.addEventListener(
            google.ima.AdError.Type.AD_LOAD,
            onAdErrorCode
        );
        adsManager.addEventListener(
            google.ima.AdError.Type.AD_PLAY,
            onAdErrorCode
        );

        // Add listeners to the required events.
        adsManager.addEventListener(
            google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED,
            onContentPauseRequested
        );
        adsManager.addEventListener(
            google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED,
            onContentResumeRequested
        );
        adsManager.addEventListener(
            google.ima.AdEvent.Type.ALL_ADS_COMPLETED,
            onAdEvent
        );

        // Add listeners to additional events, if necessary.
        adsManager.addEventListener(
            google.ima.AdEvent.Type.LOADED,
            onAdEvent
        );
        adsManager.addEventListener(
            google.ima.AdEvent.Type.STARTED,
            onAdEvent
        );
        adsManager.addEventListener(
            google.ima.AdEvent.Type.COMPLETE,
            onAdEvent
        );
        adsManager.addEventListener(
            google.ima.AdEvent.Type.CLICK,
            onAdEvent
        );

        try {
            // Initialize the ads manager. Ad rules playlist will start at this time.
            adsManager.init(adWidth, adHeight, google.ima.ViewMode.NORMAL);
            // Call play to start showing the ad. Single video and overlay ads will
            // start at this time; the call will be ignored for ad rules.
            adsManager.start();
        } catch (adError) {
            // An error may be thrown if there was a problem with the VAST response.
        }
    }

    function createAdDisplayContainer() {
        // We assume the adContainer is the DOM id of the element that will house the ads.
        adDisplayContainer = new google.ima.AdDisplayContainer(document.getElementById('videoAdContainer'));
    }

    function createAdsLoader() {
        adsLoader = new google.ima.AdsLoader(adDisplayContainer);
    }

    function requestAds() {
        // Create the ad display container.
        createAdDisplayContainer();
        // Initialize the container, if requestAds is invoked in a user action.
        // This is only needed on iOS/Android devices.
        adDisplayContainer.initialize();
        // Create ads loader.
        createAdsLoader();
        // Listen and respond to ads loaded and error events.
        adsLoader.addEventListener(
            google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED,
            onAdsManagerLoaded,
            false
        );
        adsLoader.addEventListener(
            google.ima.AdErrorEvent.Type.AD_ERROR,
            onAdError,
            false
        );

        // Request video ads.
        var adsRequest = new google.ima.AdsRequest();
        adsRequest.adTagUrl = adTagUrl;

        // Specify the linear and nonlinear slot sizes. This helps the SDK to
        // select the correct creative if multiple are returned.
        adsRequest.linearAdSlotWidth = adWidth;
        adsRequest.linearAdSlotHeight = adHeight;

        // IQ doesnt deliver any non linear ads, but we're setting this, just in case.
        adsRequest.nonLinearAdSlotWidth = 450;
        adsRequest.nonLinearAdSlotHeight = 50;

        adsLoader.requestAds(adsRequest);

        //Tell the AdsLoader when the video is done playing
        SDE.$(videoContent).on('ended', function () {
            adsLoader.contentComplete();
        });
    }

    SDE.advertisement.util.HTML5VideoAds = function (video) {
        videoContent = video;
        SDE.$('#videoAdContainer').css('visibility', 'visible');
        requestAds();

        SDE.$('#videoAdContainer button').on('click', function () {
            if (SDE.$(this).is(':visible')) {
                adsManager.resume();
                SDE.$(this).hide();
            }
        });
    };

}());
/*global SDE */
(function () {

    /**
     *  NewLightboxControl can be used to display a given DOM-object
     *  in a pre-styled overlay-box.
     *
     *  @author     Tom Andersson <Thomas.Andersson@netlight.de>
     *  @version    $Id$
     *
     *  @namespace  SDE.widget
     *  @class      ContainerboxControl
     *  @constructor
     *
     *  @requires   SDE
     */

    SDE.namespace('widget.Banderole');

    SDE.widget.Banderole = function (data) {
        var tabControlId = data.tabControlId,
            banderole = SDE.$('#' + tabControlId),
            loader = new SDE.utils.ImageLoader({'sourceAttribute': 'data-src'});

        banderole.bind(SDE.events.TabControl.onchange, function (e, data) {
            var items = data.items,
                current = data.current;

            SDE.$(items[current]).find('img').each(function () {
                var imgObj = SDE.$(this);

                if (imgObj.attr('data-src')) {
                    loader.loadImage(imgObj.attr('data-src'));
                }
            });
        });
    };
}());
/*global SDE, setTimeout */
(function () {

    /**
     *  Cinema search widget. Extends existing cinema search form markup and adds
     *  features to request data for selected cities, cinemas and movies.
     *
     *  <pre><code>
     *      SDE.widget.CinemaSearch.init( {
     *          'container':  "[SELECTOR GOES HERE]",
     *          'url':        "[AJAX REQUEST URL]"
     *      } );
     *  </code></pre>
     *
     *  @author     Murat Purc <Murat Purc @ Sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace  SDE.widget
     *  @class      CinemaSearch
     *  @constructor
     *
     *  @param  {Object}    userConfig  The cinema search configuration
     *
     *  @requires   SDE, SDE.utils.Config
     */

    SDE.namespace('widget.CinemaSearch');
    SDE.namespace('events.CinemaSearch');

    SDE.events.CinemaSearch = {
        /**
         *  Triggered on city selected event
         *  @event  SDE.events.CinemaSearch.oncityselected
         */
        'oncityselected': 'SDE_events_CinemaSearch_oncityselected',

        /**
         *  Triggered on cinema selected event
         *  @event  SDE.events.CinemaSearch.oncinemaselected
         */
        'oncinemaselected': 'SDE_events_CinemaSearch_oncinemaselected',

        /**
         *  Triggered on movie selected event
         *  @event  SDE.events.CinemaSearch.onmovieselected
         */
        'onmovieselected': 'SDE_events_CinemaSearch_onmovieselected',

        /**
         *  Triggered on cinema search submission (successful or not)
         *  @event  SDE.events.CinemaSearch.onsubmit
         */
        'onsubmit': 'SDE_events_CinemaSearch_onsubmit',

        /**
         *  Triggered on successful cinema search submission
         *
         *  @event  SDE.events.CinemaSearch.onsuccess
         *  @param  {jQuery}    form        jQuery collection containing the widget's form element.
         *  @param  {Object}    response    Response data, parsed out of the backend's JSON response.
         */
        'onsuccess': 'SDE_events_CinemaSearch_onsuccess',

        /**
         *  Triggered on cinema search submission failure
         *
         *  @event  SDE.events.CinemaSearch.onerror
         *  @param  {jQuery}    form        jQuery collection containing the widget's form element.
         *  @param  {Number}       status      The HTTP status from the backend API.
         *  @param  {String}    error       The error message given from the backend API.
         */
        'onerror': 'SDE_events_CinemaSearch_onerror'
    };

    /**
     *  The cinema search base config
     *  @property   _baseConfig
     *  @protected
     *  @static
     *  @final
     */
    var _baseConfig = {
        /**
         *  The selector that matches the cinema search module on the page
         *
         *  @config     container
         *  @type       {String}
         *  @default    '.cinemasearch'
         */
        'container': '.cinemasearch',
        /**
         *  The URL for AJAX requests.
         *
         *  @config     url
         *  @type       {String}
         *  @default    '/app/service/kino/act/act_getSubcategory.php'
         */
        'url':       '/app/service/kino/act/act_getSubcategory.php'
    };

    /**
     *  Processed job on selected city.
     *
     *  @method  citySelected
     *  @protected
     *
     *  @see SDE.events.CinemaSearch.oncityselected
     */
    function _citySelected() {
        var options = {
            mode: 'kinofilm',
            data: {cat: 'kinofilm', ort: this.cities.val()}
        };
        this.processRequest(options);
    }

    /**
     *  Processed job on selected cinema.
     *
     *  @method  cinemaSelected
     *  @protected
     *
     *  @see SDE.events.CinemaSearch.oncinemaselected
     */
    function _cinemaSelected() {
        if (this.cinemas.val() === '#') {
            var options = {
                mode: 'film',
                data: {cat: 'film', ort: this.cities.val(), kino: this.cinemas.val()}
            };
            this.processRequest(options);
        }
    }

    /**
     *  Processed job on selected movie.
     *
     *  @method  movieSelected
     *  @protected
     *
     *  @see SDE.events.CinemaSearch.onmovieselected
     */
    function _movieSelected() {
        if (this.movies.val() === '#') {
            var options = {
                mode: 'kino',
                data: {cat: 'kino', ort: this.cities.val(), film: this.movies.val()}
            };
            this.processRequest(options);
        }
    }

    /**
     *  Performs the request by usng passed data
     *
     *  @method  processRequest
     *  @protected
     *
     *  @param  {Object}   options   JSON data as follows:
     *                               - options.mode = mode, feasible values are 'kinofilm', 'film', 'kino'
     *                               - options.data = data to send to the server
     */
    function _processRequest(options) {
        SDE.log.info('Processing request with options', options);

        SDE.$.ajax({
            'type':     'get',
            'url':      this.config.get('url'),
            'data':     options.data,
            'dataType': 'text',
            'success':  SDE.$.proxy(function (data) {
                SDE.log('Success: %o', data);
                this.container
                    .trigger(SDE.events.CinemaSearch.onsuccess, {
                        'mode':     options.mode,
                        'response': data
                    })
                    .trigger(SDE.events.CinemaSearch.onsubmit);
            }, this),
            'error':    SDE.$.proxy(function (xhr, stat, error) {
                SDE.log.error('Failure: xhr:%o, stat:%o, error:%o', xhr, stat, error);
                this.container
                    .trigger(SDE.events.CinemaSearch.onerror, {
                        'mode':   options.mode,
                        'status': stat,
                        'error':  error
                    })
                    .trigger(SDE.events.CinemaSearch.onsubmit);
            }, this)
        });

    }

    /**
     *  Creates and returns the additional form elements
     *
     *  @method  generateFormElements
     *  @protected
     *
     *  @return {Element}    The generated elements, 2 list items containing
     *                            label and select
     */
    function _generateFormElements() {
        var li = SDE.$('<li></li>'),
            lblCinema = SDE.$('<label for="event_movie_cinema">Kino</label>'),
            selCinema = SDE.$('<select id="event_movie_cinema" name="kino"></select>'),
            lblMovie = SDE.$('<label for="event_movie_movie">Film</label>'),
            selMovie = SDE.$('<select id="event_movie_movie" name="film"></select>');

        return li.clone().append(lblCinema).append(selCinema)
            .add(li.clone().append(lblMovie).append(selMovie));
    }

    /**
     *  Processes the response result (either a occured arror or data on success).
     *  Note: Displays only a general error message on occured error
     *
     *  @method processResults
     *  @protected
     *
     *  @param  {Event}     e       The SDE.events.CinemaSearch.onsuccess event.
     *  @param  {Object}    data    JSON data as follows:
     *                              - data.mode = mode, feasible values are 'kinofilm', 'film', 'kino'
     */
    function _processResults(e, data) {
        SDE.log.info('CinemaSearch: response data: %o', data);

        var cinemaData = null,
            movieData = null,
            options = '',
            that,
            text,
            elem;

        // error handling, display a general error message
        if (data.error || data.status === 'error' || !data.response) {
            that = this;
            text = this.form.find('legend').html();

            this.form.find('legend').html('<span class"error">Es ist leider ein Fehler aufgetreten!</span>');
            setTimeout(function () {
                that.form.find('legend').html(text);
            }, 2000);
            return;
        }

        // prepare data depending on mode
        if (data.mode === 'kinofilm') {
            elem = data.response.split(';;');
            cinemaData = elem[0].split(';');
            movieData = elem[1].split(';');
        } else if (data.mode === 'kino') {
            cinemaData = data.response.split(';');
        } else if (data.mode === 'film') {
            movieData = data.response.split(';');
        }

        // fill select boxes...

        if (cinemaData) {
            // cinemas: remove all options and fill list with new data
            this.cinemas.html('');
            options = '';
            SDE.$.each(cinemaData, function (i, v) {
                var item = v.split('--');
                options += '<option value="' + item[1] + '">' + item[0] + '</option>';
            });
            this.cinemas.html(options);
        }

        if (movieData) {
            // movies: remove all options and fill list with new data
            this.movies.html('');
            options = '';
            SDE.$.each(movieData, function (i, v) {
                var item = v.split('--');
                options += '<option value="' + item[1] + '">' + item[0] + '</option>';
            });
            this.movies.html(options);
        }
    }

    SDE.widget.CinemaSearch = function CinemaSearch(userConfig) {
        SDE.log.group('CinemaSearch');
        SDE.log('Constructor, userConfig:%o', userConfig);

        /**
         *  The cinema search configuration
         *  @property   config
         *  @type       {Object}
         *  @protected
         */
        this.config = new SDE.utils.Config(this._baseConfig, userConfig);
        /**
         *  The cinema search container element
         *  @property   container
         *  @type       {jQuery}
         *  @protected
         */
        this.container = SDE.$(this.config.get('container'));
        /**
         *  The cinema search form element
         *  @property   form
         *  @type       {jQuery}
         *  @protected
         */
        this.form = this.container.find('form');

        if (this.container.length === 0) {
            SDE.log.warn('CinemaSearch: Constructor, `container` (%s) doesn\'t match any elements, exiting early.',
                this.config.get('container'));
            SDE.log.groupEnd();
            return;
        }

        // add additional fields to the form
        this.container.find('li.first').after(this.generateFormElements());

        /**
         *  The cities select element
         *  @property   select#event_movie_city
         *  @type       {jQuery}
         *  @protected
         */
        this.cities = this.container.find('select#event_movie_city');

        /**
         *  The cinemas select element
         *  @property   select#event_movie_cinema
         *  @type       {jQuery}
         *  @protected
         */
        this.cinemas = this.container.find('select#event_movie_cinema');

        /**
         *  The movies select element
         *  @property   select#event_movie_movie
         *  @type       {jQuery}
         *  @protected
         */
        this.movies = this.container.find('select#event_movie_movie');

        // bind on change event to city select
        this.cities
            .bind(SDE.events.CinemaSearch.oncityselected, SDE.$.proxy(this, 'citySelected'))
            .bind('change', SDE.$.proxy(this, 'citySelected'));

        // bind on change event to cinemas select
        this.cinemas
            .bind(SDE.events.CinemaSearch.oncinemaselected, SDE.$.proxy(this, 'cinemaSelected'))
            .bind('change', SDE.$.proxy(this, 'cinemaSelected'));

        // bind on change event to movie select
        this.movies
            .bind(SDE.events.CinemaSearch.onmovieselected, SDE.$.proxy(this, 'movieSelected'))
            .bind('change', SDE.$.proxy(this, 'movieSelected'));

        this.container
            .bind(SDE.events.CinemaSearch.onsuccess, SDE.$.proxy(this, 'processResults'))
            .bind(SDE.events.CinemaSearch.onerror, SDE.$.proxy(this, 'processResults'));

        if (this.cities.val() !== '') {
            this.citySelected();
        }

        SDE.log.groupEnd();
    };

    SDE.widget.CinemaSearch.prototype._baseConfig = _baseConfig;

    SDE.widget.CinemaSearch.prototype.generateFormElements = _generateFormElements;

    SDE.widget.CinemaSearch.prototype.citySelected = _citySelected;
    SDE.widget.CinemaSearch.prototype.cinemaSelected = _cinemaSelected;
    SDE.widget.CinemaSearch.prototype.movieSelected = _movieSelected;

    SDE.widget.CinemaSearch.prototype.processRequest = _processRequest;
    SDE.widget.CinemaSearch.prototype.processResults = _processResults;

}());
/*global SDE*/
(function () {

    /**
     *  Comments widget for all articles.
     *
     *  <pre><code>
     *      SDE.widget.Comments( {
     *          path : '[ID]'
     *          mode : '[MODE OF MODERATION]'
     *      } );
     *  </code></pre>
     *
     *  @author     Jochen Duerr <jochen.duerr@sueddeutsche.de>
     *  @version    $Id$
     *  @namespace  SDE.widget
     *  @class      Comments
     *  @constructor
     *
     *  @param  {Object}    userConfig  The comments configuration
     */

    SDE.namespace('widget.Comments');

    SDE.widget.Comments = {

        /**
         * Init for all comment functions
         *
         * @method init
         */

        init: function () {
            SDE.log.group('Comments');

            // init goes here

            SDE.log.groupEnd();
        },

        /**
         * Method calls Loginbox and shows them directly in the site
         *
         * @method login
         *
         * Use SDE.widget.Comments.login()
         */

        login: function () {
            SDE.log.group('Comments login');

            SDE.widget.Login.init({
                'type': 'comments'
            });

            SDE.log.groupEnd();
        }

    };

}());
/*global SDE */
(function () {

    /**
     *  NewLightboxControl can be used to display a given DOM-object
     *  in a pre-styled overlay-box.
     *
     *  @author     Tom Andersson <Thomas.Andersson@netlight.de>
     *  @version    $Id$
     *
     *  @namespace  SDE.widget
     *  @class      ContainerboxControl
     *  @constructor
     *
     *  @requires   SDE
     */

    SDE.namespace('widget.NewLightboxControl');

    SDE.namespace('events.NewLightboxControl');

    /**
     *  ContainerboxControl's base config
     *
     *  @property _baseConfig
     *  @private
     *  @final
     *  @static
     */

    var _baseConfig = {
        /**
         * The element we're 'boxing' in
         *
         * @config      displayElement
         * @type        {String|Element|jQuery}
         * @default     null
         */
        'displayElement': null,

        /**
         * The name to give to the container.
         *
         * @config      containerName
         * @type        {String}
         * @default     null
         */
        'containerName': null
    };

    function _toggle() {
        var clickFunction,
            body,
            container = this.container,
            eventName = 'click.' + this.containerName;

        SDE.widget.Overlay.center(container);

        if (container.is(':visible')) {
            SDE.widget.Overlay.brighten();
        } else {
            SDE.widget.Overlay.dim();
        }

        this.container.toggle();

        body = SDE.$('body');

        clickFunction = function (e) {
            var target = SDE.$(e.target);
            if (!target.closest(container).length) {
                container.hide();
                SDE.widget.Overlay.brighten();
                body.off(eventName);
            }
        };

        if (this.container.is(':visible')) {
            /*global setTimeout */
            setTimeout(function () {
                body.on(eventName, clickFunction);
            }, 100);
        } else {
            body.off(eventName);
        }

    }

    SDE.widget.NewLightboxControl = function (userConfig) {
        SDE.log.group('NewLightboxControl');
        SDE.log('Constructor, userConfig:%o', userConfig);

        this.config = new SDE.utils.Config(this._baseConfig, userConfig);

        var displayElement = SDE.$(this.config.get('displayElement')),
            button,
            container,
            that = this;

        if (displayElement.length === 0) {
            SDE.log.warn('Config param `displayElement` (userConfig:%o) matches no elements.  Exiting early.', userConfig);
            SDE.log.groupEnd();
            return;
        }

        container = SDE.$('<div class="lightbox"></div>');

        this.containerName = this.config.get('containerName') || 'containerBox-' + new Date().getTime();
        container.attr('id', this.containerName);

        displayElement.show();
        container.hide();

        // The close button and the  handler for the closebutton
        container.append('<button class="close">Schlie&szlig;en</button>');

        button = container.find('button.close');

        button.click(function () {
            that.toggle();
            return false;
        });

        // wire the close button, the container and the display element all together
        container.addClass('closeable').append(button);
        container.appendTo(SDE.$('body'));
        displayElement.appendTo(container);

        this.container = container;

        SDE.log.groupEnd();
    };

    SDE.widget.NewLightboxControl.prototype._baseConfig = _baseConfig;
    SDE.widget.NewLightboxControl.prototype.toggle = _toggle;
    SDE.widget.NewLightboxControl.prototype.getContainer = function () {
        return this.container;
    };

}());
/*global SDE */
(function () {
    /**
     *  FlashElement uses `Overlay` to darken the page, and renders a flash
     *  object in the middle of the page.
     *
     *  <pre><code>
     *      new SDE.widget.FlashElement( {
     *          'toggle':   [SELECTOR GOES HERE],
     *          'params':   { [PARAMS GO HERE] }
     *      } );
     *  </code></pre>
     *
     *  @author     Mike West <Mike.West@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace  SDE.widget
     *  @class      FlashElement
     *  @extends    SDE.widget.LightboxControl
     *  @constructor
     *
     *  @param  {Object}        config
     *
     *  @requires   SDE, SDE.widget.Overlay, SDE.widget.LightboxControl
     */

    SDE.namespace('widget.FlashElement');

    /**
     *  The base configuration values for FlashElement.
     *
     *  @property   _baseConfig
     *  @protected
     *  @static
     */
    var _baseConfig = SDE.mergeObjects(
        {
            'clickToClose': false,
            /**
             *  Parameters that ought be passed in to the Flash
             *  object as it's rendered.
             *
             *  @config     params
             *  @type       {Object}
             *  @default    {}
             */
            'params':       {},
            /**
             *  Variables that ought be passed in to the Flash
             *  object as it's rendered.
             *
             *  @config     vars
             *  @type       {Object}
             *  @default    {}
             */
            'vars':         {}
        },
        SDE.widget.LightboxControl.prototype._baseConfig,
        false
    );

    /**
     *
     * @param userConfig
     * @constructor
     *
     * @public
     */
    SDE.widget.FlashElement = function FlashElement(userConfig) {
        SDE.log.group('FlashElement');
        SDE.log('Constructor, userConfig:%o', userConfig);

        //  0.  Generate config
        var config = new SDE.utils.Config(this._baseConfig, userConfig),
            obj = SDE.$(config.get('toggle')),
            flashEl = obj.parent(),
            width = obj.attr('data-width'),
            height = obj.attr('data-height'),
            html =
                '<div id="%ID%">' +
                    '  <div class="header"></div>' +
                    '  <div id="%ID%_placeholder" class="body" style="height:%HEIGHT%px;width:%WIDTH%px;"></div>' +
                    '  <div class="footer">%CAPTION%</div>' +
                    '</div>',
            id = SDE.uid();

        if (flashEl.hasClass('inline')) {
            SDE.log('Rendered inline: embedding.');
            //  1a. Embed the exciting flash content inline, without user intervention
            //
            //      In this case, there's no lightbox.  There is only Zuul.
            obj.parent().attr('id', id);
            SDE.utils.SWF.embed({
                'swf':        obj.attr('href'),
                'height':     height,
                'width':      width,
                'toReplace':  id,
                'vars':       config.get('vars'),
                'params':     config.get('params'),
                'attributes': {}
            });
        } else {
            SDE.log('Rendered as a lightbox.');
            //  1b. Generate the "panel" we'll use to display the exciting
            //      newly embiggened image.
            html = html.replace(/%ID%/g, id)
                .replace(/%HEIGHT%/g, height)
                .replace(/%WIDTH%/g, width)
                .replace(/%CAPTION%/g, obj.parent().parent().find('figcaption').html());

            config.set(
                'panel',
                SDE.$(html).css({
                    'width': parseInt(width, 10) + 'px'
                })
            );

            //  2b.  Call the LightboxControl constructor.
            SDE.widget.LightboxControl.prototype.constructor.call(this, config);

            //  3b. Render the Flash object `onvisible` if it's not
            //      already present.
            this.panel.bind(
                SDE.events.LightboxControl.onvisible,
                function () {
                    if (this.populated) {
                        return;
                    }
                    this.populated = true;

                    SDE.utils.SWF.embed({
                        'swf':        obj.attr('href'),
                        'height':     height,
                        'width':      width,
                        'toReplace':  id + '_placeholder',
                        'vars':       config.get('vars'),
                        'params':     config.get('params'),
                        'attributes': {}
                    });

                }
            );
        }
        SDE.log.groupEnd();
    };

    /**
     *  Initialization for the FlashElement object.
     *
     *  @static
     *  @method initAll
     *  @public
     *  @param  {Object}    userConfig  The configuration object containing the
     *                              various settings necessary for displaying
     *                              a FlashElement widget.
     *  @return {Array<FlashElement>}
     */
    function initAll(userConfig) {
        return [
            new SDE.widget.FlashElement(userConfig)
        ];
    }

    SDE.extend(SDE.widget.LightboxControl, SDE.widget.FlashElement);
    SDE.widget.FlashElement.prototype._baseConfig = _baseConfig;
    SDE.widget.FlashElement.prototype.initAll = initAll;
}());
/*global SDE */
(function () {

    /**
     *  The Liquid Ads widget handles layout near contentads. When ad will be displayed,
     *  the content floats around them; if not displayed the content will float of
     *  complete content width.
     *
     *  <pre><code>
     *      ( {
     *          'mode' : "[MODE OF SITETYPE]",
     *          'ads'  : "[ARRAY WITH RELEVANT AD POSITIONS]"
     *      } );
     *  </code></pre>
     *
     *  @author     Jochen Duerr <jochen.duerr@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace  SDE
     *  @class      widget.LiquidAds
     *
     *  @constructor
     *  @param  {Config}        conf
     *
     *  @requires SDE
     */

    SDE.namespace('widget.LiquidAds');

    var getWidthOfContent,
        getRatioWidth,
        baseConfig;

    /**
     * Config which describes all values which we initial need.
     *
     * @property baseConfig
     * @private
     * @final
     * @static
     */
    baseConfig = {
        /**
         * Pagetype, actual we have [article|videooverview]
         *
         * @config pagetype
         * @type {String}
         * @default null
         */
        'pagetype': null,

        /**
         * Array with all relevant ads which we must consider.
         *
         * @config ads
         * @type {Array}
         * @default null
         */
        'ads': [],

        /**
         * List of HTML elements which can be placed in an articles body and
         * which are relevant for floating around contentads
         * - elem   : name of the htlm tag which must set an width (all others like <p> or <h3> didn't need it)
         *
         * @config iterateElem
         * @type {Array}
         * @default []
         */

        'iterateElem': [ 'figure', 'div', 'iframe', 'section' ]
    };

    /**
     * Get width of content
     *
     * @method getWidthOfContent
     * @return {Integer}
     */

    getWidthOfContent = function () {
        return SDE.$('#sitecontent').width();
    };

    /**
     * Get ratio (in %) of content's width less width of contentad
     *
     * @method getRatioWidth
     * @param  {Integer}   adsWidth
     * @param  {Integer}   maxWidth
     * @return {Integer}
     */

    getRatioWidth = function (maxWidth, adsWidth) {
        return Number((maxWidth - ((adsWidth * 100) / getWidthOfContent())).toFixed(0));
    };

    SDE.widget.LiquidAds = {

        /**
         *
         * @param {Object} userConfig
         */

        init: function (userConfig) {

            SDE.log.group('Liquid Ads');
            SDE.log('Constructor called with userConfig:%o', userConfig);

            var config = SDE.mergeObjects(baseConfig, userConfig, true);
            SDE.log('Liquid Ads with config:%o', config);

            if (config.pagetype === 'videooverview') {
                SDE.widget.LiquidAds.video(config);
            } else {
                SDE.widget.LiquidAds.article(config);
            }

            SDE.log.groupEnd();
        },

        /**
         * Handle liquid ads on article.
         *
         * First we get all elements in article's body to iterate over them an look where
         * an ad will placed and what we must do with the following elements.
         *
         * @param {Object} config
         */

        article: function (config) {

            // We get all elements in articles body
            var bodyElem = SDE.$('section.body').children(),
                adHeight = 0,
                adWidth = 0,
                liquid = false,
                liquidHeight = 0,
                prevAd;

            // We iterate through elements of article's body
            bodyElem.each(function (i, elem) {

                // If we get an <section> element with class 'ad' ...
                if (SDE.$(elem).hasClass('ad') && (SDE.$(elem).is(':visible') || SDE.$(elem).css('display') !== 'none')) {
                    adHeight = SDE.$(elem).outerHeight(true);
                    adWidth = SDE.$(elem).outerWidth(true);

                    // If ad is overlapping previous ad, add 'clear: both' to current ad. This
                    // This moves ad under the previous ad.
                    if (prevAd) {
                        if (prevAd.outerHeight(true) + prevAd.position().top >= SDE.$(elem).position().top) {
                            SDE.$(elem).css('clear', 'both');
                        }
                    }

                    liquid = true;
                    prevAd = SDE.$(elem);
                } else if (liquid === true) {
                    // ... else we show what we will do with the following elements
                    // If height of ad was not still reached, elements which are placed after ad must flow around them ...
                    if (liquidHeight < adHeight) {
                        liquidHeight += Number(SDE.$(elem).outerHeight(true).toFixed(0));
                        if (SDE.$.inArray(elem.tagName.toLowerCase(), config.iterateElem) > -1) {
                            if (SDE.$(elem).hasClass('liveticker')) {
                                SDE.$(elem).find('figure').css('width', getRatioWidth(99, adWidth) + '%');
                            } else {
                                SDE.$(elem).css('width', getRatioWidth(99, adWidth) + '%');
                            }
                        }
                    } else {
                        // ... else we reached height of ad and set some vars to default.
                        liquid = false;
                        liquidHeight = 0;
                    }
                }
            });
        },

        /**
         * Handle liquid ads on video overview.
         *
         * @param {Object} config
         */

        video: function (config) {

            var adObj = SDE.$('#' + config.ads[0]);

            // if ad element is visible (it will shown an ad)
            if (adObj.is(':visible') || adObj.css('display') !== 'none') {
                // get ratio (in %) of content's width less width of contentad
                SDE.$('.video .sociallinks').css('width', getRatioWidth(99, adObj.outerWidth(true)) + '%');
            }
        }
    };

}());/*global SDE, window, document */
(function () {

    /**
     *  Lightbox login form, just the way you'd expect it to work.
     *
     *  @author     Jochen Duerr <jochen.duerr@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace      SDE.widget
     *  @class          Login
     *  @constructor
     *
     *  @param  {Object} config  The configuration object containing the various settings necessary for displaying a Login widget.
     *
     *  @requires   SDE, SDE.utils.Config
     */

    SDE.namespace('widget.Login');

    var baseConfig,
        getLoggingState,
        setBoxPositioning,
        setAriaValues;

    /**
     * Config which describes all values which we initial need.
     *
     * @config      baseConfig
     * @type        {Object}
     */

    baseConfig = {

        /**
         * Describes type of calling action
         *
         * @type      {String}   [siteheader|comments]
         * @default   siteheader
         */
        'type': 'siteheader',

        /**
         * Describes element which will be toggled
         *
         * @type      {Object}
         * @default   null
         */
        'toggle': null,

        /**
         * Describes "content" which will be placed in the site
         *
         * @type      {String}
         * @default   null
         */
        'panel': null,

        /**
         * Describes the state of user's login
         *
         * @type      {Boolean}
         * @default   false
         */
        'status': false

    };

    /**
     * Method checks logging state
     *
     * @method   getLoggingState
     * @return   {Boolean}
     */
    getLoggingState = function () {
        var cookie = false;
        if (SDE.$.cookies.test()) {
            cookie = SDE.$.cookies.get('sdelogin');
        }

        return cookie;

    };
    // getLoggingState

    /**
     * Method which positions the lighbox in the middle of the screen
     * and set shimebox to fullsize of the site
     *
     * @method   setBoxPositioning
     * @param    {Object}   loginObj
     * @param    {Object}   shimeObj
     */

    setBoxPositioning = function (loginObj, shimeObj) {
        var win = SDE.$(window),
            doc = SDE.$(document),
            obj = SDE.$(loginObj),
            shime = SDE.$(shimeObj);

        obj.css({
            'left': Math.max(((win.width() - obj.width()) / 2) + win.scrollLeft()) + 'px',
            'top':  Math.max(0, ((win.height() - obj.height()) / 2) + win.scrollTop()) + 'px'
        });

        shime.css({
            'width':  Math.max(win.width()) + 'px',
            'height': Math.max(doc.height()) + 'px'
        });

    };
    // setBoxPositioning

    /**
     * Method which set some attributes in shown object new
     *
     * @method   setAriaValues
     * @param    {Object}   domObj
     * @param    {String}   visibility
     */

    setAriaValues = function (domObj, visibility) {
        SDE.$(domObj).attr({
            'aria-hidden': (visibility === 'show') ? 'true' : 'false'
        });
    };
    // setAriaValues

    /**
     * Set panel into the site
     *
     * @param {Object} userConfig
     */

    SDE.widget.Login = {

        /**
         *
         * @method   init
         * @param    {Object} userConfig
         */

        init: function (userConfig) {

            SDE.log.group('Login');
            SDE.log('Constructor called with userConfig:%o', userConfig);

            var config = SDE.mergeObjects(baseConfig, userConfig, true),
                loginBox,
                shimeBox,
                handlePanel,
                panelLogin = '#loginbox',
                panelShime = '.shimebox';
            SDE.log('Merged config looks like:%o', config);

            config = new SDE.utils.Config(config);

            // Check Loginstate
            if (getLoggingState()) {
                config.set('status', 'loggedin');
                if (config.get('type') === 'siteheader') {
                    SDE.$(config.get('toggle')).attr('data-status', config.get('status')).text('Profil');
                }
            } else {
                config.set('status', 'loggedout');
                if (config.get('type') === 'siteheader') {
                    SDE.$(config.get('toggle')).attr('data-status', config.get('status')).text('Login');
                }
            }
            SDE.log('We get login state. The user will be ' + config.get('status'));

            // If not provided, generate the 'panel' we'll use to display the login form
            if (!config.get('panel')) {

                loginBox =
                    '<div id="loginbox" class="lightbox" role="dialog" aria-labelledby="loginbox" ' +
                        'aria-hidden="false" tabindex="-1">' +
                    '  <div class="body">' +
                    '    <iframe id="loginframe" src="https://ssl.sueddeutsche.de/%URL%?returnto=%RETURNTO%" ' +
                        'width="470" height="200" frameborder="0" scrolling="no" class="frame"></iframe>' +
                    '    <button class="close">Schließen</button>' +
                    '  </div>' +
                    '</div>';

                shimeBox =
                    '<div class="shimebox"></div>';

                // We replace some placeholder in "template"
                loginBox = loginBox
                    .replace('%URL%', (config.get('status') === 'loggedout') ? 'login' : 'logout')
                    .replace('%RETURNTO%', document.location.href);

                handlePanel = function () {
                    // First we set the templates into the site
                    SDE.$('body').append(loginBox).append(shimeBox);
                    // Set position for loginbox
                    setBoxPositioning(panelLogin, panelShime);
                    // Set ARIA values for loginbox
                    setAriaValues(panelLogin, 'show');
                    // Show loginbox
                    SDE.$(panelShime).fadeIn('slow', function () {
                        SDE.$(panelLogin).fadeIn('slow');
                    });
                    // Handler to close them via user's click
                    SDE.$(panelLogin + ' .close, ' + panelShime).on('click', function () {
                        // We must reload the complete site :-(
                        window.location.reload();
                    });
                };

                // If 'type' is siteheader, first we set an clickhandler to 'toggle' ...
                if (config.get('type') === 'siteheader') {
                    SDE.$(config.get('toggle')).on('click', function () {
                        handlePanel();
                    });
                } else {
                    // ... else, loginbox will triggered by another functionality and will shown directly
                    handlePanel();
                }

            }

            SDE.log.groupEnd();

        }
        // init

    };

}());
/*global SDE */
(function () {
    /**
     *  TODO:  Type some useful description here.
     *
     *  <pre><code>
     *      SDE.widget.MailToFriend( {
     *          'panel'  : "[SELECTOR GOES HERE]",
     *          'toggle' : "[SELECTOR GOES HERE]"
     *      } );
     *  </code></pre>
     *
     *  @author     Mike West <Mike.West@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace  SDE.widget
     *  @class      MailToFriend
     *  @extends    SDE.widget.LightboxControl
     *
     *  @constructor
     *
     *  @param  {Object}    config  The configuration object containing the
     *                              various settings necessary for displaying
     *                              a MailToFriend widget.
     *
     *  @requires SDE, SDE.widget.Overlay, SDE.widget.LightboxControl, SDE.utils.Config
     */

    SDE.namespace('widget.MailToFriend');

    /**
     *  The base config for MailToFriend widgets
     *  @property   _baseConfig
     *  @private
     *  @final
     *  @static
     */

    var _baseConfig = SDE.mergeObjects(
        {
            'managedFocus': false,
            'closeButton':  true,
            'clickToClose': false
        },
        SDE.widget.LightboxControl.prototype._baseConfig,
        false
    );

    /**
     *  Notifies the user of a mail submission's success or failure.
     *
     *  @method userNotification
     *  @protected
     *
     *  @param  {Event}     e       The `onsuccess` or `onerror` event
     *  @see SDE.events.FormControl.onsuccess
     */

    function _userNotification(e) {
        if (e.type === SDE.events.FormControl.onsuccess) {
            SDE.log.group('Mail To Friend Success!');
            SDE.log('Hiding form, showing success message.');
            this.form.slideUp();
            this.success.slideDown();
            SDE.log.groupEnd();
        } else {
            SDE.log.group('Mail To Friend Failure!');
            SDE.log.error('Errr.  This shouldn\'t happen.');
            this.form.slideUp();
            this.success.slideDown();
            SDE.log.groupEnd();
        }
    }

    /**
     *  Validate the Poll submission, which basically means checking to see
     *  that the user actually chose an option before submitting it.
     *
     *  @method validateForm
     *  @protected
     *  @returns    {Boolean}   True if valid, False otherwise.
     */

    function _validateMTFForm() {
        SDE.log.group('Validating MailToFriend form');

        var to = this.form.find('input[name="recipientEmail"]'),
            from = this.form.find('input[name="senderEmail"]'),
            errors = 0;

        this.form.find('.notification').remove();

        if (!SDE.utils.isValidEmail(to.val())) {
            if (to.val() === '') {
                to.before('<p class="notification error">Bitte geben Sie die E-Mail-Adresse des Empf&auml;ngers ein.</p>');
            } else {
                to.before('<p class="notification error">Die eingegebene E-Mail-Adresse ist nicht g&uuml;ltig.</p>');
            }
            to.attr('aria-invalid', 'true');
            errors += 1;
            to.focus();
        } else {
            to.attr('aria-invalid', 'false');
        }

        if (!SDE.utils.isValidEmail(from.val())) {
            if (from.val() === '') {
                from.before('<p class="notification error">Bitte geben Sie Ihre E-Mail-Adresse ein.</p>');
            } else {
                from.before('<p class="notification error">Die eingegebene E-Mail-Adresse ist nicht g&uuml;ltig.</p>');
            }
            from.attr('aria-invalid', 'true');
            errors += 1;
            from.focus();
        } else {
            from.attr('aria-invalid', 'false');
        }

        SDE.log('errors:%d', errors);
        SDE.log.groupEnd();
        return (errors === 0);
    }

    /**
     *  Gather necessary data for a MailToFriend submission.  Returns a data
     *  object containing:
     *
     *      {
     *          'action':   [URL to which a POST should be made],
     *          'method':   [POST/GET],
     *          'data':     [serialized data in URL format (e.g. `key1=value1&key2=value2`]
     *      }
     *
     *  Assuming the structure noted above, MailToFriend assembles this data from
     *  the `action` attribute of the form, the `data-key` and `data-value`
     *  attributes of the form, and the input fields contained in the form
     *  itself.
     *
     *  @method gatherPollSubmission
     *  @protected
     *  @returns    {Object}    The gathered data object
     */

    function _gatherMTFSubmission() {
        SDE.log('Gathering submission data.');

        return {
            'action': '',
            'method': 'POST',
            'data':   this.form.serialize()
        };
    }

    SDE.widget.MailToFriend = function (userConfig) {
        SDE.log.group('MailToFriend');
        SDE.log('Constructor called with userConfig:%o', userConfig);
        var config = SDE.mergeObjects(userConfig, _baseConfig, false);
        SDE.widget.LightboxControl.prototype.constructor(config);

        /**
         *  The MailToFriend form control
         *  @property   _formcontrol
         *  @type       {FormControl}
         *  @protected
         */

        this._formcontrol = new SDE.widget.FormControl({
            'toggle':    '.submit',
            'form':      this.panel.find('form'),
            'validator': this.validateForm,
            'gatherer':  this.gatherSubmission
        });
        this.form = this.panel.find('form');

        /**
         *  "Success!" message to display to the user on successful
         *  submission of MTF widget.
         *
         *  @property   success
         *  @type       {jQuery}
         *  @protected
         */

        this.success = SDE.$(
            '<div class="body">' +
                '    <p><strong>Versand erfolgt.</strong>  Vielen Dank f&uuml;r Ihr Interesse an dieser Seite.</p>' +
                '    <a href="#contentcolumn" class="toggle cta">Zur&uuml;ck</a>' +
                '</div>'
        );
        this.form.before(this.success);
        this.success
            .hide()
            .find('.toggle')
            .bind('click', SDE.$.proxy(this, 'hide'));

        /**
         *  "FAIL!" message to display to the user on failed
         *  submission of MTF widget.  At the moment, it looks
         *  suspiciously similar to the success message, as
         *  I'm not actually sure what we should do in this
         *  situation.
         *
         *  @property   failure
         *  @type       {jQuery}
         *  @protected
         */

        this.failure = SDE.$(
            '<div class="body">' +
                '    <p><strong>Versand erfolgt.</strong>  Vielen Dank f&uuml;r Ihr Interesse an dieser Seite.</p>' +
                '    <a href="#contentcolumn" class="toggle cta">Zur&uuml;ck</a>' +
                '</div>'
        );
        this.form.before(this.failure);
        this.failure
            .hide()
            .find('.toggle')
            .bind('click', SDE.$.proxy(this, 'hide'));

        SDE.log('Binding validation and submission to the form control\'s `onsuccess` event.');
        this.form.bind(
            SDE.events.FormControl.onsuccess,
            SDE.$.proxy(this, 'userNotification')
        );

        SDE.log.groupEnd();
    };

    SDE.extend(SDE.widget.LightboxControl, SDE.widget.MailToFriend);
    SDE.widget.MailToFriend.prototype._baseConfig = _baseConfig;
    SDE.widget.MailToFriend.prototype.userNotification = _userNotification;
    SDE.widget.MailToFriend.prototype.validateForm = _validateMTFForm;
    SDE.widget.MailToFriend.prototype.gatherSubmission = _gatherMTFSubmission;

}());
/*global SDE, setTimeout */
(function () {
    /**
     *  The Video widget uses SWFObject to load a flash file in response to
     *  a user's click event on a defined object.
     *
     *  <pre><code>
     *      SDE.widget.Polls.init( {
     *          'container':    "[SELECTOR GOES HERE]",
     *          'url':          "[SELECTOR GOES HERE]",
     *          'size':         'sidebar' or 'main'
     *      } );
     *  </code></pre>
     *
     *  @author     Mike West <Mike.West@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace  SDE.widget
     *  @class      Poll
     *  @constructor
     *
     *  @param  {Object}    userConfig  The poll's configuration
     *
     *  @requires   SDE, SDE.utils.Config
     */
    SDE.namespace('widget.Poll');

    SDE.namespace('events.Poll');
    SDE.events.Poll = {
        /**
         *  Triggered on poll submission (successful or not)
         *
         *  @event  SDE.events.Poll.onsubmit
         */
        'onsubmit':  'SDE_events_Poll_onsubmit',
        /**
         *  Triggered on successful poll submission
         *
         *  @event  SDE.events.Poll.onsuccess
         *  @param  {jQuery}    form        jQuery collection containing the widget's
         *                                  form element.
         *  @param  {Object}    response    Response data, parsed out of the backend's
         *                                  JSON response.
         */
        'onsuccess': 'SDE_events_Poll_onsuccess',
        /**
         *  Triggered on poll submission failure
         *
         *  @event  SDE.events.Poll.onerror
         *  @param  {jQuery}    form        jQuery collection containing the widget's
         *                                  form element.
         *  @param  {Number}       status      The HTTP status from the backend API.
         *  @param  {String}    error       The error message given from the backend API.
         */
        'onerror':   'SDE_events_Poll_onerror'
    };

    /**
     *  The poll's base config
     *  @property   _baseConfig
     *  @protected
     *  @static
     *  @final
     */
    var _baseConfig = {
        /**
         *  The selector that matches the poll module on the page
         *
         *  @config     container
         *  @type       {String}
         *  @default    '.poll'
         */
        'container': '.poll',
        /**
         *  The selector that matches the `A` used to toggle the
         *  visibility of the result table (relative to the
         *  `container`)
         *
         *  @config     toggle
         *  @type       {String}
         *  @default    '.toggle'
         */
        'toggle':    '.toggle',
        /**
         *  The selector that matches the result bits of the widget
         *  (relative to the `container`)
         *
         *  @config     result
         *  @type       {String}
         *  @default    '.result'
         */
        'result':    '.result',
        /**
         *  The selector that matches the form bits of the widget
         *  (relative to the `container`)
         *
         *  @config     form
         *  @type       {String}
         *  @default    '.form'
         */
        'form':      '.form'
    };

    /**
     *  Gather necessary data for a Poll submission.  Returns a data
     *  object containing:
     *
     *      {
     *          'action':   [URL to which a POST should be made],
     *          'method':   [POST/GET],
     *          'data':     [serialized data in URL format (e.g. `key1=value1&key2=value2`]
     *      }
     *
     *  Assuming the structure noted above, Poll assembles this data from
     *  the `action` attribute of the form, the `data-key` and `data-value`
     *  attributes of the form, and the input fields contained in the form
     *  itself.
     *
     *  @method gatherPollSubmission
     *  @protected
     *  @returns    {Object}    The gathered data object
     */
    function _gatherPollSubmission() {
        SDE.log('Poll: Gathering form data for submission via JS.');
        var key = this.form.attr('data-key'),
            value = this.form.attr('data-value'),
            url = this.form.attr('action'),
            data = this.form.serialize();

        data = data + '&' + key + '=' + value;
        return {
            'action': url,
            'method': 'POST',
            'data':   data
        };
    }

    /**
     *  Validate the Poll submission, which basically means checking to see
     *  that the user actually chose an option before submitting it.
     *
     *  @method validatePollForm
     *  @protected
     *  @returns    {Boolean}   True if valid, False otherwise.
     */
    function _validatePollForm() {
        return this.form.find('input[name="answerId"]:checked').length === 0;
    }

    /**
     *  Handle a Poll form submission by validating the selection, and
     *  sending the POST via JavaScript in the background.
     *
     *  @method submitHandler
     *  @public
     */
    function _submitHandler() {
        SDE.log.group('Poll Submission');
        if (this.validatePollForm()) {
            SDE.log('Invalid form.  Breaking off submission.');
            this.form
                .filter('.body')
                .prepend('<p class="notification error">Bitte eine Antwort ausw&auml;hlen.</p>');
            this.form.focus();
            SDE.log.groupEnd();
        } else {
            SDE.log('Params: `%s`', this.form.serialize());

            var poll = this.gatherPollSubmission();

            SDE.$.ajax({
                'type':    poll.method,
                'url':     poll.action,
                'data':    poll.data,
                'success': SDE.$.proxy(function pollFormSubmitSuccess(data) {
                    SDE.log('Success: %o', data);
                    this.container
                        .trigger(SDE.events.Poll.onsubmit)
                        .trigger(SDE.events.Poll.onsuccess, {
                            'form':     this.form,
                            'response': data
                        });
                }, this),
                'error':   SDE.$.proxy(function pollFormSubmitError(xhr, stat, error) {
                    SDE.log.error('Failure: xhr:%o, stat:%o, error:%o', xhr, stat, error);
                    this.container
                        .trigger(SDE.events.Poll.onsubmit)
                        .trigger(SDE.events.Poll.onerror, {
                            'form':   this.form,
                            'status': stat,
                            'error':  error
                        });
                }, this)
            });
        }
        return false;
    }

    /**
     *  Toggles the visibility of the result pane.  Meant to be bound
     *  to the click event of the "view results" link.
     *
     *  @method toggleHandler
     *  @protected
     */
    function _toggleHandler() {
        SDE.log('Toggling visibility of %o', this.results);
        this.form.fadeOut(
            200,
            SDE.$.proxy(function () {
                this.results.fadeIn(200);
            }, this)
        );
        SDE.log.groupEnd();
        return false;
    }

    /**
     *  Generates a clever response to a user's action: "Yay!  You did something
     *  good!" for success, "OMG!  What have you done, what have you
     *  dooooonnnneeeee?!?!?!1!!!?!1" for failure.  Or something similar.  Meant
     *  to be bound to the poll's `SDE.events.Poll.onsuccess` event as well as its
     *  `SDE.events.Poll.onerror` event.
     *
     *  If the submission was successful, the `data` object will contain a `response`
     *  attribute.  This attribute delivers data in the following format:
     *
     *      {
     *          'voteDetails':  [
     *              {
     *                  'optionCount':  {Int},      // index
     *                  'optionId':     {Int},      // id
     *                  'optionLabel':  {String}    // label
     *              },
     *              ...
     *              {
     *                  'optionCount':  {Int},      // index
     *                  'optionId':     {Int},      // id
     *                  'optionLabel':  {String}    // label
     *              }
     *          ],
     *          'voteSum':      {Int}               // Total number of votes
     *      }
     *
     *  If the submission failed, the `data` object will contain an `error`
     *  attribute containing an HTTP error message.  We probably don't need to
     *  display this to the user.
     *
     *  @method userNotification
     *  @protected
     *
     *  @param  {Event}     e       The SDE.events.Poll.onsuccess event.
     *  @param  {Object}    data    Data response from the poll JSON API
     */
    function _userNotification(e, data) {
        SDE.log('Poll: Notifying user of submission status: %o', data);
        var html = '<li><p class="notification %CLASS%">%MSG%</p></li>';
        if (data.error) {
            html = html
                .replace(/%CLASS%/, 'error')
                .replace(/%MSG%/, 'Ein Fehler ist aufgetreten.');
        } else {
            html = html
                .replace(/%CLASS%/, 'important')
                .replace(/%MSG%/, 'Dankesch&ouml;n! Ihre Stimme wurde registriert.');
        }
        html = SDE.$(html);
        this.results.filter('.body').prepend(html);
        setTimeout(function () { html.fadeOut(1000); }, 2000);
    }

    /**
     *  Initalize all polls on a page.
     *  @method initAll
     *  @public
     *  @param  {Object}    userConfig  The poll configuration.
     *  @return {Array<Poll>}
     */
    function _initAllPolls(userConfig) {
        SDE.log.group('Poll: `initAll`');
        SDE.log('Poll initialization with userConfig:%o, baseConfig:%o', userConfig, _baseConfig);

        var conf = null,
            polls = [];

        conf = new SDE.utils.Config(_baseConfig, userConfig);

        if (conf.get('container')) {
            SDE.$(conf.get('container')).each(function () {
                conf.set('container', this);
                polls[polls.length] = new SDE.widget.Poll(conf);
            });
        }
        if (polls.length === 0) {
            SDE.log.warn('Nothing matched the `container` selector (%o), exiting.', conf.get('container'));
        }
        SDE.log.groupEnd();
        return polls;
    }

    SDE.widget.Poll = function Poll(userConfig) {
        SDE.log.group('Poll');
        SDE.log('Constructor, userConfig:%o', userConfig);

        /**
         *  The poll's configuration
         *  @property   config
         *  @type       {Object}
         *  @protected
         */
        this.config = new SDE.utils.Config(this._baseConfig, userConfig);
        /**
         *  The poll's container element
         *  @property   container
         *  @type       {jQuery}
         *  @protected
         */
        this.container = SDE.$(this.config.get('container'));
        /**
         *  The poll's result elements
         *  @property   results
         *  @type       {jQuery}
         *  @protected
         */
        this.results = this.container.find(this.config.get('result'));
        /**
         *  The poll's form elements
         *  @property   form
         *  @type       {jQuery}
         *  @protected
         */
        this.form = this.container.find(this.config.get('form'));

        if (this.container.length === 0) {
            SDE.log.warn('Poll: Constructor, `container` (%s) doesn\'t match any elements, exiting early.', this.config.get('container'));
            SDE.log.groupEnd();
            return;
        }

        SDE.log('Binding events to %o', this.form);
        this.form
            .bind('submit', SDE.$.proxy(this, 'submitHandler'));

        this.container
            .bind(SDE.events.Poll.onsuccess, SDE.$.proxy(this, 'userNotification'))
            .bind(SDE.events.Poll.onerror, SDE.$.proxy(this, 'userNotification'))
            .bind(SDE.events.Poll.onsubmit, SDE.$.proxy(this, 'toggleHandler'))
            .find(this.config.get('toggle'))
            .bind('click', SDE.$.proxy(this, 'toggleHandler'));

        this.results.hide();
        SDE.log.groupEnd();
    };

    SDE.widget.Poll.initAll = _initAllPolls;
    SDE.widget.Poll.prototype._baseConfig = _baseConfig;
    SDE.widget.Poll.prototype.submitHandler = _submitHandler;
    SDE.widget.Poll.prototype.toggleHandler = _toggleHandler;
    SDE.widget.Poll.prototype.userNotification = _userNotification;
    SDE.widget.Poll.prototype.gatherPollSubmission = _gatherPollSubmission;
    SDE.widget.Poll.prototype.validatePollForm = _validatePollForm;
}());
/*global SDE */
(function () {
    /**
     *  Poll modules on gallery pages behave slightly differently (they gather
     *  data from different fields, and submit somewhere other than the `action`
     *  attribute of the `form`).  GalleryPoll extends Poll, overriding the
     *  `gatherPollSubmission` method to effect these changes.
     *
     *  @author     Mike West <Mike.West@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace      SDE.widget
     *  @class          GalleryPoll
     *  @extends        SDE.widget.Poll
     *  @constructor
     *
     *  @param  {Object}    config  The configuration object containing the
     *                              various settings necessary for displaying
     *                              GalleryPoll
     *
     *  @requires   SDE, SDE.utils.Config, SDE.widget.Poll
     */
    SDE.namespace('widget.GalleryPoll');

    var _baseConfig = SDE.widget.Poll.prototype._baseConfig;

    /**
     *  Gather necessary data for a GalleryPoll submission.  Returns a data
     *  object containing:
     *
     *      {
     *          'action':   [URL to which a POST should be made],
     *          'method':   [POST/GET],
     *          'data':     [serialized data in URL format (e.g. `key1=value1&key2=value2`]
     *      }
     *
     *  Assuming the structure given above, this method gathers data by
     *  hardcoding the `action` to `/imagegalleryvote`, and the `method`
     *  to `POST`,  pulling `data-imagekey`/`data-imagevalue` and
     *  `data-gallerykey`/`data-galleryvalue` attributes off the form,
     *  and appending them to the form's serialized representation.
     *
     *  @link   http://jira.sueddeutsche.de/jira/browse/SZCMS-1468
     *
     *  @method gatherPollSubmission
     *  @protected
     *  @returns    {Object}    The gathered data object
     */
    function _gatherPollSubmission() {
        SDE.log('GalleryPoll: Gathering form data for submission via JS.');
        var data = this.form.serialize();

        data += '&' + this.form.attr('data-imagekey') + '=' + this.form.attr('data-imagevalue');
        data += '&' + this.form.attr('data-gallerykey') + '=' + this.form.attr('data-galleryvalue');

        return {
            'action': '/imagegalleryvote',
            'method': 'POST',
            'data':   data
        };
    }

    /**
     *  Validate the Poll submission, which basically means checking to see
     *  that the user actually chose an option before submitting it.
     *
     *  @method validatePollForm
     *  @protected
     *  @returns    {Boolean}   True if valid, False otherwise.
     */
    function _validatePollForm() {
        return (this.form.find('input[name="voteChoice"]:checked').length === 0);
    }

    /**
     *  Generates the result list on the fly as a response to the poll's
     *  `onsuccess` event.  Overrides `poll`'s `userNotification`.
     *
     *  @method userNotification
     *  @protected
     *
     *  @param  {Event}     e       The `onsuccess` Event
     *  @param  {Object}    data    Event data object
     *  @see SDE.events.Poll.onsuccess
     */
    function _userNotification(e, data) {
        SDE.log('Generating result list, e:%o, data:%o', e, data);

        var theList = this.results.filter('ul'),
            html = '<li>' +
                '   <p>' +
                '       <span class="percent %CLASS%" %STYLE%>%PERCENTAGE%%</span>' +
                '       <span>unsere Nutzer haben f&uuml;r "</span>' +
                '       <span class="answer">%LABEL%</span>' +
                '       <span>" abgestimmt.</span>' +
                '   </p>' +
                '</li>',
            style = 'style="border-left-width:%BORDER%px;padding-left:%PADDING%px;"',
            total = data.response.voteSum || 1,
            totalWidth = 75,
            i,
            length,
            item,
            percent,
            classname,
            border,
            padding,
            inlineStyle;

        theList.empty();

        for (i = 0, length = data.response.voteDetails.length; i < length; i = i + 1) {
            item = data.response.voteDetails[i];
            percent = (item.optionCount / total);
            classname = (item.optionCount > 0) ? '' : 'zero';
            border = Math.floor(percent * totalWidth);
            padding = totalWidth - border;
            inlineStyle = border === 0 ? '' : style.replace(/%BORDER%/, border).replace(/%PADDING%/, padding);

            theList.append(
                html.replace(/%CLASS%/, classname)
                    .replace(/%STYLE%/, inlineStyle)
                    .replace(/%PERCENTAGE%/, Math.round(percent * 100))
                    .replace(/%LABEL%/, item.optionLabel)
            );
        }
        SDE.widget.Poll.prototype.constructor.userNotfication.call(this);
    }

    /**
     *  Initalize all GalleryPolls on a page.
     *
     *  @method initAll
     *  @public
     *  @param  {Object}    userConfig  The poll configuration.
     *  @return {Array<GalleryPoll>}
     */
    function _initAll(userConfig) {
        SDE.log.group('GalleryPoll: `initAll`');
        SDE.log('Initialization with userConfig:%o, baseConfig:%o', userConfig, _baseConfig);

        var conf = null,
            polls = [];

        conf = new SDE.utils.Config(_baseConfig, userConfig);

        if (conf.get('container')) {
            SDE.$(conf.get('container')).each(function () {
                conf.set('container', this);
                polls[polls.length] = new SDE.widget.GalleryPoll(conf);
            });
        }
        if (polls.length === 0) {
            SDE.log.warn('Nothing matched the `container` selector (%o), exiting.', conf.get('container'));
        }

        SDE.log.groupEnd();
        return polls;
    }

    SDE.widget.GalleryPoll = function (userConfig) {
        SDE.log.group('GalleryPoll');
        SDE.log('Constructor called with userConfig:%o', userConfig);

        SDE.widget.Poll.prototype.constructor.call(this, userConfig);

        SDE.log.groupEnd();
    };

    SDE.extend(SDE.widget.Poll, SDE.widget.GalleryPoll);
    SDE.widget.GalleryPoll.initAll = _initAll;
    SDE.widget.GalleryPoll.prototype.gatherPollSubmission = _gatherPollSubmission;
    SDE.widget.GalleryPoll.prototype.validatePollForm = _validatePollForm;
    SDE.widget.GalleryPoll.prototype.userNotification = _userNotification;
}());
/*global SDE */
(function () {

    /**
     *  PopupZoom use Overlay to darken the page, and render a an part of HTML in the middle of the page.
     *  It's analouge to widget.Zoomable ...
     *
     *  <pre><code>
     *      new SDE.widget.PopupZoom( {
     *          'toggle': [SELECTOR GOES HERE]
     *          'popup' : [THE CONTENT WHICH WILL BE PLACED IN "POPUP"]
     *      } );
     *  </code></pre>
     *
     *  @author     Jochen Duerr <jochen.duerr@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace  SDE.widget
     *  @class      PopupZoom
     *  @extends    SDE.widget.LightboxControl
     *  @constructor
     *
     *  @param  {Object}        config
     *
     *  @requires   SDE, SDE.widget.Overlay
     */
    SDE.namespace('widget.PopupZoom');

    /**
     *  The base configuration values for PopupZoom.
     *
     *  @property   _baseConfig
     *  @final
     *  @private
     *  @static
     */
    var _baseConfig = SDE.mergeObjects(
        {
            'clickToClose': true
        },
        SDE.widget.LightboxControl.prototype._baseConfig,
        false
    );
    SDE.widget.PopupZoom = function PopupZoom(userConfig) {

        //  0.  Generate config
        var config,
            tmpConfig,
            toggle = userConfig.node.find(userConfig.toggle),
            obj,
            html,
            htmlNode,
            id = SDE.uid();

        userConfig.toggle = toggle.length ? toggle : userConfig.toggle;

        tmpConfig = {
            'toggle': userConfig.toggle,
            'popup':  '<div><iframe src="' + userConfig.url + '" height="' + userConfig.height + '" width="' +
                          userConfig.width + '" frameborder="0"></iframe></div>'
        };
        config = new SDE.utils.Config(this._baseConfig, tmpConfig);

        //  1.  If not provided, generate the "panel" we'll use to display the exciting newly embiggened image.
        if (!config.get('panel')) {

            config.set(
                'popup',
                tmpConfig.popup
            );

            obj = SDE.$(config.get('toggle'));
            html =
                '<div id="%ID%">' +
                    '  <div class="header"></div>' +
                    '  <div id="%ID%_placeholder" class="body" style="height:%HEIGHT%px;width:%WIDTH%px;">' +
                    '    %HTML%' +
                    '  </div>' +
                    '  <div class="footer"></div>' +
                    '</div>';

            if (obj.length === 0) {
                return;
            }

            html = html.replace(/%ID%/g, id)
                .replace(/%HEIGHT%/g, obj.attr('data-oheight'))
                .replace(/%WIDTH%/g, obj.attr('data-owidth'))
                .replace('%HTML%', SDE.$(config.get('popup')).html());

            htmlNode = SDE.$(html);
            htmlNode.css({
                'width': parseInt(obj.attr('data-owidth'), 10) + 'px'
            });

            if (userConfig.isDynamicHeight && userConfig.heightOptions) {
                userConfig.heightOptions.node = htmlNode.find('iframe');
                SDE.init.resizeIframe(userConfig.heightOptions);
            }

            config.set(
                'panel',
                htmlNode
            );
        }

        //  2.  Delegate real functionality to `LightboxControl`
        SDE.widget.LightboxControl.prototype.constructor.call(this, config);

    };

    /**
     *  Initialization for the PopupZoom object.
     *
     *  @static
     *  @method initAll
     *  @public
     *  @param  {Object}    userConfig  The configuration object containing the
     *                              various settings necessary for displaying
     *                              a Popupzoom widget.
     *  @return {Array<PopupZoom>}
     */
    SDE.widget.PopupZoom.initAll = function initAll(userConfig) {
        return [
            new SDE.widget.PopupZoom(userConfig)
        ];
    };

    SDE.extend(SDE.widget.LightboxControl, SDE.widget.PopupZoom);
    SDE.widget.PopupZoom.prototype._baseConfig = _baseConfig;
}());
/*global SDE, window */
(function () {
    /**
     *  The Projector widget rotates through 5 images, highlighting each in
     *  the hopes that a user will click through to an exciting story about
     *  something completely interesting and amazing.
     *
     *  <pre><code>
     *      SDE.widget.Projector.init( {
     *          'classname':    "[CLASSNAME GOES HERE]"
     *      } );
     *  </code></pre>
     *
     *  @author     Mike West <Mike.West@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace  SDE.widget
     *  @class      Projector
     *  @extends    SDE.widget.TabControl
     *
     *  @requires SDE, SDE.widget.TabControl, SDE.utils.Interval
     */
    SDE.namespace('widget.Projector');

    /**
     *  The base configuration values for Projector.
     *
     *  @property   _baseConfig
     *  @protected
     *  @static
     */
    var _baseConfig = SDE.mergeObjects(
        {
            /**
             *  Should the Projectors autorotate through their items?
             *
             *  @config     autorotate
             *  @type       {Boolean}
             *  @default    true
             */
            'autorotate': true,
            /**
             *  At what interval (in seconds) should the Projectors rotate
             *  through their items, if `autorotate` is on?
             *
             *  @config     interval
             *  @type       {Number}
             *  @default    10
             */
            'interval':   10
        },
        SDE.widget.TabControl.prototype._baseConfig,
        false
    );

    /**
     *  Begin autorotation
     *
     *  @method beginAutorotate
     *  @public
     *
     *  @param  {Number}   interval    The interval (in seconds) at which the
     *                              Projector should rotate through it's
     *                              list of items.
     */
    function _beginAutorotate(interval) {
        interval = interval || this.config.get('interval');
        SDE.log('Projector: Beginning autorotation with interval of %d for %o', interval, this.root);
        this._interval = new SDE.utils.Interval({
            'callback': SDE.$.proxy(this, 'next'),
            'interval': interval
        });
    }

    /**
     *  Pause autorotation.
     *
     *  @method pauseAutorotate
     *  @public
     */
    function _pauseAutorotate() {
        SDE.log('Projector: Pausing autorotation for %o', this.root);
        if (this._interval) {
            this._interval.lock();
        }
    }

    /**
     *  Resume paused autorotation.
     *
     *  @method resumeAutorotate
     *  @public
     */
    function _resumeAutorotate() {
        SDE.log('Projector: Resuming autorotation for %o', this.root);
        if (this._interval) {
            this._interval.unlock();
        }
    }

    /**
     *  Initialization for all Projector objects on a page.
     *
     *  @method initAll
     *  @public
     *  @static
     *
     *  @param  {Object}    userConfig  The configuration object containing the
     *                                  various settings necessary for displaying
     *                                  a projector widget.
     *
     *  @return {Array<Projector>}
     */
    function _initAll(userConfig) {
        var conf = new SDE.utils.Config(SDE.widget.Projector.prototype._baseConfig, userConfig),
            items = [];

        if (conf.get('root')) {
            SDE.$(conf.get('root')).each(function () {
                conf.set('root', this);
                items[items.length] = new SDE.widget.Projector(conf);
            });
        } else {
            SDE.log.warn('Projector: `initAll` called without a `root` config param (userConfig:%o).', userConfig);
        }
        return items;
    }

    /**
     *  Create a new Projector object
     *
     *  @method Projector
     *  @constructor
     *  @param  {Object}    userConfig  The configuration for a Projector widget
     */
    SDE.widget.Projector = function Projector(userConfig) {
        SDE.log.group('Projector');
        SDE.log('Constructor called with userConfig:%o', userConfig);
        var proj = this; // make available in the closures

        userConfig.root = userConfig.root || SDE.$(userConfig.node);

        //  Call out to `super` to construct a TabControl
        SDE.widget.TabControl.prototype.constructor.call(this, userConfig);

        if (this.items.length === 0) {
            SDE.log.warn('`items` is an empty list. Exiting early.');
            SDE.log.groupEnd();
            return;
        }

        SDE.utils.matchHeights(this.items, 135);

        //  Hide the tab's item list, and show the one marked `current` (or the one marked `first`)
        this.items
            .hide()
            .filter('.current, .first')
            .eq(0)
            .fadeIn();

        //  3.  Create an event handler to modify the visual style
        //      in response to user interaction.
        function _change_handler(e, data) {
            data.items
                .stop(true, true)
                .eq(data.old)
                .fadeOut('fast')
                .end()
                .eq(data.current)
                .fadeIn('slow')
                .end();
        }

        function _update_display(e, data) {
            // We want to update on mouseover events on our buttons
            if (data.event.target.TabControlIndex !== 'undefined') {
                if (data.event.type === 'mouseover') {
                    proj.pauseAutorotate();
                    proj.refocus(data.event.target.TabControlIndex);
                } else if (data.event.type === 'click') {
                    window.location = data.items.eq(data.event.target.TabControlIndex).find('a')[0].href;
                }
            }
        }

        //  4.  Bind it to `TabControl`'s events on the root element
        this.root.bind(
            SDE.events.TabControl.onnavinteraction,
            _update_display
        ).bind(
            SDE.events.TabControl.onchange,
            _change_handler
        ).mouseleave(
            function () { proj.resumeAutorotate(); }
        );

        if (this.config.get('autorotate')) {
            SDE.log('Beginning autorotation.');
            this.beginAutorotate();
        }
        SDE.log.groupEnd();
    };

    SDE.extend(SDE.widget.TabControl, SDE.widget.Projector);

    SDE.widget.Projector.initAll = _initAll;
    SDE.widget.Projector.prototype.beginAutorotate = _beginAutorotate;
    SDE.widget.Projector.prototype.pauseAutorotate = _pauseAutorotate;
    SDE.widget.Projector.prototype.resumeAutorotate = _resumeAutorotate;
    SDE.widget.Projector.prototype._baseConfig = _baseConfig;
}());
/*global SDE */
(function () {
    /**
     *  Tabs, just the way you'd expect them to work.
     *
     *  @author     Mike West <Mike.West@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace      SDE.widget
     *  @class          TabBox
     *  @extends        SDE.widget.TabControl
     *  @constructor
     *
     *  @requires   SDE, SDE.utils.Config, SDE.widget.TabControl
     *
     *  @param  {Object}    config  The configuration object containing the
     *                              various settings necessary for displaying
     *                              a tab widget.
     */
    SDE.namespace('widget.Tab');

    SDE.widget.TabBox = function TabBox(userConfig) {
        SDE.log.group('TabBox');
        SDE.log('Constructor called with userConfig:%o', userConfig);

        var control = this; // Alias for closures

        userConfig.root = userConfig.root || userConfig.node;

        //  Call out to `super` to construct a TabControl
        SDE.widget.TabControl.prototype.constructor.call(this, userConfig);

        SDE.utils.matchHeights(this.items);

        //  2.  Hide the tab's item list, and show the one marked `current`, and
        //      sync each item's height.
        this.items
            // Position each element absolutely in the top left corner.
            .css({
                'left':     '0',
                'position': 'absolute',
                'top':      '0'
            })
            // Hide everything, then show `current`
            .hide()
            .filter('.current')
            .show();

        //  3.  Create an event handler to modify the visual style
        //      in response to user interaction.
        function _change_handler(e, data) {
            SDE.log('TabBox: changeHandler called in response to e:%o.  Passed data:%o', e, data);
            data.items
                .eq(data.old)
                .fadeOut('fast')
                .end()
                .eq(data.current)
                .fadeIn('slow')
                .end();
        }

        function _update_display(e, data) {
            SDE.log('TabBox: updateDisplay called in response to e:%o.  Passed data:%o', e, data);
            if (data.event.target.TabControlIndex !== 'undefined') {
                control.refocus(data.event.target.TabControlIndex);
            }
        }

        //  4.  Bind it to `TabControl`'s events on the root element
        this.root.bind(
            SDE.events.TabControl.onnavinteraction,
            _update_display
        ).bind(
            SDE.events.TabControl.onchange,
            _change_handler
        );

        SDE.log.groupEnd();
    };

    /**
     *  Initialization for all Tab objects on the page.
     *
     *  @method initAll
     *  @public
     *  @static
     *
     *  @param  {Object}    userConfig  The configuration object containing the
     *                              various settings necessary for displaying
     *                              a tab widget.
     *
     *  @return {Array<Tab>}
     */
    function _initAll(userConfig) {
        var conf = new SDE.utils.Config(SDE.widget.TabBox.prototype._baseConfig, userConfig),
            tabs = [];

        if (conf.get('root')) {
            SDE.$(conf.get('root')).each(function () {
                conf.set('root', this);
                tabs[tabs.length] = new SDE.widget.TabBox(conf);
            });

        } else {
            SDE.log('TabBox: `initAll` called without a `root` config param: userConfig:%o.', userConfig);
        }
        return tabs;
    }

    SDE.extend(SDE.widget.TabControl, SDE.widget.TabBox);
    SDE.widget.TabBox.initAll = _initAll;
}());
/*global SDE, document */
(function () {
    /**
     *  PagingControl handles inline-paging, for example moving between a
     *  series of lists. Expects the series to be sequential, 1..n.
     *
     *  The control isn't reliant on a particular HTML-structure, but simply
     *  switches between a sequence of elements whose IDs conform to the
     *  pattern 'myelementid-x', where 'x' is an integer representing the
     *  element's sequence-number.
     *
     *  Example:
     *  <div id="banderole-page-1">
     *       Page1-content
     *  </div>
     *
     *  <div id="banderole-page-2">
     *       Page2-content
     *  </div>
     *
     *  The control is also able to build the page-navigation on its own.
     *
     *  @author     Thomas Andersson <Thomas.Andersson@netlight.com>
     *  @version    $Id$
     *
     *  @namespace  SDE.widget
     *  @class      PagingControl
     *  @constructor
     *  @param      {Object}    userConfig  The PagingControl's configuration
     *
     *  @requires   SDE
     */

    SDE.namespace('widget.PagingControl');

    /**
     *  The PagingControl base config
     *
     *  @property   _baseConfig
     *  @type       {Object}
     *  @static
     *  @protected
     */
    var _pagingControlConfig = {
        /**
         * The container for the navigation controls.
         *
         * @config     navContainer
         * @type       {String|Element|jQuery}
         */
        'navContainer':     null,
        /**
         * The container for the next/previous button navigation controls.
         *
         * @config     stepNavContainer
         * @type       {String|Element|jQuery}
         */
        'stepNavContainer': null,
        /**
         * Whether to include a next button.
         *
         * @config       nextButton
         * @type         {Boolean}
         * @default    false
         */
        'nextButton':       false,
        /**
         * Whether to include a previous button.
         *
         * @config     prevButton
         * @type       {Boolean}
         * @default    false
         */
        'prevButton':       false,
        /**
         * The root element of this control.
         *  @config     root
         *  @type       {String|Element|jQuery}
         *  @default null
         */
        'root':             null
    };

    SDE.widget.PagingControl = function PagingControl(userConfig) {
        SDE.log.group('PagingControl');
        SDE.log('Constructor called with userConfig:%o', userConfig);

        var control = this, // Alias for closures
            navContainer,
            pagingConfig,
            createButton,
            stepNavContainer;

        navContainer = SDE.$(userConfig.navContainer);
        if (!navContainer.length) {
            SDE.log.warn('Config param `navContainer` (userConfig:%o) matches no elements.  Exiting early.', userConfig);
            SDE.log.groupEnd();
            return;
        }

        // We want to place the navigation node ourselves.
        userConfig.onCreateCallback = function (navNode) {
            if (navContainer) {
                navNode.appendTo(navContainer);
            }
        };

        // We want a-tags, not buttons
        userConfig.buttonType = 'a';

        // No mouseover-event.
        userConfig.changeOnMouseOver = false;

        //  Call out to 'super' to construct a TabBox
        SDE.widget.TabBox.prototype.constructor.call(this, userConfig);

        pagingConfig = new SDE.utils.Config(_pagingControlConfig, userConfig);

        // Create 'next' and/or 'prev' button(s)
        if (pagingConfig.get('nextButton') || pagingConfig.get('prevButton')) {
            stepNavContainer = SDE.$(pagingConfig.get('stepNavContainer'));
            if (!stepNavContainer.length) {
                SDE.log.warn('Config param `stepNavContainer` (userConfig:%o) matches no elements.  Exiting early.', userConfig);
                SDE.log.groupEnd();
                return;
            }

            stepNavContainer.addClass('stepnav');

            createButton = function (cssClass, text, callback) {
                var textNode = SDE.$(document.createElement('span'))
                    .addClass('offscreen')
                    .text(text);

                SDE.$(document.createElement('a'))
                    .addClass(cssClass)
                    .click(callback)
                    .attr('href', '#')
                    .append(textNode)
                    .appendTo(stepNavContainer);
            };

            if (pagingConfig.get('previousButton')) {
                createButton('prev', 'vorherige Seite',
                    function () {
                        control.previous();
                        return false;
                    });
            }

            if (pagingConfig.get('nextButton')) {
                createButton('next', 'n&auml;chste Seite',
                    function () {
                        control.next();
                        return false;
                    });
            }
        }

        SDE.utils.matchHeights(this.items);

        SDE.log.groupEnd();
    };

    SDE.extend(SDE.widget.TabBox, SDE.widget.PagingControl);
}());
/*global SDE, document, window */
(function () {
    /**
     *  The TravelCard-Module is is placed in travel-department (i don't know if it can placed in other department also too).
     *  The user can select an region over all the wonderful select-elements an hopefully become the information who wants.
     *
     *  <pre><code>
     *      new SDE.widget.TravelCard();
     *  </code></pre>
     *
     *  @author     Jochen Duerr <jochen.duerr@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace  SDE.widget
     *  @class      Travelcard
     *  @constructor
     *
     *  @param regions
     *
     *  @requires   SDE
     */

    SDE.namespace('widget.TravelCard');

    SDE.widget.TravelCard = function TravelCard(userConfig) {
        SDE.log.group('Travelcard');
        SDE.log('Constructor, userConfig:%o', userConfig);

        // url of the last selected
        var target = '',
            // remember the actual element
            rootSelect = '',
            // object with all data's
            regions = userConfig.regions,
            createSelect,
            createOptions,
            fillSelect,
            selectChanged;

        /**
         * Creates an empty <select>-container
         *
         * @param {jQuery}  anchor  jQuery-object on which make dom-manipulation
         * @param {boolean} after
         */
        createSelect = function (anchor, after) {
            var ret = SDE.$(document.createElement('select'));
            ret.append('<option value="#">Bitte w&auml;hlen</option>');
            if (after) {
                anchor.after(ret);
            } else {
                anchor.prepend(ret);
            }
            return ret;
        };

        /**
         * Creates an list of <option>'s
         *
         * @param {string} select   jQuery-object of select to create option in
         * @param {string} value    value of <option>
         * @param {string} name     shown name between <option>...</option>
         */
        createOptions = function (select, value, name) {
            select.append('<option value="' + value + '">' + name + '</option>');
        };

        /**
         *
         * @param {Object} select
         * @param {Object} region
         */
        fillSelect = function (select, region) {
            SDE.$.each(region.children, function (i, region) {
                createOptions(select, region.url, region.name);
            });
        };

        /**
         *
         * @param {Object} region
         * @param {Object} select
         */
        selectChanged = function (select, region) {
            // kill all next siblings
            select.nextAll('select').remove();
            // remember the last target
            target = select.find('option:selected').attr('value');
            // run through json ...
            SDE.$.each(region.children, function (i, region) {
                if (region.url === target && region.children) {
                    var nextSelect = createSelect(select, true);
                    fillSelect(nextSelect, region);
                    nextSelect.change(function () {
                        selectChanged(nextSelect, region);
                    });
                }
            });
        };

        /*
         * Init.
         */

        rootSelect = createSelect(SDE.$('#regionform'), false);
        SDE.$(rootSelect).before('<label>Reiseziele</label>');
        fillSelect(rootSelect, regions);
        rootSelect.change(function () {
            selectChanged(rootSelect, regions);
        });

        // Add submit-button visible
        SDE.$('#regionform').after('<button type="button" class="cta">Zum Reiseziel</button>');

        /*
         * Submit
         */
        SDE.$('.travelcard button').click(function () {
            window.location.href = target || SDE.$('#level1 option:selected').attr('value');
        });

        SDE.log.groupEnd();
    };

}());
/*global SDE */
(function () {

    /**
     *  Dropdown for Weitere Angebote form, just the way you'd expect it to work.
     *
     *  @author     Mike West <Mike.West@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace      SDE.widget
     *  @class          WeitereAngebote
     *  @extends        SDE.widget.DropdownControl
     *  @constructor
     *
     *  @param  {Object}    config  The configuration object containing the
     *                              various settings necessary for displaying
     *                              WeitereAngebote
     *
     *  @requires   SDE, SDE.utils.Config, SDE.widget.DropdownControl
     */
    SDE.namespace('widget.WeitereAngebote');

    SDE.widget.WeitereAngebote = function (userConfig) {
        SDE.log.group('WeitereAngebote');
        SDE.log('Constructor called with userConfig:%o', userConfig);
        SDE.widget.DropdownControl.prototype.constructor.call(this, userConfig);
        SDE.log.groupEnd();
    };

    /**
     *  Initialization for the WeitereAngebote object.
     *
     *  @method     initAll
     *  @public
     *  @param  {Object}    userConfig  The configuration object containing the
     *                              various settings necessary for displaying
     *                              a WeitereAngebote widget.
     *  @return {Array<WeitereAngebote>}    An array containing all the widgets created
     */
    function initAll(userConfig) {
        return [
            new SDE.widget.WeitereAngebote(userConfig)
        ];
    }

    SDE.extend(SDE.widget.DropdownControl, SDE.widget.WeitereAngebote);
    SDE.widget.WeitereAngebote.initAll = initAll;
}());
/*global SDE */
(function () {

    /**
     *  Zoomable images use Overlay to darken the page, and render a full-size
     *  image in the middle of the page.
     *
     *  <pre><code>
     *      new SDE.widget.Zoomable( {
     *          'toggle':   [SELECTOR GOES HERE]
     *      } );
     *  </code></pre>
     *
     *  @author     Mike West <Mike.West@sueddeutsche.de>
     *  @version    $Id$
     *
     *  @namespace  SDE.widget
     *  @class      Zoomable
     *  @extends    SDE.widget.LightboxControl
     *  @constructor
     *
     *  @param  {Object}        config
     *
     *  @requires   SDE, SDE.widget.Overlay
     */

    SDE.namespace('widget.Zoomable');

    /**
     *  The base configuration values for Zoomable.
     *
     *  @property   _baseConfig
     *  @final
     *  @private
     *  @static
     */

    var _baseConfig = SDE.mergeObjects(
        {
            'clickToClose': true
        },
        SDE.widget.LightboxControl.prototype._baseConfig,
        false
    );

    SDE.widget.Zoomable = function Zoomable(userConfig) {
        var config,
            toggle,
            obj,
            html,
            id,
            subtitle,
            configToggle;
        SDE.log.group('Zoomable');
        SDE.log('Constructor, userConfig:%o', userConfig);

        configToggle = userConfig.toggle;

        toggle = configToggle.match(/^#/) ? SDE.$(configToggle) : userConfig.node.find(configToggle);
        if (!toggle.length) {
            return;
        }
        userConfig.toggle = toggle;

        //  0.  Generate config
        config = new SDE.utils.Config(this._baseConfig, userConfig);

        if (!config.get('panel')) {
            SDE.log('Panel not provided, generating one ourselves.');
            //  1.  If not provided, generate the 'panel' we'll use to
            //      display the exciting newly embiggened image.
            obj = SDE.$(config.get('toggle'));
            html =
                '<div id="%ID%">' +
                    '  <div class="header"></div>' +
                    '  <div id="%ID%_placeholder" class="body" style="height:%HEIGHT%px;width:%WIDTH%px;">' +
                    '    <img data-src="%SRC%" src="" height="%HEIGHT%" width="%WIDTH%">' +
                    '  </div>' +
                    '  <div class="footer">%CAPTION%</div>' +
                    '</div>';
            id = SDE.uid();

            if (obj.length === 0) {
                SDE.log.warn('`toggle` (%s) matches no elements, exiting.', config.get('toggle'));
                SDE.log.groupEnd();
                return;
            }

            subtitle = obj.parent().parent().find('figcaption').html();

            html = html.replace(/%ID%/g, id)
                .replace(/%SRC%/g, obj.attr('href'))
                .replace(/%HEIGHT%/g, obj.attr('data-oheight'))
                .replace(/%WIDTH%/g, obj.attr('data-owidth'))
                .replace(/%CAPTION%/g, (subtitle !== null ? subtitle : '&nbsp;'));

            config.set(
                'panel',
                SDE.$(html).css({
                    'width': parseInt(obj.attr('data-owidth'), 10) + 'px'
                })
            );
        }

        //  2.  Delegate real functionality to `LightboxControl`
        SDE.widget.LightboxControl.prototype.constructor.call(this, config);

        SDE.log.groupEnd();
    };

    /**
     *  Initialization for the Zoomable object.
     *
     *  @static
     *  @method initAll
     *  @public
     *  @param  {Object}    userConfig  The configuration object containing the
     *                              various settings necessary for displaying
     *                              a Zoomable widget.
     *  @return {Array<Zoomable>}
     */
    SDE.widget.Zoomable.initAll = function initAll(userConfig) {
        return [
            new SDE.widget.Zoomable(userConfig)
        ];
    };

    SDE.extend(SDE.widget.LightboxControl, SDE.widget.Zoomable);
    SDE.widget.Zoomable.prototype._baseConfig = _baseConfig;
}());
/*global SDE,window, document, gapi, setTimeout: false */
(function () {
    /**
     * Initialisation functions specific to articles.
     *
     *  @author     Thomas Andersson <Thomas.Andersson@netlight.com>
     *  @version    $Id$
     */

    /*
     *  Init for the article functions, ie the list of actions available for
     *  an article. This list lives just beneath the article text.
     */
    SDE.init.articleFunctions = function () {
        var feedbackWidget,
            displayElement;
        if (SDE.utils.CopyUtil.available()) {
            SDE.$('#functions .noFlash').hide();
            SDE.$('#functions .withFlash').show();

            displayElement = SDE.$('#functions .withFlash .copyFeedbackContainer');
            // Initialise the feedback-bubble
            feedbackWidget = new SDE.widget.ContainerboxControl({
                containerName:       'copyFunctionContainer',
                displayElement:      displayElement,
                clickOutsideToClose: false,
                closeButton:         false
            });
            // Initialise the copy-util
            SDE.utils.CopyUtil.copy(SDE.$('#copyFunction'), SDE.$('#tinyUrlLink').text(), function () {
                feedbackWidget.getContainer().fadeIn(500, function () {
                    feedbackWidget.getContainer().show();
                });

                setTimeout(function () {
                    feedbackWidget.getContainer().fadeOut(2000, function () {
                        feedbackWidget.getContainer().hide();
                    });

                }, 2500);
            });
        } else {
            SDE.$('#functions .noFlash').show();
            SDE.$('#functions .withFlash').hide();

            displayElement = SDE.$('#functions .noFlash .copyFeedbackContainer');
            // Initialise the feedback-bubble
            feedbackWidget = new SDE.widget.ContainerboxControl({
                displayElement:      displayElement,
                clickOutsideToClose: false,
                closeButton:         false
            });

            SDE.$('#copyFunctionNoFlash').click(function (e) {
                e.preventDefault();
                var urlVersion = SDE.$('#functions #tinyUrlContainer span.tinyUrl'),
                    selectVersion = SDE.$('#functions #tinyUrlValue');

                urlVersion.hide();
                selectVersion.show().select();
                feedbackWidget.getContainer().fadeIn(500, function () {
                    feedbackWidget.getContainer().show();
                });

                selectVersion.blur(function () {
                    selectVersion.hide();
                    feedbackWidget.getContainer().fadeOut(500, function () {
                        feedbackWidget.getContainer().hide();
                    });
                    urlVersion.show();
                });
                return false;
            });
        }
    };

    SDE.init.sharingIconsPopup = function (params) {
        var containerBoxControlSharingbar,
            sharingBarToggle,
            gPlusActive,
            gPlusConfirm,
            gPlusElement,
            articleUrl,
            arrowDirection,
            scrollable;

        arrowDirection = params.arrowDirection;

        // Create sharingbar containerbox for the popup
        sharingBarToggle = SDE.$('#sharingbar-toggle');
        scrollable = sharingBarToggle.closest('#sidebarcontent .scrollable');

        if (sharingBarToggle) {
            containerBoxControlSharingbar = new SDE.widget.ContainerboxControl({
                closeButton:         SDE.utils.DeviceDetection.isSmartphoneOrTablet,
                clickOutsideToClose: true,
                containerName:       'sharingbarpopup',
                displayElement:      SDE.$('#sharingbar-popup'),
                arrowDirection:      arrowDirection
            });

            // Attach event listeners for the sharing bar popup
            sharingBarToggle.on('mouseenter', function (e) {
                if (!containerBoxControlSharingbar.container.is(':visible') ||
                        containerBoxControlSharingbar.container.hasClass('offscreen')) {
                    var positionTop = e.pageY,
                        positionLeft = e.pageX;

                    if (scrollable.length > 0) {
                        positionTop = positionTop - scrollable.offset().top;
                        positionLeft = positionLeft - scrollable.offset().left;
                    } else {
                        positionTop = SDE.$('#sharingbar-toggle .facebook').outerHeight(true);
                        positionLeft = positionLeft - sharingBarToggle.offset().left;
                    }
                    containerBoxControlSharingbar.toggle();
                    containerBoxControlSharingbar.reposition(positionTop, positionLeft);
                }
                gPlusActive = false;
                gPlusConfirm = false;

            });
            sharingBarToggle.on('mouseleave', function () {
                if (containerBoxControlSharingbar.container.is(':visible') && !gPlusActive) {
                    containerBoxControlSharingbar.toggle();
                }
            });
            // Initialize gplus activity, needs to display overlay properly
            // Find gplus element
            gPlusElement = SDE.$('#sharingbar-gplus');
            if (gPlusElement) {
                // get url from element
                articleUrl = gPlusElement.attr('data-url');
                // render google plus
                gapi.plusone.render('sharingbar-gplus', {
                    'size':               'tall',
                    'href':               articleUrl,
                    'onstartinteraction': function (params) {
                        if (params.type === 'hover') {
                            //user hovers bubble
                            gPlusActive = true;
                        }
                        if (params.type === 'confirm') {
                            //user clicks bubble, do not close the hover
                            gPlusActive = true;
                            gPlusConfirm = true;
                        }
                    },
                    'onendinteraction':   function (params) {
                        if (params.type === 'hover') {
                            //close the bubble, if confirmation done
                            if (!gPlusConfirm) {
                                gPlusActive = false;
                            }
                            gPlusConfirm = false;
                        }
                    }
                });
            }
        }
    };

    /*
     *  Init for the article sidebar.
     *
     *  Positions the sidebar properly; enables the fixed scrolling.
     *  Takes iFrame resizing into account for all the dynamic height assets.
     */
    SDE.init.articleSidebar = function () {
        var articleTop,
            scrollable,
            referenceNodeForPosition,
            scrollableTopMargin,
            offset,
            top,
            originalTop,
            windowTop,
            commentsModuleTop,
            sidebarContentOffset;

        // First off, position the sidebar properly.
        articleTop = SDE.$('#sitecontent').position().top;
        SDE.$('#sidebarcontent').css('top', articleTop + 'px');

        // Then, attempt to position the scrollable content into the sidebar correctly.
        scrollable = SDE.$('#sidebarcontent .scrollable');

        if (scrollable.length > 0) {
            var positionScrollable = function (e) {
                var jsondata;
                if (e) {
                    jsondata = SDE.$.parseJSON(e.originalEvent.data);
                }
                // Resposition at first page load or when an iframe (e.g. in the topslot) has been resized.
                if (!e || jsondata.sizing) {
                    sidebarContentOffset = SDE.$('#sidebarcontent').offset().top;
                    referenceNodeForPosition = SDE.$('#sitecontent #sharingbaranchor');
                    scrollableTopMargin = parseInt(SDE.$('#sidebarcontent .scrollable').css('margin-top'), 10) - 5;

                    offset = -scrollableTopMargin;
                    top = referenceNodeForPosition.offset().top - sidebarContentOffset + offset;
                    scrollable.css({
                        'top':     top + 'px',
                        'display': 'block'
                    });

                    // Whenever a repositioning occurs, update values used by the scroll handler to ensure
                    // correct positioning also when scrolling the page.
                    originalTop = scrollable.css('top');
                    windowTop = scrollable.offset().top;
                    commentsModuleTop =
                        SDE.$('#usercomments').offset().top;

                }
            };

            var registerScrollListener = function () {
                // Attach event listener to scrolling of the sidebar,
                // but only if we're in www mode and only if we use an actual desktop browser.
                if (!SDE.utils.DeviceDetection.isSmartphoneOrTablet) {
                    sidebarContentOffset = SDE.$('#sidebarcontent').offset().top;
                    originalTop = scrollable.css('top');
                    windowTop = scrollable.offset().top;
                    commentsModuleTop =
                        SDE.$('#usercomments').offset().top - scrollable.outerHeight(true) - 65;

                    SDE.$(window).on('scroll', function () {
                        var scrollTop = SDE.$(document).scrollTop();

                        if (scrollTop >= commentsModuleTop) {
                            if (scrollable.css('position') !== 'absolute') {
                                scrollable.css({
                                    'position': 'absolute',
                                    'top':      scrollable.offset().top - sidebarContentOffset
                                });
                            }
                        } else if (scrollTop >= windowTop) {
                            scrollable.css({
                                'position': 'fixed',
                                'top':      '0px'
                            });
                        } else {
                            scrollable.css({
                                'position': 'relative',
                                'top':      originalTop
                            });
                        }
                    });
                }
            };

            positionScrollable();
            // Attach event listener to intercept resizing messages for iFrames.
            SDE.$(window).on('message', positionScrollable);
            SDE.$(window).load(registerScrollListener);

        }
    };

    /*
     *  Init for the article enrichments
     */
    SDE.init.enrichments = function (data) {
        SDE.log.group('Enrichments');

        var enrichmentsObjects = SDE.$('#' + data.id);

        if (!enrichmentsObjects.length) {
            SDE.log('No enrichment object found with id "' + data.id + '"; returning.');
            SDE.log.groupEnd();
            return;
        }

        enrichmentsObjects.each(function () {
            // Move data-href to href, or replace with first proper link-URL
            var currObj = SDE.$(this),
                enrichmentLink = currObj.find('a[href!="#"]').first().attr('href');

            currObj.find('a[href="#"]').each(function () {
                var elem = SDE.$(this),
                    dataHref = elem.attr('data-href'),
                    href;

                href = dataHref || enrichmentLink;
                elem.attr('href', href);
            });

            // If we're a teaser, we need to be even more clickable
            if (currObj.hasClass('teaser')) {
                currObj.find('.entry-title, .entry-summary').click(function () {
                    window.location.href = enrichmentLink;
                });
            }

            // If we're a video in IMAGE display mode, we need to be even more clickable
            if (currObj.is('.enrichment.video.image')) {
                currObj.find('.entry-title').click(function () {
                    window.location.href = enrichmentLink;
                });
            }

            // If we're a external link in IMAGE display mode, we need to be even more clickable
            if (currObj.is('.enrichment.external.image')) {
                currObj.find('.entry-title').click(function () {
                    window.open(enrichmentLink, '_blank');
                });
            }
        });

        SDE.log.groupEnd();
    };

    /*
     * Function for mimicking HTML anchoring. This has to be used because otherwise the
     * sharing bar doesn't receive a scrolling event and doesn't recalculate its position properly.
     */
    SDE.init.anchor = function (elements) {
        var offsetTop,
            staticBarPosition,
            referenceElement = SDE.$('#' + elements.referenceElement),
            elementIdToJumpTo = SDE.$('#' + elements.elementIdToJumpTo),
            scrollable = SDE.$('#sidebarcontent .scrollable');

        if (elementIdToJumpTo.length && referenceElement.length) {
            referenceElement.click(function () {
                staticBarPosition =
                    SDE.$('#usercomments').offset().top - (scrollable.outerHeight(true) * 2) - 65;
                offsetTop = elementIdToJumpTo.offset().top - 50;

                if (scrollable && scrollable.css('position') !== 'absolute') {
                    scrollable.css({
                        'position': 'absolute',
                        'top':      staticBarPosition
                    });
                }
                SDE.$(document).scrollTop(offsetTop);
            });
        }
    };

    /*
     * js for the functionallity of the "Updates zu" Box at the end of an article
     */
    SDE.init.stayInformed = function (data) {

        var stayInformed    = SDE.$(data.node),
            trackPrefix     = data.trackPrefix,
            displayElement  = stayInformed.find('.boxPopup'),
            containerBox    = new SDE.widget.ContainerboxControl({
                'displayElement': displayElement
            }),
            twitterBaseUrl  = 'http://www.twitter.com/DATA',
            topPos = stayInformed.height() + parseInt(stayInformed.css('padding-top').replace('px', ''), 10),
            replaceFn,
            stayInformedClickHandler;

        replaceFn = function (item, baseUrl) {
            return item ? baseUrl.replace(/DATA/, item) : '#';
        };

        containerBox.getContainer().css('top', topPos);

        stayInformedClickHandler = function (sourceElem) {
            var data = sourceElem.attr('data-info'),
                jsonData = SDE.$.evalJSON(data);
            displayElement.find('.rssfeed a').attr('href', jsonData.rssFeedUrl || '#');
            displayElement.find('.mail a').attr('href', jsonData.newsletterUrl || '#');
            displayElement.find('.facebook a').attr('href', jsonData.facebookPage || '#');
            displayElement.find('.twitter a').attr('href', replaceFn(jsonData.twitterProfile, twitterBaseUrl));
            displayElement.find('.googlePlus a').attr('href', jsonData.googlePlusProfile || '#');

            // Only show the items that have real URLs, and ensure they are trackable
            displayElement.find('li').show()
                .find('a')
                .attr(trackPrefix, sourceElem.attr('data-linktrack'))
                .filter('[href="#"]')
                .parent().hide();

            displayElement.find('strong span').text(jsonData.caption);

            // Clicking an item doesn't trigger a close, only an open
            if (!containerBox.getContainer().is(':visible')) {
                containerBox.toggle();
            }
        };

        stayInformed.find('ul.stayInformed li').on('click', function (e) {
            stayInformedClickHandler(SDE.$(this));
            e.preventDefault();
            return false;
        });
    };

}());
/*global SDE, window, document */
(function () {
    /**
     *  @author     Thomas Andersson <Thomas.Andersson@netlight.com>
     *  @version    $
     */

    function bindKeys() {
        // Setup left/right-arrow:
        SDE.log.group('Binding left/right arrows for navigation');
        var next                = SDE.$('.gallery a[class="next"][href!="#"]').first(),
            prev                = SDE.$('.gallery a[class="prev"][href!="#"]').first(),
            rightArrowKeyCode   = 39,
            leftArrowKeyCode    = 37;

        SDE.$(document).keyup(function (e) {
            // We're only allowed to do this if the overlay isn't there
            if (SDE.$('.gallery .overlay').length) {
                return;
            }

            if (e.which === rightArrowKeyCode && next.length) {
                SDE.log('Right arrow: Navigating to next page: %s', next.attr('href'));
                window.location = next.attr('href');
            } else if (e.which === leftArrowKeyCode && prev.length) {
                SDE.log('Left arrow: Navigating to previous page: %s', next.attr('href'));
                window.location = prev.attr('href');
            }
        });

        SDE.log('Hacking around accidental triggering via the `mailtofriend` form\'s keyUp events.');
        SDE.$('#mailtofriend').keyup(function (e) { e.stopPropagation(); });
        SDE.log.groupEnd();
    }

    /**
     * Initialisation for the image gallery.
     *
     * @param data.nextURL {String} The URL for the next image in the gallery
     * @param data.prevURL {String} The URL for the previous image in the gallery
     */
    SDE.init.imageGallery = function (data) {
        // Set the URLs for the prev/next-links and the image itself
        SDE.$('.gallery a[class="next"][href="#"]').attr('href', data.nextURL);
        SDE.$('.gallery a[class="prev"][href="#"]').attr('href', data.prevURL);
        SDE.$('.gallery .image-top').click(function () {
            window.location.href = data.nextURL;
        });

        // Get height of paging in header, because title can run over two lines ...
        SDE.$('.gallery .header .paging .whereami').css({
            'height': SDE.$('.gallery .header h2').height()
        });

        bindKeys();
    };

    /*
     *  Init for Gallery next-page overlay
     */
    SDE.init.imageGalleryOverlay = function () {
        var closeFunction = function () {
            SDE.$('.iqadcontainer').parent().find('.overlay').remove();
            SDE.$('.iqadcontainer').remove();
            return false;
        };
        // Close the ad on both keyup and when clicking the 'x'
        SDE.$('.iqadcontainer .closebutton, .gallery .overlay').click(closeFunction);
        SDE.$(document).keyup(closeFunction);
    };
}());/*global SDE */
(function () {
    /**
     * Initialisation for legacy functionalities. These all make use of the old
     * init-event style of handling initialisation, and should therefore be migrated
     * as soon as possible.
     *
     *  @author     Thomas Andersson <Thomas.Andersson@netlight.com>
     *  @version    $Id$
     */

    /*
     *  Init for Cinemasearch
     */
    SDE.init.bind(
        SDE.events.ContentReady.cinemasearch,
        function (e, data) {
            return new SDE.widget.CinemaSearch({
                container : '.' + data.id,
                url       : '/app/service/kino/act/act_getSubcategory.php'
            });
        }
    );

    /*
     *  Init for comments on article pages
     */
    SDE.init.bind(
        SDE.events.ContentReady.comments,
        function (e, data) {
            return new SDE.widget.Comments({
                'path'   : data.path,
                'mode'   : data.mode
            });
        }
    );

    /*
     * Init for the SDE Event Calendar
     */
    SDE.init.bind(
        SDE.events.ContentReady.eventcalendar,
        function () {
            SDE.$('#es_fromdate, #es_todate')
                .datepicker({
                    dateFormat:        'dd.mm.yy',
                    dayNamesMin:       ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'],
                    dayNames:          ['Sonntag', 'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag'],
                    monthNamesShort:   ['Jan', 'Feb', 'Mar', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov',
                                            'Dez'],
                    monthNames:        ['Januar', 'Februar', 'M&auml;rz', 'April', 'Mai', 'Juni', 'Juli', 'August',
                                            'September', 'Oktober', 'November', 'Dezember'],
                    showOtherMonths:   true,
                    selectOtherMonths: true
                });

        }
    );
}());/*global SDE, window */
(function () {
    /**
     * Initialisation functions for the homepage and department pages.
     *
     *  @author     Thomas Andersson <Thomas.Andersson@netlight.com>
     *  @version    $Id$
     */

    /*
     *  Init for the "In the Paper" module
     */
    SDE.init.inThePaper = function () {
        SDE.utils.ListToSelect.init({
            selector    : '.szservices .footer',
            label       : '.szservices .footer p',
            placeholder : 'Bitte w&auml;hlen',
            submittable : false,
            callback    : function () {
                if (this.value) {
                    window.location = this.value;
                }
            }
        });

        // Fade from page 1 to 2
        SDE.$('span.previewpage2').click(function () {
            SDE.$('div.szpreview1').slideUp('slow', function () {
                SDE.$('div.szpreview2').slideDown('slow');
            });
        });

        // Fade from page 2 to 1
        SDE.$('span.previewpage1').click(function () {
            SDE.$('div.szpreview2').slideUp('slow', function () {
                SDE.$('div.szpreview1').slideDown('slow');
            });
        });
    };

    var lazyLoad;

    lazyLoad = function () {
        var loadItems = [],
            win = SDE.$(window),
            loader,
            lazyImages,
            i,
            imageElement,
            lazyConfig,
            markerElement,
            loadOffset;

        loader = new SDE.utils.ImageLoader({
            'sourceAttribute': 'data-src',
            'preloadClass': 'lazy-preload'
        });

        lazyImages = SDE.$('img[data-lazyLoad]');

        for (i = 0; i < lazyImages.length; i = i + 1) {
            imageElement = SDE.$(lazyImages.get(i));
            lazyConfig = SDE.utils.parameterParser(imageElement.attr('data-lazyload')).params;
            markerElement = lazyConfig.markerElement ? SDE.$(lazyConfig.markerElement) : imageElement;
            loadOffset = String(lazyConfig.loadOffset || imageElement.outerHeight() / 2);

            if (markerElement && markerElement.length) {
                loadItems.push({'elem': imageElement, 'marker': markerElement, 'offset': parseInt(loadOffset.replace(/[^\d]/g, ''), 10)});
            }
        }

        SDE.$(window).on('scroll.lazyload', function () {
            var loaded = [],
                j,
                item,
                shouldShow;

            for (j = 0; j < loadItems.length; j = j + 1) {
                item = loadItems[j];
                shouldShow = (item.marker.position().top - item.offset) < (win.scrollTop() + win.height());

                if (shouldShow) {
                    loader.loadImage(item.elem.attr('data-src'));
                    loaded.push(item);
                }
            }

            loadItems = SDE._.difference(loadItems, loaded);

            if (!loadItems.length) {
                SDE.$(window).off('scroll.lazyload');
            }
        });

    };

    if (SDE && SDE._.isArray(SDE.init.readyFns)) {
        SDE.init.readyFns.push(lazyLoad);
    }
}());/*global SDE, navigator, window, setTimeout, location, document */
(function () {

    /*
     * Init for the SDE Site Header
     *
     * Initalizes the login box, the "weitere angebote" dropdown panel, and
     * fiddles around with the width of the page's subnavigation so that it can
     * dynamically resize based on the number and width of the "features" that
     * have been sold.
     */

    var init,
        ipadOffer,
        addToHomescreenIpad,
        setAsStartPageBanner,
        setSearchHandler,
        setSitenavWidth,
        setPagenavWidth,
        setNoMobileNotice,
        setLogoAndTime,
        moreDepartments;

    init = function () {

        SDE.widget.Login.init({
            'type':   'siteheader',
            'toggle': '#logintoggle',
            'status': SDE.$('#logintoggle').attr('data-status')
        });

        SDE.widget.WeitereAngebote.initAll({
            'panel':  '#weiterepanel',
            'toggle': '#weiterebox'
        });
    };

    ipadOffer = function () {

        /**
         * Display offer at top of homepage, when plattform is "ipad"
         */

        if (navigator.platform === 'iPad') {

            var cookieName = 'sde_ipadoffer',
                showOffer = false,
                cookie;

            // This popup has been disabled and can be readded by commenting the following code back in:
            if (SDE.$.cookies.test()) {
                cookie = SDE.$.cookies.get(cookieName);
                if (cookie !== 'shown') {
                    SDE.log.info('User allows cookies and iPad offer has not been removed');
                    showOffer = true;
                }
            }

            if (showOffer) {
                SDE.$(
                    '<aside>' +
                    '<a href="http://www.sueddeutsche.de/szipad" style="color: #666;">' +
                    '<strong style="font-weight: 700; color: #b70000;">Die SZ als App</strong>: ' +
                    ' Lesen Sie die Zeitung jetzt auf dem iPad... ' +
                    '</a>' +
                    '<span id="ipadoffer">Mitteilung schließen</span>' +
                    '</aside>'
                ).css({
                    'background-color': '#dedcd0',
                    'cursor':           'pointer',
                    'display':          'block',
                    'font-size':        '1.8em',
                    'margin':           '0 auto 0.35em auto',
                    'padding':          '1em 0',
                    'position':         'relative',
                    'text-align':       'center',
                    'width':            '1188px'
                }).prependTo('body.homepage');

                SDE.$(
                    '#ipadoffer'
                ).css({
                    'background-image': 'url(http://polpix.sueddeutsche.com/staticassets/' +
                        'img/siteheader/sprite_siteheader.www.png?r=01234567)',
                    'background-repeat': 'no-repeat',
                    'background-position': 'left -700px',
                    'display': 'inline-block',
                    'height': '31px',
                    'position': 'absolute',
                    'right': '20px',
                    'text-indent': '-999em',
                    'top': '10px',
                    'width': '31px'
                });

                SDE.$('aside img').click(function () {
                    SDE.$('aside').slideUp('slow').remove();
                    SDE.$.cookies.set(cookieName, 'shown');
                });
            }
        }
    };

    addToHomescreenIpad = function () {
        var cookieNameClose = 'sde_ipadhome_close',
            cookieNameDismiss = 'sde_ipadhome_noshow',
            dayInMillis = 86400000,
            domain = window.location.hostname.match(/sueddeutsche\.de/) ? '.sueddeutsche.de' : null,
            showPopup = true,
            osVersion;

        if (SDE.$.cookies.test()) {
            if (SDE.$.cookies.get(cookieNameClose) || SDE.$.cookies.get(cookieNameDismiss)) {
                showPopup = false;
            }
        }

        if (navigator.platform === 'iPad') {
            osVersion = SDE.utils.DeviceDetection.osVersion.substring(0, 1);

            if (showPopup) {
                SDE.$('<div id="ipad_homescreen_popup" class="ios' + osVersion + '">' +
                      '<span class="close" data-linktrack="ipad_homescreen_popup_close"></span>' +
                      '<span class="screencap"></span>' +
                      '<p class="text">Fügen Sie Süddeutsche.de auf Ihren iPad-Startschirm hinzu: ' +
                      'Drücken Sie auf den Schalter oben und dann auf "Zum Home-Bildschirm".</p>' +
                      '<span class="noshow" data-linktrack="ipad_homescreen_popup_dontshow"></span>' +
                      '</div>'
                    ).appendTo('body.homepage');

                SDE.$('body.homepage').nodoubletapzoom(true);

                // Handle the close button by setting a cookie to not show the popup for 24hrs
                SDE.$('#ipad_homescreen_popup .close').click(function () {
                    SDE.$('#ipad_homescreen_popup').remove();
                    SDE.$.cookies.set(cookieNameClose, 'close', {expiresAt: new Date(new Date().getTime() + dayInMillis),
                        domain: domain});
                    SDE.$('body').nodoubletapzoom(false);
                });

                // Handle the "don't show" button by setting a never expiring cookie.
                SDE.$('#ipad_homescreen_popup .noshow').click(function () {
                    SDE.$('#ipad_homescreen_popup').remove();
                    SDE.$.cookies.set(cookieNameDismiss, 'noshow', {expiresAt: new Date('01/01/2020 00:00:00 GMT'), domain: domain});
                    SDE.$('body').nodoubletapzoom(false);
                });
            }
        }
    };

    /**
     * Set clickhandler for input field in search, because ie doesn't
     * know what to do with new html5 attribute "placeholder"
     */

    setSearchHandler = function () {

        var searchDefault = 'Suche',
            searchString = searchDefault,
            searchObj = SDE.$('input.search');

        searchObj.removeAttr('placeholder').attr('value', searchDefault);

        SDE.$('input.search').on('focusin', function () {
            if (searchString === searchDefault || searchString === '') {
                searchObj.attr('value', '');
            }
        });

        SDE.$('input.search').on('focusout', function () {
            searchString = searchObj.attr('value');
            if (searchString !== searchDefault && searchString !== '') {
                searchObj.attr('value', searchString);
            } else {
                searchObj.attr('value', searchDefault);
            }
        });

    };
    // setSearchHandler

    /**
     * Fix up the length of "sitenav" to get the correct width of "search"
     * in addiction of loaded fonts (new SZ fonts). The fontsdetection runs
     * 3000ms to check if our SZ-fonts will loaded. In other case it falls
     * back to to system fonts. So we calculate width of search after this
     * run ... to calculate width with the loaded fonts.
     */

    setSitenavWidth = function () {

        var setSitenavWidthWithTimeout = function () {
            var sitenavWidth    = SDE.$('#siteheader .sitenav').width(),
                sitenavDelta    = 0,
                searchListElem  = 90,
                searchInputElem = 48;

            SDE.$('#siteheader .sitenav > li').each(function () {
                var elemWidth = SDE.$(this).outerWidth(true);

                sitenavWidth -= elemWidth;
                return !SDE.$(this).is('#sitesubnavtoggle');
            });

            if (sitenavWidth > searchListElem) {
                sitenavDelta = sitenavWidth - searchListElem - 23; // 23px while searchListElem has a padding, margin and border to left
            }

            SDE.$('#siteheader .sitenav li.search').css('width', (searchListElem + sitenavDelta));
            SDE.$('#siteheader .sitenav li.search input.search').css('width', (searchInputElem + sitenavDelta));
        };

        if (SDE.$.cookies.get('sde_fontCheck')) {
            setSitenavWidthWithTimeout();
        }
        else {
            setTimeout(setSitenavWidthWithTimeout, 3500);
        }

    };
    // setSitenavWidth

    /**
     * Add the back to mobile element if the nomobile cookie was set
     */

    setNoMobileNotice = function () {
        var cookieName      = 'nomobile',
            noMobileCookie  = SDE.$.cookies.test() ? SDE.$.cookies.get(cookieName) : null,
            backToMobile;

        if (noMobileCookie) {
            backToMobile = SDE
                .$('<div></div>')
                .attr('id', 'backtomobile')
                .html('Hier geht es zur optimierten Webseite f&uuml;r Ihr Handy &raquo;')
                .click(function () {
                    SDE.$.cookies.del(cookieName);
                    location.reload();
                });
            SDE.$('#wrapperbelt').before(backToMobile);
        }
    };
    // setNoMobileNotice

    /**
     * This function handels the clicks in the section "mehr"
     *
     *   - opens the layer when clicking on "mehr..."
     *   - closes the layer again when clicking on the "X"
     *   - closes the layer when clicking somewhere else on the homepage
     */

    moreDepartments = function () {
        var panel = '#sitesubnavpanel',
            toggle = '#sitesubnavtoggle',
            hidePanel;

        hidePanel = function () {
            SDE.$(panel)
                .attr('aria-hidden', 'true')
                .fadeOut('fast');
            // unbind the click handler, when the "mehr..." panel is not shown.
            SDE.$(document).unbind('click', hidePanel);
            return this === document;
        };

        //The eventhandler when clicked on "mehr"
        SDE.$(toggle).click(function () {

            //Prevent that the children also use this event handler
            SDE.$(this).children('a').toggle();
            SDE.$(panel)
                .attr('aria-hidden', 'false')
                .css({'top': '29px', 'right': '0' })
                .fadeIn('slow');

            // Hide the "mehr" panel anyway when clicked somewhere else outside of it.
            SDE.$(document).click(hidePanel);

            return false;
        });

        // Don´t inherit the event to the children
        SDE.$(toggle + ' a').click(function (event) {
            event.stopPropagation();
        });

        // Eventhandler for the close button
        SDE.$(panel + ' .closebutton').click(function () {
            hidePanel();
            return false;
        });

        SDE.log.groupEnd();

    };

    /**
     * Fix up the length of "pagenav" according to "breadcrumb" and "features"
     * (they will be fixed)
     */

    setPagenavWidth = function () {

        var siteheader = SDE.$('#siteheader'),
            features = SDE.$('#siteheader .promotion'),
            breadcrumb = SDE.$('#siteheader .breadcrumb'),
            pagenav = (siteheader.outerWidth(true) - breadcrumb.outerWidth(true) - features.outerWidth(true) - 5),
            spacing = 18;

        SDE.$('#siteheader .pagenav').css({'width': pagenav});

        SDE.$('#siteheader .pagenav > li:not(.pagenavsection)').each(function () {
            // The navigation for www.sueddeutsche.de/thema or www.sueddeutsche.de/thema/A needs less spacing
            if (SDE.$('body.thema').length !== 0) {
                spacing = 16;
            }
            SDE.$(this).find('a').css('width', SDE.$(this).outerWidth(true) + spacing);
        });
    };
    // setPagenavWidth

    /**
     * Sets the logo and the current time
     */

    setLogoAndTime = function () {

        /**
         * Linked logo only on homepage itself to reload the site
         */

        var setLinkedLogo,
            setCurrentTime;

        setLinkedLogo = function () {
            SDE.$('#siteheader .logo h1').click(function () {
                location.reload();
            });
        };
        // setLinkedLogo

        /**
         * Get current time to display them in siteheader on homepage
         */
        setCurrentTime = function () {
            if (SDE.$('#homePageCurrentTime').length) {
                var currentTime = new Date(),
                    hours = currentTime.getHours(),
                    minutes = currentTime.getMinutes(),
                    year = currentTime.getFullYear(),
                    day = currentTime.getDate(),
                    month = currentTime.getMonth(),
                    monthArray = ['Januar', 'Februar', 'M\u00e4rz', 'April', 'Mai', 'Juni', 'Juli', 'August',
                                'September', 'Oktober', 'November', 'Dezember'],
                    dateString,
                    timeString;

                hours = (hours < 10 ? '0' : '') + hours;
                minutes = (minutes < 10 ? '0' : '') + minutes;
                day = (day < 10 ? '0' : '') + day;

                dateString = day + '. ' + monthArray[month] + ' ' + year + ', ';
                timeString = hours + ':' + minutes;

                document.getElementById('homePageCurrentTime').firstChild.nodeValue = dateString + timeString;
            }
        };
        // setCurrentTime

        if (SDE.$('body.homepage').length) {
            // Set linkable logo on homepage
            setLinkedLogo();
            // Get current time to display in siteheader
            setCurrentTime();
        }
    };

    setAsStartPageBanner = function () {
        var cookieName = 'sde_setAsStartPage',
            element = SDE.$('#setAsStartBanner'),
            linkAttr = element.find('.startLink').attr('href'),
            domain = window.location.hostname.match(/sueddeutsche\.de/) ? '.sueddeutsche.de' : null;

        // Don't show if this is the article we're meant to link to, or if the cookie is already set
        if (linkAttr && !(window.location.href === linkAttr || window.location.pathname === linkAttr) &&
                SDE.$.cookies.test() && SDE.$.cookies.get(cookieName, {domain: domain}) !== 'removed') {
            SDE.log.info('Showing setAsStartPageBanner');

            element.show();

            SDE.init.readyFns.push(function () {
                element.find('#setAsStartBannerRemove').click(function (e) {
                    e.preventDefault();
                    if (e.stopImmediatePropagation) {
                        e.stopImmediatePropagation();
                    }

                    SDE.$.cookies.set(cookieName, 'removed', {expiresAt: new Date('01/01/2020 00:00:00 GMT'),
                        domain: domain});
                    element.hide();
                    return false;
                });
            });
        }
    };

    if (SDE.init && SDE._.isArray(SDE.init.headerFns)) {
        SDE.init.headerFns.push(
            init,
            ipadOffer,
            addToHomescreenIpad,
            setAsStartPageBanner,
            setSearchHandler,
            setSitenavWidth,
            setPagenavWidth,
            setNoMobileNotice,
            setLogoAndTime,
            moreDepartments
        );
    }
}());
